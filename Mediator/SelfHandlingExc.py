##############################################################################
# VoiceCode, a programming-by-voice environment
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# (C)2000, National Research Council of Canada
#
##############################################################################

import exceptions, sys

class SelfHandlingExc(Exception):
    """Self handling exceptions.

    This class of exception comes with a method for handling itself.

    **INSTANCE ATTRIBUTE**

    *STR* type -- Error type
    - *'FATAL'* -> exit after handling error
    - *'WARNING'* -> do not exit after handing error
    *???* error_file -- file where to output error message

    **CLASS ATTRIBUTE**

    *none* -- 
    """

    def __init__(self, type='FATAL'):
        """Constructor

        **INPUTS**

        *INT* type='FATAL' -- value of attribute of same name 

        **OUTPUTS**

        *none* -- 
        """
        self.__dict__['type'] = type

    def handle(self, **args):
        """Self handler for the exception

        **INPUTS**

        *ANY* **args -- List of Key=Value arguments used to
         override the default attributes of the exception.

        **OUTPUTS**

        *none* -- 
        """
        self.__init__(args)
        self.err_file.write(self.type + ": " + self.err_message() + "\n")
        self.maybe_exit()

    def err__message(self):
        """Error message generated by exception.

        **INPUTS**

        *none* -- 

        **OUTPUTS**

        *STR* mess -- Error message
        """
        mess = "SelfHandlingExc was raised"
        return mess

    def maybe_exit(self):
        """Exits the program if this is a fatal exception

        **INPUTS**

        *none* -- 

        **OUTPUTS**

        *none* -- 
        """
        if (self.type == "FATAL"):
            exit


if (__name__ == "__main__"):
    try:
        raise SelfHandlingExc(type='WARNING')
    except SelfHandlingExc, exc:
        exc.handle()

    try:
        raise SelfHandlingExc(type='FATAL')
    except SelfHandlingExc, exc:
        exc.handle()

    sys.stdout.write('This message should not be printed\n')
    
        


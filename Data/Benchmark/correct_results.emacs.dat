
C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>rem  

C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>rem Shortcut for invoking VoiceCode server 

C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>rem

C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>c:

C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>cd C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator 

C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>rem python new_server.py --bypass -t all 

C:\Documents and Settings\desileta\My Documents\workspace\VCode\Mediator>python wxMediator.py -t all  
creating wxMediator
Loading test definitions...
Configuring the mediator...
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'
Finished wxMediator init...
Starting server threads...
Starting foreground tests...


*******************************************************************************
* Name        : emacs_split_window
* Description : Testing dictation into Emacs with two buffers displayed in same window.
*******************************************************************************

Got command: open_file(%VCODE_HOME%\Data\TestData\foreground.py,)
*** Start of source buffer ***
  1: <CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
Got command: say(['dictated', 'in', 'foreground', 'buffer'],0
,0,0,)
Heard dictated in foreground buffer
*** Start of source buffer ***
  1: dictated_in_foreground_buffer<CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
Got simulated kbd event: type_text({Esc}xsplit-window-vertically{Enter},)
Got simulated kbd event: type_text({Esc}xother-window{Enter},)
Got command: open_file(buf2.py,)
WARNING: source file 'buf2.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['dictated', 'in', 'buffer', 'two'],0
,0,0,)
Heard dictated in buffer two
*** Start of source buffer ***
  1: dictated_in_buffer2<CURSOR>

*** End of source buffer ***
Got command: say(['dictated', 'in', 'buffer', 'two'],0
,0,0,)
Heard dictated in buffer two
*** Start of source buffer ***
  1: dictated_in_buffer2dictated_in_buffer2<CURSOR>

*** End of source buffer ***
Got simulated kbd event: type_text({Esc}xdelete-other-window{Enter},)


*******************************************************************************
* Name        : insert_delete
* Description : Testing insertion and deletion commands
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['this', 'is', 'a', 'very', 'long', 'variable', 'name', 'but', 'never', 'mind'], user_input='1
1
1
1
1
1
1
1
1
')
Heard this is a very long variable name but never mind
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_mind<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space'], user_input='None')
Heard back space
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_min<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['two\\two', 'times'], user_input='None')
Heard two times
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_mi<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 2'], user_input='None')
Heard back space 2
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_never_<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 3'], user_input='None')
Heard back space 3
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but_nev<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 4'], user_input='None')
Heard back space 4
*** Start of source buffer ***
  1: this_is_a_very_long_variable_name_but<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back space 5'], user_input='None')
Heard back space 5
*** Start of source buffer ***
  1: this_is_a_very_long_variable_nam<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['select', 'additional'], user_input='None')
Heard select additional
*** Start of source buffer ***
  1: some <SEL_START>additional<SEL_END> text

*** End of source buffer ***


>>> Testing console command: say(['back space'], user_input='None')
Heard back space
*** Start of source buffer ***
  1: some <CURSOR> text

*** End of source buffer ***


>>> Testing console command: say(['select', 'additional'], user_input='None')
Heard select additional
*** Start of source buffer ***
  1: some <SEL_START>additional<SEL_END> text

*** End of source buffer ***


>>> Testing console command: say(['back space 2'], user_input='None')
Heard back space 2
*** Start of source buffer ***
  1: some<CURSOR> text

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>
  6: import auto_test, exceptions, os, posixpath, profile, sys
  7: 
  8: class Object:


>>> Testing console command: say(['delete', 'that', 'line'], user_input='None')
Heard delete that line
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>import auto_test, exceptions, os, posixpath, profile, sys
  6: 
  7: class Object:
  8:     """A base class for all VoiceCode objects


>>> Testing console command: say(['do', 'that', 'again'], user_input='None')
Heard do that again
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>
  6: class Object:
  7:     """A base class for all VoiceCode objects
  8: 


>>> Testing console command: say(['delete', 'that', 'line', 'two\\two', 'times'], user_input='None')
Heard delete that line two times
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>    """A base class for all VoiceCode objects
  6: 
  7:     This class implements various useful behaviors for generic
  8:     objects, such as:


>>> Testing console command: say(['select', 'base', 'class'], user_input='None')
Heard select base class
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5:     """A <SEL_START>base class<SEL_END> for all VoiceCode objects
  6: 
  7:     This class implements various useful behaviors for generic
  8:     objects, such as:


>>> Testing console command: say(['delete', 'that'], user_input='None')
Heard delete that
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5:     """A <CURSOR> for all VoiceCode objects
  6: 
  7:     This class implements various useful behaviors for generic
  8:     objects, such as:


>>> Testing console command: say(['select', 'various', 'useful'], user_input='None')
Heard select various useful
  4: autoTst = 0
  5:     """A  for all VoiceCode objects
  6: 
  7:     This class implements <SEL_START>various useful<SEL_END> behaviors for generic
  8:     objects, such as:
  9: 
 10:     - safe attribute setting


>>> Testing console command: say(['yo', 'copy', 'that'], user_input='None')
Heard yo copy that
  4: autoTst = 0
  5:     """A  for all VoiceCode objects
  6: 
  7:     This class implements <SEL_START>various useful<SEL_END> behaviors for generic
  8:     objects, such as:
  9: 
 10:     - safe attribute setting


>>> Testing console command: say(['yo', 'paste', 'that'], user_input='None')
Heard yo paste that
  4: autoTst = 0
  5:     """A  for all VoiceCode objects
  6: 
  7:     This class implements <SEL_START>various useful<SEL_END>various useful behaviors for generic
  8:     objects, such as:
  9: 
 10:     - safe attribute setting


>>> Testing console command: say(['select', 'safe', 'attribute'], user_input='None')
Heard select safe attribute
  7:     This class implements various usefulvarious useful behaviors for generic
  8:     objects, such as:
  9: 
 10:     - <SEL_START>safe attribute<SEL_END> setting
 11:     - deep constructor
 12:     - pretty printing???
 13:     


>>> Testing console command: say(['yo', 'cut', 'that'], user_input='None')
Heard yo cut that
  7:     This class implements various usefulvarious useful behaviors for generic
  8:     objects, such as:
  9: 
 10:     - <CURSOR> setting
 11:     - deep constructor
 12:     - pretty printing???
 13:     


>>> Testing console command: say(['yo', 'paste', 'that'], user_input='None')
Heard yo paste that
  7:     This class implements various usefulvarious useful behaviors for generic
  8:     objects, such as:
  9: 
 10:     - <CURSOR>safe attribute setting
 11:     - deep constructor
 12:     - pretty printing???
 13:     
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>    """A  for all VoiceCode objects
  6: 
  7:     This class implements various usefulvarious useful behaviors for generic
  8:     objects, such as:


>>> Testing console command: say(['yo', 'cut', 'line'], user_input='None')
Heard yo cut line
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>
  6:     This class implements various usefulvarious useful behaviors for generic
  7:     objects, such as:
  8: 


>>> Testing console command: say(['yo', 'paste', 'that'], user_input='None')
Heard yo paste that
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0
  5: <CURSOR>    """A  for all VoiceCode objects
  6: 
  7:     This class implements various usefulvarious useful behaviors for generic
  8:     objects, such as:
*** Start of source buffer ***
  1: 
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: <CURSOR>autoTst = 0
  5:     """A  for all VoiceCode objects
  6: 
  7:     This class implements various usefulvarious useful behaviors for generic


>>> Testing console command: say(['yo', 'copy', 'line'], user_input='None')
Heard yo copy line
*** Start of source buffer ***
  1: 
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: <SEL_START>autoTst = 0
  5: <SEL_END>    """A  for all VoiceCode objects
  6: 
  7:     This class implements various usefulvarious useful behaviors for generic


>>> Testing console command: say(['yo', 'paste', 'that'], user_input='None')
Heard yo paste that
*** Start of source buffer ***
  1: 
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: <SEL_START>autoTst = 0
  5: <SEL_END>autoTst = 0
  6:     """A  for all VoiceCode objects
  7: 


*******************************************************************************
* Name        : mixed_mode_editing
* Description : Testing mixed mode (kbd + voice) editing
*******************************************************************************

Got command: open_file(%VCODE_HOME%\Data\TestData\foreground.py,)
*** Start of source buffer ***
  1: <CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: <CURSOR># This is a small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got command: goto(472,)
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #<CURSOR> This is a small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got simulated kbd event: move_cursor_by_kbd(Right,10,)
Got command: say(['hello'],0
,0,0,)
Heard hello
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is ahello<CURSOR> small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: <CURSOR># This is ahello small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got command: goto(472,)
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #<CURSOR> This is ahello small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got simulated kbd event: set_selection_by_kbd(Right,10,)
Got command: say(['hello'],0
,0,0,)
Heard hello
  6: # is safe for you to proceed with your work.
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hello<CURSOR>hello small buffer for testing editing of Python code
 10: 
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
Got command: goto_line(10,)
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10: <CURSOR>
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got simulated kbd event: type_text(, hi,)
Got simulated kbd event: move_cursor_by_kbd(Left,5,)
Got command: say(['next', 'comma'],None,0,0,)
Heard next comma
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10: , <CURSOR>hi
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got command: goto_line(10,)
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10: <CURSOR>, hi
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got simulated kbd event: type_text( hello ,)
Got command: say(['select', 'hello'],0
,1,0,)
Heard select hello
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: #hellohello small buffer for testing editing of Python code
 10:  <SEL_START>hello<SEL_END> , hi
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     


*******************************************************************************
* Name        : switch_buffer
* Description : Switching to an other buffer in Emacs.
*******************************************************************************

WARNING: source file 'dummy.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['class', 'dummy'],None,0,0,)
Heard class dummy
*** Start of source buffer ***
  1: class Dummy<CURSOR>:
  2:     

*** End of source buffer ***
WARNING: source file 'test.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['yo', 'switch', 'to', 'buffer'],None,0,0,)
Heard yo switch to buffer
Compiling symbols for *Completions*
Done compiling symbols
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['select', 'dummy'],None,1,0,)
Heard select dummy
  3: 
  4: Possible completions are:
  5: *Messages*			   *scratch*
  6: <SEL_START>dummy<SEL_END>.py			   test.py

*** End of source buffer ***
Got command: say(['new', 'line'],None,0,0,)
Heard new line
  3: 
  4: Possible completions are:
  5: *Messages*			   *scratch*
  6: <SEL_START>dummy<SEL_END>.py			   test.py

*** End of source buffer ***
*** Start of source buffer ***
  1: class Dummy<CURSOR>:
  2:     

*** End of source buffer ***
WARNING: source file 'dummy.py' doesn't exist.
*** Start of source buffer ***
  1: class Dummy<CURSOR>:
  2:     

*** End of source buffer ***
Got command: say(['yo', 'switch', 'to', 'buffer'],None,0,0,)
Heard yo switch to buffer
Compiling symbols for *Completions*
Done compiling symbols
*** Start of source buffer ***
  1: class Dummy<CURSOR>:
  2:     

*** End of source buffer ***
Got command: say(['select', 'dummy'],None,1,0,)
Heard select dummy
  3: 
  4: Possible completions are:
  5: *Completions*			   *Messages*
  6: *scratch*			   <SEL_START>dummy<SEL_END>.py
  7: test.py

*** End of source buffer ***
Got command: say(['hello'],None,1,0,)
Heard hello
  3: 
  4: Possible completions are:
  5: *Completions*			   *Messages*
  6: *scratch*			   <SEL_START>dummy<SEL_END>.py
  7: test.py

*** End of source buffer ***
  3: 
  4: Possible completions are:
  5: *Completions*			   *Messages*
  6: *scratch*			   <SEL_START>dummy<SEL_END>.py
  7: test.py

*** End of source buffer ***
Got command: say(['select', 'dummy'],None,1,0,)
Heard select dummy
  3: 
  4: Possible completions are:
  5: *Completions*			   *Messages*
  6: *scratch*			   <SEL_START>dummy<SEL_END>.py
  7: test.py

*** End of source buffer ***
Got command: say(['new', 'line'],None,0,0,)
Heard new line
  3: 
  4: Possible completions are:
  5: *Completions*			   *Messages*
  6: *scratch*			   <SEL_START>dummy<SEL_END>.py
  7: test.py

*** End of source buffer ***
*** Start of source buffer ***
  1: <SEL_START>class Dummy<SEL_END>:
  2:     

*** End of source buffer ***


*******************************************************************************
* Name        : text_mode
* Description : Test dictation of normal text.
*******************************************************************************

*** Start of source buffer ***
  1: <CURSOR>#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  2: # WARNING: the mediator is now running foreground tests, which may
  3: # change the contents of the foreground window.  Unless you want your
  4: # own files corrupted, this editor window MUST remain in the foreground 
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: <CURSOR>
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Heard print quotes
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "<CURSOR>"
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "<CURSOR>"
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Setting VCode in text mode.
Got command: say(['text', 'mode', 'on'],1
1
1
,1,0,)
Got command: say(['this', 'should', 'be', 'typed', 'as', 'normal', 'text'],1
1
,1,0,)
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text<CURSOR>"
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Setting VCode in code dictation mode.
Got command: say(['text', 'mode', 'off'],1
1
1
,1,0,)
Heard jump out
  7: #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"<CURSOR>
 11: class AClass(ASuper):
 12:     """This is a dummy class"""
 13:     
Got command: say(['new', 'statement', 'print'],None,0,0,)
Heard new statement print
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print <CURSOR>
 12: class AClass(ASuper):
 13:     """This is a dummy class"""
 14:     
Got command: say(['this', 'should', 'be', 'typed', 'as', 'a', 'variable', 'name'],1
1
1
,1,0,)
Heard this should be typed as a variable name
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name<CURSOR>
 12: class AClass(ASuper):
 13:     """This is a dummy class"""
 14:     
  8: 
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name<CURSOR>
 12: class AClass(ASuper):
 13:     """This is a dummy class"""
 14:     
Heard new statement print quotes
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "<CURSOR>"
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "<CURSOR>"
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
Setting VCode in text mode using alternative spoken form.
Got command: say(['text', 'mode', 'on'],1
1
1
,1,0,)
Got command: say(['this', 'should', 'be', 'typed', 'as', 'normal', 'text'],1
1
,1,0,)
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text<CURSOR>"
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
Setting VCode in code dictation mode using alternative spoken form.
Got command: say(['alternative', 'test', 'text', 'mode', 'off'],1
1
1
,1,0,)
Heard jump out
  9: # This is a small buffer for testing editing of Python code
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"<CURSOR>
 13: class AClass(ASuper):
 14:     """This is a dummy class"""
 15:     
Got command: say(['new', 'statement', 'print'],None,0,0,)
Heard new statement print
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"
 13: print <CURSOR>
 14: class AClass(ASuper):
 15:     """This is a dummy class"""
 16:     
Got command: say(['this', 'should', 'be', 'typed', 'as', 'a', 'variable', 'name'],1
1
1
,1,0,)
Heard this should be typed as a variable name
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"
 13: print this_should_be_typed_as_a_variable_name<CURSOR>
 14: class AClass(ASuper):
 15:     """This is a dummy class"""
 16:     
 10: print "this should be typed as normal text"
 11: print this_should_be_typed_as_a_variable_name
 12: print "this should be typed as normal text"
 13: print this_should_be_typed_as_a_variable_name<CURSOR>
 14: class AClass(ASuper):
 15:     """This is a dummy class"""
 16:     
Finished foreground tests...
Starting background tests...


*******************************************************************************
* Name        : C_Cpp
* Description : testing the various CSCs and LSAs for dictating C/C++ from scratch
*******************************************************************************


>>> Dictating C/C++ when only standard symbols are known <<<

THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
floor: ['floor']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
type: ['type']
_cached_symbols_as_one_string[a] is:
    __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    fabs  floor  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  type  
WARNING: source file 'blah.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard wrap header
*** Start of source buffer ***
  1: #ifndef BLAH_CPP
  2: #define BLAH_CPP
  3: 
  4: <CURSOR>
  5: 
  6: 
  7: #endif
Heard pound include quotes string after quotes
*** Start of source buffer ***
  1: #ifndef BLAH_CPP
  2: #define BLAH_CPP
  3: 
  4: #include "str"<CURSOR>
  5: 
  6: 
  7: #endif
Heard new line
  2: #define BLAH_CPP
  3: 
  4: #include "str"
  5: <CURSOR>
  6: 
  7: 
  8: #endif
Heard pound include angle-brackets string
  2: #define BLAH_CPP
  3: 
  4: #include "str"
  5: #include <str<CURSOR>>
  6: 
  7: 
  8: #endif
Heard after angle
  2: #define BLAH_CPP
  3: 
  4: #include "str"
  5: #include <str><CURSOR>
  6: 
  7: 
  8: #endif
Heard new paragraph
  4: #include "str"
  5: #include <str>
  6: 
  7: <CURSOR>
  8: 
  9: 
 10: #endif
Heard comment line
  5: #include <str>
  6: 
  7: 
  8: // <CURSOR>
  9: 
 10: 
 11: #endif
Heard test comment
  5: #include <str>
  6: 
  7: 
  8: // test_comment<CURSOR>
  9: 
 10: 
 11: #endif
Heard new paragraph
  7: 
  8: // test_comment
  9: 
 10: <CURSOR>
 11: 
 12: 
 13: #endif
Heard begin long comment this
  7: 
  8: // test_comment
  9: 
 10: /* this<CURSOR>
 11: 
 12: 
 13: #endif
Heard new line
  8: // test_comment
  9: 
 10: /* this
 11:    <CURSOR>
 12: 
 13: 
 14: #endif
Heard is an important
  8: // test_comment
  9: 
 10: /* this
 11:    is_an_important<CURSOR>
 12: 
 13: 
 14: #endif
Heard new line
  9: 
 10: /* this
 11:    is_an_important
 12:    <CURSOR>
 13: 
 14: 
 15: #endif
Heard bit of information end long comment
  9: 
 10: /* this
 11:    is_an_important
 12:    bit_of_information*/<CURSOR>
 13: 
 14: 
 15: #endif
Heard new paragraph
 11:    is_an_important
 12:    bit_of_information*/
 13: 
 14: <CURSOR>
 15: 
 16: 
 17: #endif
Heard define template
 11:    is_an_important
 12:    bit_of_information*/
 13: 
 14: template <<CURSOR>>
 15: 
 16: 
 17: 
Heard type name
 11:    is_an_important
 12:    bit_of_information*/
 13: 
 14: template <typename <CURSOR>>
 15: 
 16: 
 17: 
Heard some data type
 11:    is_an_important
 12:    bit_of_information*/
 13: 
 14: template <typename some_data_type<CURSOR>>
 15: 
 16: 
 17: 
Heard comma class object type
 11:    is_an_important
 12:    bit_of_information*/
 13: 
 14: template <typename some_data_type, class object_type<CURSOR>>
 15: 
 16: 
 17: 
Heard after angle new line define class foo
 12:    bit_of_information*/
 13: 
 14: template <typename some_data_type, class object_type>
 15: class Foo<CURSOR>
 16: {
 17: 
 18: public:
Heard class body
 15: class Foo
 16: {
 17: 
 18: <CURSOR>public:
 19: 
 20: private:
 21: 
Heard jump out
 19: 
 20: private:
 21: 
 22: }<CURSOR>
 23: 
 24: 
 25: 
Heard new paragraph
 21: 
 22: }
 23: 
 24: <CURSOR>
 25: 
 26: 
 27: 
Heard declare function test procedure
 21: 
 22: }
 23: 
 24: test_procedure<CURSOR>();
 25: 
 26: 
 27: 
Heard add argument integer count
 21: 
 22: }
 23: 
 24: test_procedure(int count<CURSOR>);
 25: 
 26: 
 27: 
Heard comma float divisor
 21: 
 22: }
 23: 
 24: test_procedure(int count, float divisor<CURSOR>);
 25: 
 26: 
 27: 
Heard returning void
 21: 
 22: }
 23: 
 24: void <CURSOR>test_procedure(int count, float divisor);
 25: 
 26: 
 27: 
Heard new statement
 25: 
 26: 
 27: 
 28: <CURSOR>;
 29: #endif
 30: 

*** End of source buffer ***
Heard declare char hello
 25: 
 26: 
 27: 
 28: char hello<CURSOR>;
 29: #endif
 30: 

*** End of source buffer ***
Heard new statement
 26: 
 27: 
 28: char hello;
 29: <CURSOR>;
 30: #endif
 31: 

*** End of source buffer ***
Heard int count
 26: 
 27: 
 28: char hello;
 29: int count<CURSOR>;
 30: #endif
 31: 

*** End of source buffer ***
Heard new statement integer pointer testing pointers
 27: 
 28: char hello;
 29: int count;
 30: int * testing_pointers<CURSOR>;
 31: #endif
 32: 

*** End of source buffer ***
Heard comma pointer testing other pointers
 27: 
 28: char hello;
 29: int count;
 30: int * testing_pointers, * testing_other_pointers<CURSOR>;
 31: #endif
 32: 

*** End of source buffer ***
Heard new statement declare the value of type double
 28: char hello;
 29: int count;
 30: int * testing_pointers, * testing_other_pointers;
 31: double <CURSOR>the_value;
 32: #endif
 33: 

*** End of source buffer ***
Heard new statement declare some variable of type static int
 29: int count;
 30: int * testing_pointers, * testing_other_pointers;
 31: double the_value;
 32: static int <CURSOR>some_variable;
 33: #endif
 34: 

*** End of source buffer ***
Heard new statement declare char star star string address
 30: int * testing_pointers, * testing_other_pointers;
 31: double the_value;
 32: static int some_variable;
 33: char **string_address<CURSOR>;
 34: #endif
 35: 

*** End of source buffer ***
Heard after semi
 30: int * testing_pointers, * testing_other_pointers;
 31: double the_value;
 32: static int some_variable;
 33: char **string_address;<CURSOR>
 34: #endif
 35: 

*** End of source buffer ***
Heard new paragraph
 32: static int some_variable;
 33: char **string_address;
 34: 
 35: <CURSOR>
 36: #endif
 37: 

*** End of source buffer ***
Heard declare function foo
 32: static int some_variable;
 33: char **string_address;
 34: 
 35: Foo<CURSOR>();
 36: #endif
 37: 

*** End of source buffer ***
Heard returning some pointer
 32: static int some_variable;
 33: char **string_address;
 34: 
 35: some* <CURSOR>Foo();
 36: #endif
 37: 

*** End of source buffer ***
Heard add argument integer counter comma sum of type int
 32: static int some_variable;
 33: char **string_address;
 34: 
 35: some* Foo(int counter, int <CURSOR>sum);
 36: #endif
 37: 

*** End of source buffer ***
Heard after semi
 32: static int some_variable;
 33: char **string_address;
 34: 
 35: some* Foo(int counter, int sum);<CURSOR>
 36: #endif
 37: 

*** End of source buffer ***
Heard new paragraph
 34: 
 35: some* Foo(int counter, int sum);
 36: 
 37: <CURSOR>
 38: #endif
 39: 

*** End of source buffer ***
Heard declare method bar scope operator fabulous method returning char star
 34: 
 35: some* Foo(int counter, int sum);
 36: 
 37: char *<CURSOR>bar::fabulous_method();
 38: #endif
 39: 

*** End of source buffer ***
Heard add argument integer pointer another memory address
 34: 
 35: some* Foo(int counter, int sum);
 36: 
 37: char *bar::fabulous_method(int * another_memory_address<CURSOR>);
 38: #endif
 39: 

*** End of source buffer ***
Heard after semi new paragraph
 36: 
 37: char *bar::fabulous_method(int * another_memory_address);
 38: 
 39: <CURSOR>
 40: #endif
 41: 

*** End of source buffer ***
Heard define function foo returning some pointer
 36: 
 37: char *bar::fabulous_method(int * another_memory_address);
 38: 
 39: some* <CURSOR>Foo()
 40: {
 41: 
 42: }
Heard add argument integer counter comma sum of type int
 36: 
 37: char *bar::fabulous_method(int * another_memory_address);
 38: 
 39: some* Foo(int counter, int <CURSOR>sum)
 40: {
 41: 
 42: }
Heard jump out jump out new paragraph
 41: 
 42: }
 43: 
 44: <CURSOR>
 45: #endif
 46: 

*** End of source buffer ***
Heard define method foo scope bar returning pointer to char
 41: 
 42: }
 43: 
 44: char <CURSOR>*Foo::bar()
 45: {
 46: 
 47: }
Heard method body
 44: char *Foo::bar()
 45: {
 46: 
 47: <CURSOR>}
 48: #endif
 49: 

*** End of source buffer ***
Heard for loop
 44: char *Foo::bar()
 45: {
 46: 
 47: for (<CURSOR>; ; )
 48:   {
 49: 
 50:   }
Heard integer index equals zero
 44: char *Foo::bar()
 45: {
 46: 
 47: for (int index = 0<CURSOR>; ; )
 48:   {
 49: 
 50:   }
Heard after semi index
 44: char *Foo::bar()
 45: {
 46: 
 47: for (int index = 0; index<CURSOR>; )
 48:   {
 49: 
 50:   }
Heard is less or equal to
 44: char *Foo::bar()
 45: {
 46: 
 47: for (int index = 0; index <= <CURSOR>; )
 48:   {
 49: 
 50:   }
Heard platypus count
 44: char *Foo::bar()
 45: {
 46: 
 47: for (int index = 0; index <= platypus_count<CURSOR>; )
 48:   {
 49: 
 50:   }
Heard after semi index increment
 44: char *Foo::bar()
 45: {
 46: 
 47: for (int index = 0; index <= platypus_count; index++<CURSOR>)
 48:   {
 49: 
 50:   }
Heard loop body
 46: 
 47: for (int index = 0; index <= platypus_count; index++)
 48:   {
 49: <CURSOR>
 50:   }
 51: }
 52: #endif
Heard while loop
 46: 
 47: for (int index = 0; index <= platypus_count; index++)
 48:   {
 49:     while (<CURSOR>)
 50:       {
 51: 
 52:       }
Heard conditional function with argument index
 46: 
 47: for (int index = 0; index <= platypus_count; index++)
 48:   {
 49:     while (conditional_function(index<CURSOR>))
 50:       {
 51: 
 52:       }
Heard do some stuff
 48:   {
 49:     while (conditional_function(index))
 50:       {
 51: some_stuff<CURSOR>
 52:       }
 53:   }
 54: }
Heard empty parens semicolon
 48:   {
 49:     while (conditional_function(index))
 50:       {
 51: 	some_stuff(); <CURSOR>
 52:       }
 53:   }
 54: }
Heard after semi new line
 49:     while (conditional_function(index))
 50:       {
 51: 	some_stuff();
 52: 	<CURSOR>
 53:       }
 54:   }
 55: }
Heard declare enumerator shapes
 49:     while (conditional_function(index))
 50:       {
 51: 	some_stuff();
 52: 	enum shapes<CURSOR> {};
 53:       }
 54:   }
 55: }
Heard after brace square comma circle comma triangle
 49:     while (conditional_function(index))
 50:       {
 51: 	some_stuff();
 52: 	enum shapes {square, circle, triangle<CURSOR>};
 53:       }
 54:   }
 55: }
Heard after semi new paragraph
 51: 	some_stuff();
 52: 	enum shapes {square, circle, triangle};
 53: 
 54: 	<CURSOR>
 55:       }
 56:   }
 57: }
Heard switch initial character go to body
 52: 	enum shapes {square, circle, triangle};
 53: 
 54: 	switch (initial_character) {
 55: <CURSOR>
 56: 	}
 57:       }
 58:   }
Heard case single-quotes alpha
 52: 	enum shapes {square, circle, triangle};
 53: 
 54: 	switch (initial_character) {
 55: 	case 'a<CURSOR>':
 56: 
 57: 	}
 58:       }
Heard after colon new line some procedure with arguments jump out semi new line break
 55: 	case 'a':
 56: 	  some_procedure();
 57: 	  break;
 58: 	  <CURSOR>
 59: 
 60: 	}
 61:       }
Heard case single-quotes bravo
 55: 	case 'a':
 56: 	  some_procedure();
 57: 	  break;
 58: 	case 'b<CURSOR>':
 59: 
 60: 
 61: 	}
Heard after colon new line do something different parens jump out semi new line
 57: 	  break;
 58: 	case 'b':
 59: 	  something_different();
 60: 	  <CURSOR>
 61: 
 62: 
 63: 	}
Heard break default foo bar equals four semi jump out new paragraph
 64: 
 65: 	}
 66: 
 67: 	<CURSOR>
 68:       }
 69:   }
 70: }
Heard if type I. D. of some variable jump out is equal to type I. D. int
 64: 
 65: 	}
 66: 
 67: 	if (typeid(some_variable) == typeid(int <CURSOR>))
 68: 	  {
 69: 
 70: 	  }
Heard then increment some variable semicolon
 66: 
 67: 	if (typeid(some_variable) == typeid(int ))
 68: 	  {
 69: 	    ++some_variable; <CURSOR>
 70: 	  }
 71:       }
 72:   }
Heard jump out
 67: 	if (typeid(some_variable) == typeid(int ))
 68: 	  {
 69: 	    ++some_variable; 
 70: 	  }<CURSOR>
 71:       }
 72:   }
 73: }
Heard new paragraph
 69: 	    ++some_variable; 
 70: 	  }
 71: 
 72: 	<CURSOR>
 73:       }
 74:   }
 75: }
Heard try value equals some procedure execution with arguments jump out semicolon
 70: 	  }
 71: 
 72: 	try {
 73: 	  value = some_procedure(); <CURSOR>
 74: 	}
 75:       }
 76:   }
Heard new statement
 71: 
 72: 	try {
 73: 	  value = some_procedure(); 
 74: 	  <CURSOR>;
 75: 	}
 76:       }
 77:   }
Heard zoo dot animal parens quotes tiger jump out jump out dot eat with argument little boy
 71: 
 72: 	try {
 73: 	  value = some_procedure(); 
 74: 	  zoo.animal("tiger").eat(little_boy<CURSOR>);
 75: 	}
 76:       }
 77:   }
Heard jump out jump out new line
 73: 	  value = some_procedure(); 
 74: 	  zoo.animal("tiger").eat(little_boy);
 75: 	}
 76: 	<CURSOR>
 77:       }
 78:   }
 79: }
Heard catch ellipsis
 73: 	  value = some_procedure(); 
 74: 	  zoo.animal("tiger").eat(little_boy);
 75: 	}
 76: 	catch (...<CURSOR>) {
 77: 
 78: 	}
 79:       }
Heard go to body
 74: 	  zoo.animal("tiger").eat(little_boy);
 75: 	}
 76: 	catch (...) {
 77: <CURSOR>
 78: 	}
 79:       }
 80:   }
Heard new statement
 75: 	}
 76: 	catch (...) {
 77: 
 78: 	  <CURSOR>;
 79: 	}
 80:       }
 81:   }
Heard process exception parens little boy jump out jump out new paragraph
 78: 	  process_exception(little_boy);
 79: 	}
 80: 
 81: 	<CURSOR>
 82:       }
 83:   }
 84: }
Heard do while
 80: 
 81: 	do
 82: 	  {
 83: <CURSOR>
 84: 	  } while ();
 85: 	
 86:       }
Heard some silly value increment semi
 80: 
 81: 	do
 82: 	  {
 83: 	    some_silly_value++; <CURSOR>
 84: 	  } while ();
 85: 	
 86:       }
Heard after paren
 81: 	do
 82: 	  {
 83: 	    some_silly_value++; 
 84: 	  } while (<CURSOR>);
 85: 	
 86:       }
 87:   }
Heard some silly value
 81: 	do
 82: 	  {
 83: 	    some_silly_value++; 
 84: 	  } while (some_silly_value<CURSOR>);
 85: 	
 86:       }
 87:   }
Heard less than
 81: 	do
 82: 	  {
 83: 	    some_silly_value++; 
 84: 	  } while (some_silly_value < <CURSOR>);
 85: 	
 86:       }
 87:   }
Heard ten jump out jump out
 83: 	    some_silly_value++; 
 84: 	  } while (some_silly_value < 10);
 85: 	
 86:       }<CURSOR>
 87:   }
 88: }
 89: #endif
Heard new paragraph
 85: 	
 86:       }
 87: 
 88:     <CURSOR>
 89:   }
 90: }
 91: #endif
Heard if the value less than four then
 87: 
 88:     if (the_value < 4)
 89:       {
 90: <CURSOR>
 91:       }
 92:   }
 93: }
Heard value one equals static cast integer add argument some symbol
 87: 
 88:     if (the_value < 4)
 89:       {
 90: 	value1 = static_cast<int >(some_symbol<CURSOR>)
 91:       }
 92:   }
 93: }
Got command: goto_end_of_line(None,)
 87: 
 88:     if (the_value < 4)
 89:       {
 90: 	value1 = static_cast<int >(some_symbol)<CURSOR>
 91:       }
 92:   }
 93: }
Heard semi new statement
 88:     if (the_value < 4)
 89:       {
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	<CURSOR>;
 92:       }
 93:   }
 94: }
Heard value two equals reinterpret cast integer add argument some symbol
 88:     if (the_value < 4)
 89:       {
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol<CURSOR>);
 92:       }
 93:   }
 94: }
Heard new statement
 89:       {
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	<CURSOR>;
 93:       }
 94:   }
 95: }
Heard value three equals dynamic cast integer add argument some symbol
 89:       {
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol<CURSOR>);
 93:       }
 94:   }
 95: }
Heard new statement
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	<CURSOR>;
 94:       }
 95:   }
 96: }
Heard value eight equals
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value8 = <CURSOR>;
 94:       }
 95:   }
 96: }
Heard constant cast
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value8 = const_cast<<CURSOR>>();
 94:       }
 95:   }
 96: }
Heard integer add argument some symbol
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value8 = const_cast<int >(some_symbol<CURSOR>);
 94:       }
 95:   }
 96: }
Heard new statement above
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	<CURSOR>;
 94: 	value8 = const_cast<int >(some_symbol);
 95:       }
 96:   }
Heard value four equals some symbol
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = some_symbol<CURSOR>;
 94: 	value8 = const_cast<int >(some_symbol);
 95:       }
 96:   }
Heard constant cast to
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<<CURSOR>>(some_symbol);
 94: 	value8 = const_cast<int >(some_symbol);
 95:       }
 96:   }
Heard integer
 90: 	value1 = static_cast<int >(some_symbol); 
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int <CURSOR>>(some_symbol);
 94: 	value8 = const_cast<int >(some_symbol);
 95:       }
 96:   }
Heard new statement
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	<CURSOR>;
 95: 	value8 = const_cast<int >(some_symbol);
 96:       }
 97:   }
Heard value five equals some symbol dynamic cast to void pointer
 91: 	value2 = reinterpret_cast<int >(some_symbol);
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * <CURSOR>>(some_symbol);
 95: 	value8 = const_cast<int >(some_symbol);
 96:       }
 97:   }
Heard new statement
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	<CURSOR>;
 96: 	value8 = const_cast<int >(some_symbol);
 97:       }
 98:   }
Heard value seven equals some symbol reinterpret cast to fake object type
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	value7 = reinterpret_cast<fake_object_type<CURSOR>>(some_symbol);
 96: 	value8 = const_cast<int >(some_symbol);
 97:       }
 98:   }
Heard new statement above
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	<CURSOR>;
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98:       }
Heard value six equals some symbol static cast to void star
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	value6 = static_cast<void *<CURSOR>>(some_symbol);
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98:       }
Heard next semi
 92: 	value3 = dynamic_cast<int >(some_symbol);
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	value6 = static_cast<void *>(some_symbol);<CURSOR>
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98:       }
Heard next semi
 93: 	value4 = const_cast<int >(some_symbol);
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	value6 = static_cast<void *>(some_symbol);
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);<CURSOR>
 97: 	value8 = const_cast<int >(some_symbol);
 98:       }
 99:   }
Heard again
 94: 	value5 = dynamic_cast<void * >(some_symbol);
 95: 	value6 = static_cast<void *>(some_symbol);
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);<CURSOR>
 98:       }
 99:   }
100: }
Heard new statement
 95: 	value6 = static_cast<void *>(some_symbol);
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98: 	<CURSOR>;
 99:       }
100:   }
101: }
Heard yet another value equals value five cast to int pointer
 95: 	value6 = static_cast<void *>(some_symbol);
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98: 	yet_another_value = (int * <CURSOR>) value5;
 99:       }
100:   }
101: }
Heard new statement
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98: 	yet_another_value = (int * ) value5;
 99: 	<CURSOR>;
100:       }
101:   }
102: }
Heard yet another value equals cast int pointer jump out value eight
 96: 	value7 = reinterpret_cast<fake_object_type>(some_symbol);
 97: 	value8 = const_cast<int >(some_symbol);
 98: 	yet_another_value = (int * ) value5;
 99: 	yet_another_value = (int * )value8<CURSOR>;
100:       }
101:   }
102: }
Heard after semi new line
 97: 	value8 = const_cast<int >(some_symbol);
 98: 	yet_another_value = (int * ) value5;
 99: 	yet_another_value = (int * )value8;
100: 	<CURSOR>
101:       }
102:   }
103: }
Heard break
 98: 	yet_another_value = (int * ) value5;
 99: 	yet_another_value = (int * )value8;
100: 	break;
101: 	<CURSOR>
102:       }
103:   }
104: }
Heard else if the value greater than fifteen then foo equals new bar semicolon
103: 
104:     else if (the_value > 15)
105:       {
106: 	Foo = new bar; <CURSOR>
107:       }
108:   }
109: }
Heard else continue
109:     else
110:       {
111: 	continue;
112: 	<CURSOR>
113:       }
114:   }
115: }
Heard new statement above testing adding above with arguments
109:     else
110:       {
111: 	continue;
112: 	testing_adding_above(<CURSOR>);
113: 	
114:       }
115:   }
Heard jump out jump out jump out jump out
113: 	
114:       }
115:   }
116: }<CURSOR>
117: #endif
118: 

*** End of source buffer ***
Heard new paragraph
115:   }
116: }
117: 
118: <CURSOR>
119: #endif
120: 

*** End of source buffer ***
Heard define class really great stuff
115:   }
116: }
117: 
118: class ReallyGreatStuff<CURSOR>
119: {
120: 
121: public:
Heard with superclass important superclass
115:   }
116: }
117: 
118: class ReallyGreatStuff: ImportantSuperclass<CURSOR>
119: {
120: 
121: public:
Heard private members
120: 
121: public:
122: 
123: private:<CURSOR>
124: 
125: }
126: #endif
Heard new line int foo semicolon
121: public:
122: 
123: private:
124:   int Foo; <CURSOR>
125: 
126: }
127: #endif
Heard jump back out
116: }
117: 
118: class ReallyGreatStuff: ImportantSuperclass
119: <CURSOR>{
120: 
121: public:
122: 
Heard new public member new line float pointer bar semi new line
121: public:
122: 
123:   float * bar;
124:   <CURSOR>
125: private:
126:   int Foo; 
127: 
Heard declare function testing declaration
121: public:
122: 
123:   float * bar;
124:   testing_declaration<CURSOR>();
125: private:
126:   int Foo; 
127: 
Heard jump out
121: public:
122: 
123:   float * bar;
124:   testing_declaration()<CURSOR>;
125: private:
126:   int Foo; 
127: 
Heard jump out
125: private:
126:   int Foo; 
127: 
128: }<CURSOR>
129: #endif
130: 

*** End of source buffer ***
Heard new paragraph
127: 
128: }
129: 
130: <CURSOR>
131: #endif
132: 

*** End of source buffer ***
Heard typedef struct my tree structured data
127: 
128: }
129: 
130: typedef struct my_tree_structured_data<CURSOR>
131: {
132: 
133: };
Heard body
129: 
130: typedef struct my_tree_structured_data
131: {
132: <CURSOR>
133: };
134: #endif
135: 

*** End of source buffer ***
Heard character star description semi new statement
130: typedef struct my_tree_structured_data
131: {
132:   character*description; 
133:   <CURSOR>;
134: };
135: #endif
136: 

*** End of source buffer ***
Heard integer value count
130: typedef struct my_tree_structured_data
131: {
132:   character*description; 
133:   int value_count<CURSOR>;
134: };
135: #endif
136: 

*** End of source buffer ***
Heard new statement
131: {
132:   character*description; 
133:   int value_count;
134:   <CURSOR>;
135: };
136: #endif
137: 

*** End of source buffer ***
Heard structured tree node asterisk left child
131: {
132:   character*description; 
133:   int value_count;
134:   structured_tree_node*left_child<CURSOR>;
135: };
136: #endif
137: 

*** End of source buffer ***
Heard new statement
132:   character*description; 
133:   int value_count;
134:   structured_tree_node*left_child;
135:   <CURSOR>;
136: };
137: #endif
138: 

*** End of source buffer ***
Heard structured tree node pointer right child
132:   character*description; 
133:   int value_count;
134:   structured_tree_node*left_child;
135:   structured_tree_node* right_child<CURSOR>;
136: };
137: #endif
138: 

*** End of source buffer ***
Heard jump out
133:   int value_count;
134:   structured_tree_node*left_child;
135:   structured_tree_node* right_child;
136: }<CURSOR>;
137: #endif
138: 

*** End of source buffer ***
Heard structured tree node comma star structured tree node
133:   int value_count;
134:   structured_tree_node*left_child;
135:   structured_tree_node* right_child;
136: }structured_tree_node, *structured_tree_node<CURSOR>;
137: #endif
138: 

*** End of source buffer ***
Heard after semi new paragraph
135:   structured_tree_node* right_child;
136: }structured_tree_node, *structured_tree_node;
137: 
138: <CURSOR>
139: #endif
140: 

*** End of source buffer ***
Heard declare union united states
135:   structured_tree_node* right_child;
136: }structured_tree_node, *structured_tree_node;
137: 
138: union united_states<CURSOR>
139: {
140: 
141: };
Heard new statement
138: union united_states
139: {
140: 
141:   <CURSOR>;
142: };
143: #endif
144: 

*** End of source buffer ***
Heard int number of states
138: union united_states
139: {
140: 
141:   int number_of_states<CURSOR>;
142: };
143: #endif
144: 

*** End of source buffer ***
Heard new statement
139: {
140: 
141:   int number_of_states;
142:   <CURSOR>;
143: };
144: #endif
145: 

*** End of source buffer ***
Heard float input literacy rate
139: {
140: 
141:   int number_of_states;
142:   float input_literacy_rate<CURSOR>;
143: };
144: #endif
145: 

*** End of source buffer ***
Heard new statement
140: 
141:   int number_of_states;
142:   float input_literacy_rate;
143:   <CURSOR>;
144: };
145: #endif
146: 

*** End of source buffer ***
Heard char star president
140: 
141:   int number_of_states;
142:   float input_literacy_rate;
143:   char *president<CURSOR>;
144: };
145: #endif
146: 

*** End of source buffer ***
Heard jump out sample type
141:   int number_of_states;
142:   float input_literacy_rate;
143:   char *president;
144: }sample_type<CURSOR>;
145: #endif
146: 

*** End of source buffer ***
Heard after semi new paragraph
143:   char *president;
144: }sample_type;
145: 
146: <CURSOR>
147: #endif
148: 

*** End of source buffer ***


*******************************************************************************
* Name        : C_Cpp_compilation
* Description : testing parsing of C/C++ symbols.
*******************************************************************************

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\used_to_test_C_Cpp_parsing.cpp ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'
WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\used_to_test_C_Cpp_parsing.cpp' doesn't exist.


Parsed symbols are: 
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  test_comment  test_procedure  testing_adding_above  testing_declaration  testing_other_pointers  testing_pointers  the_value  this  tiger  triangle  type  
Unresolved abbreviations are:
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']

*** End of compilation test ***



*******************************************************************************
* Name        : C_Cpp_editing
* Description : testing the various CSCs and LSAs for editing C/C++
*******************************************************************************

Compiling symbols for file '%VCODE_HOME%\Data\TestData\edit_this_buff.cpp'
WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
>>> Known symbols are: 
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
floor: ['floor']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
type: ['type']
_cached_symbols_as_one_string[a] is:
    __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    fabs  floor  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  type  

*********************
*** Executing edit test: insert an import statement in middle of a file ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard import some module
*** Start of source buffer ***
  1: import_some_module<CURSOR>

*** End of source buffer ***

*********************
*** DONE with edit test: insert an import statement in middle of a file ***
*********************


*********************
*** Executing edit test: create new class ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard define class dummy class body
*** Start of source buffer ***
  1: class Dummy
  2: {
  3: 
  4: <CURSOR>public:
  5: 
  6: private:
  7: 
Heard define method new method method body pass
  4: new method()
  5:   {
  6: 
  7:   pass<CURSOR>}public:
  8: 
  9: private:
 10: 

*********************
*** DONE with edit test: create new class ***
*********************


*********************
*** Executing edit test: change subclass of existing class ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard select a super
*** Start of source buffer ***
  1: select_a_super<CURSOR>

*** End of source buffer ***
Heard new super class
*** Start of source buffer ***
  1: select_a_supernew superclass <CURSOR>

*** End of source buffer ***

*********************
*** DONE with edit test: change subclass of existing class ***
*********************


*********************
*** Executing edit test: add_method_to_existing_class_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard add method some method method body pass
*** Start of source buffer ***
  1: some_methodpass<CURSOR>();

*** End of source buffer ***

*********************
*** DONE with edit test: add_method_to_existing_class_test ***
*********************


*********************
*** Executing edit test: add_argument_to_existing_method_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard add argument extra argument
*** Start of source buffer ***
  1: extra_argument<CURSOR>

*** End of source buffer ***

*********************
*** DONE with edit test: add_argument_to_existing_method_test ***
*********************


*********************
*** Executing edit test: change_existing_argument_of_a_method_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard select some argument
*** Start of source buffer ***
  1: select_some_argument<CURSOR>

*** End of source buffer ***
Heard new argument
*** Start of source buffer ***
  1: select_some_argumentnew argument<CURSOR>

*** End of source buffer ***

*********************
*** DONE with edit test: change_existing_argument_of_a_method_test ***
*********************


*********************
*** Executing edit test: insert_line_of_code_in_method_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: <CURSOR>;
  2: 

*** End of source buffer ***
Heard some array equals none
*** Start of source buffer ***
  1: some_array = none<CURSOR>;
  2: 

*** End of source buffer ***

*********************
*** DONE with edit test: insert_line_of_code_in_method_test ***
*********************


*********************
*** Executing edit test: change_arguments_in_method_call_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard select some array
*** Start of source buffer ***
  1: select_some_array<CURSOR>

*** End of source buffer ***
Heard none
*** Start of source buffer ***
  1: select_some_arraynone<CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>select_some_arraynone

*** End of source buffer ***
Heard after paren none
*** Start of source buffer ***
  1: none<CURSOR>select_some_arraynone

*** End of source buffer ***

*********************
*** DONE with edit test: change_arguments_in_method_call_test ***
*********************


*********************
*** Executing edit test: nested_if_then_else_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard new statement if some flag then
*** Start of source buffer ***
  1: if (some_flag)
  2:   {
  3: <CURSOR>
  4:     };
  5: 

*** End of source buffer ***
Heard do some more stuff with arguments some argument
*** Start of source buffer ***
  1: if (some_flag)
  2:   {
  3:     some_more_stuff(some_argument<CURSOR>)
  4:     };
  5: 

*** End of source buffer ***
Heard else do some stuff again with arguments some other argument
  5: 
  6: else
  7: {
  8:   some_stuff_again(some_other_argument<CURSOR>)
  9:   };
 10: 

*** End of source buffer ***
Heard bug below dot following one will not be inserted at the right level
  5: 
  6: else
  7: {
  8:   some_stuff_again(some_other_argumentbug_below.following1will!be_inserted_at_the_right_level<CURSOR>)
  9:   };
 10: 

*** End of source buffer ***
Heard else do some stuff without arguments
 10: 
 11: else
 12: {
 13:   some_stuff()<CURSOR>
 14:   };
 15: 

*** End of source buffer ***

*********************
*** DONE with edit test: nested_if_then_else_test ***
*********************


*********************
*** Executing edit test: add_else_clause_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard else clause
  2: 
  3: else
  4: {
  5: <CURSOR>
  6: }

*** End of source buffer ***

*********************
*** DONE with edit test: add_else_clause_test ***
*********************


*********************
*** Executing edit test: add_except_clause_test ***
*********************

WARNING: source file 'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\edit_this_buff.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard catch exceptions
*** Start of source buffer ***
  1: catch (exceptions<CURSOR>) {
  2: 
  3: }

*** End of source buffer ***

*********************
*** DONE with edit test: add_except_clause_test ***
*********************



*******************************************************************************
* Name        : C_Cpp_misc_statements
* Description : testing miscelleneous C/C++ statements.
*******************************************************************************

WARNING: source file 'blah.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard define class some variable class body
*** Start of source buffer ***
  1: class SomeVariable
  2: {
  3: 
  4: <CURSOR>public:
  5: 
  6: private:
  7: 
Heard define method some method add arguments
*** Start of source buffer ***
  1: class SomeVariable
  2: {
  3: 
  4: some_method(<CURSOR>)
  5:   {
  6: 
  7:   }public:
Heard collect arguments positional arguments comma
*** Start of source buffer ***
  1: class SomeVariable
  2: {
  3: 
  4: some_method(collect_arguments_positional_arguments, <CURSOR>)
  5:   {
  6: 
  7:   }public:
Heard collect keyword arguments keyword arguments
*** Start of source buffer ***
  1: class SomeVariable
  2: {
  3: 
  4: some_method(collect_arguments_positional_arguments, collect_keyword_arguments_keyword_arguments<CURSOR>)
  5:   {
  6: 
  7:   }public:
Heard class body
  4: some_method(collect_arguments_positional_arguments, collect_keyword_arguments_keyword_arguments)
  5:   {
  6: 
  7:   <CURSOR>}public:
  8: 
  9: private:
 10: 
Heard some array equals some other array sliced at one colon five new statement
  4: some_method(collect_arguments_positional_arguments, collect_keyword_arguments_keyword_arguments)
  5:   {
  6: 
  7:     some_array = some_other_array_sliced_at1: 5<CURSOR>;
  8:     }public:
  9: 
 10: private:
Heard some dictionary item with key zero jump out equals one
  5:   {
  6: 
  7:     some_array = some_other_array_sliced_at1: 5some_dictionary_item_with_key0;
  8:     } = 1<CURSOR>public:
  9: 
 10: private:
 11: 
Heard comment above
  5:   {
  6: 
  7:     some_array = some_other_array_sliced_at1: 5some_dictionary_item_with_key0;
  8:     } = 1comment_above<CURSOR>public:
  9: 
 10: private:
 11: 
Heard this is a commented out
  5:   {
  6: 
  7:     some_array = some_other_array_sliced_at1: 5some_dictionary_item_with_key0;
  8:     } = 1comment_abovethis_is_a_commented_out<CURSOR>public:
  9: 
 10: private:
 11: 


*******************************************************************************
* Name        : CmdInterp
* Description : self-test for CmdInterp.py
*******************************************************************************

EdSim instance EdSim(0) connected


>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
>>> Interpreting: ['for loop', 'loop body']
>>> Interpreting: ['for', 'loop', 'loop', 'body']

>>> Buffer is now:
  4: {
  5: for (; ; )
  6: {
  7: <CURSOR>   
  8: }
  9:    
 10: }

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
>>> Interpreting: ['for loop', 'loop body']

>>> Buffer is now:
  2: 
  3: 
  4: for :
  5:    <CURSOR>
  6: class AClass(ASuper):
  7:     """This is a dummy class"""
  8:     


*******************************************************************************
* Name        : EdSim
* Description : self-test for EdSim.py
*******************************************************************************

>>> Testing EdSim.py


>>> Opening a buffer
*** Start of source buffer ***
  1: <CURSOR>/* This is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)


>>> Moving to position 5
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)


>>> Testing breadcrumbs

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Popping 2 crumbs -> end up here:
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Dropping one here
*** Start of source buffer ***
  1: /* Th<CURSOR>is is a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Dropping one here
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)
*** Start of source buffer ***
  1: /* This is a small t<CURSOR>est buffer for C */
  2: 
  3: 
  4: void move(float x, y)

>>> Popping 1 crumb -> end up here...
*** Start of source buffer ***
  1: /* This is<CURSOR> a small test buffer for C */
  2: 
  3: 
  4: void move(float x, y)


>>> Testing code indentation. Inserting for loop.
  3: 
  4: for (ii=0; ii <= maxValue; ii++)
  5: {
  6: <CURSOR>
  7: }
  8: void move(float x, y)
  9: {


*******************************************************************************
* Name        : EdSim_alloc_cleanup
* Description : Testing EdSim allocation and cleanup.
*******************************************************************************


*** testing cleanup with single buffer EdSim

EdSim.__init__
SourceBuff.__init__: 
EdSim instance EdSim(0) connected
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.c


>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
>>> Interpreting: ['for loop', 'loop body']
>>> Interpreting: ['for', 'loop', 'loop', 'body']

>>> Buffer is now:
  4: {
  5: for (; ; )
  6: {
  7: <CURSOR>   
  8: }
  9:    
 10: }
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.py

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
>>> Interpreting: ['for loop', 'loop body']

>>> Buffer is now:
  2: 
  3: 
  4: for :
  5:    <CURSOR>
  6: class AClass(ASuper):
  7:     """This is a dummy class"""
  8:     
EdSim.remove_other_references
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.py
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.py
EdSim.__del__

*** testing cleanup with multi-buffer EdSim

EdSim.__init__
SourceBuff.__init__: 
EdSim instance EdSim(0) connected
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.c


>>> Testing command interpreter



>>> Interpreting in a C buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: <CURSOR>
  4: void move(float x, y)
  5: {
  6:   move_horiz(x);
>>> Interpreting: ['for loop', 'loop body']
>>> Interpreting: ['for', 'loop', 'loop', 'body']

>>> Buffer is now:
  4: {
  5: for (; ; )
  6: {
  7: <CURSOR>   
  8: }
  9:    
 10: }
SourceBuff.__init__: %VCODE_HOME%\Data\TestData\small_buff.py

>>> Interpreting in a Python buffer

>>> Current buffer is:

*** Start of source buffer ***
  1: # This is a small test buffer for Python
  2: 
  3: 
  4: <CURSOR>
  5: class AClass(ASuper):
  6:     """This is a dummy class"""
  7:     
>>> Interpreting: ['for loop', 'loop body']

>>> Buffer is now:
  2: 
  3: 
  4: for :
  5:    <CURSOR>
  6: class AClass(ASuper):
  7:     """This is a dummy class"""
  8:     
EdSim.remove_other_references
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.c
SourceBuff.remove_other_references: %VCODE_HOME%\Data\TestData\small_buff.py
SourceBuff.__del__: %VCODE_HOME%\Data\TestData\small_buff.py
EdSim.__del__


*******************************************************************************
* Name        : Object
* Description : self-test for Object.py
*******************************************************************************

Testing exceptions for get/set


Trying to get the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=Alain, x=Alain


Trying to set the value of attribute 'name', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.name=999, x=0


Trying to get the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught AttributeError exception: '[{'args': ("SmallObject instance has no attribute 'nonexistant'",)}]'


Trying to set the value of attribute 'nonexistant', $PY_DEBUG_OBJECT=None
   -> Caught NO AttributeError exception. obj.nonexistant=999, x=0

Testing inheritance of constructor arguments
   Employee1(name='Alain', salary='not enough') -> {'salary': 'not enough', 'name': 'Alain', 'citizenship': None}


Redefining default value of *citizenship*
   MyPerson(name='Alain') -> result={'salary': 'not enough', 'name': 'Alain', 'citizenship': None}

Overriding redefined default value of *citizenship*
   MyPerson(name='Alain', citizenship='US citizen') -> result={'marital_status': None, 'name': 'Alain', 'citizenship': 'US citizen'}

Enforcing 'Canadian eh?' as the value of *citizenship*
   Canadian(name='Alain') -> result={'name': 'Alain', 'citizenship': 'Canadian eh?'}

Trying to change enforced value 'Canadian eh?' of *citizenship*
   Canadian(citizenship='US') -> Test OK. EnforcedConstrArg was correctly raised: 'The value of argument citizenship in <class __builtin__.Canadian at 0x01E53D50>.__init__ is enforced at 'Canadian eh?', and cannot be changed.'

Person2.__init__ received init_file=C:/temp.txt
Class with private *init_file* attribute*
   Person2(init_file='C:/temp.txt') -> result={'name': None, 'citizenship': None}

Subclassing from non-standard class AnimatedCharacter.*
   AnimatedPerson(name='Alain', animation_file='C:/People/Alain.dat') -> result={'animation_file': 'C:/People/Alain.dat', 'frames_per_sec': 40, 'name': 'Alain', 'citizenship': None}


*******************************************************************************
* Name        : SymDict
* Description : self-test for SymDict.py
*******************************************************************************

EdSim instance EdSim(0) connected
*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\small_buff.c ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'


Parsed symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  
Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']

*** End of compilation test ***

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\large_buff.py ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'


Parsed symbols are: 
AttributeError: ['attribute error']
LargeNonObject: ['large non-object']
LargeObject: ['large object']
Object: ['object']
SmallNonObject: ['small non-object']
SmallObject: ['small object']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__bases__: ['bases']
__dict__: ['dict', 'dictionary']
__init__: ['init', 'initial', 'initialize']
__name__: ['name']
a_base: ['A. base', 'a base']
add_test: ['add test']
age: ['age']
an_attr_def: ['an attr deaf', 'an attr def', 'an attr default', 'an attr define', 'an attr defined', 'an attr definition', 'an attribute deaf', 'an attribute def', 'an attribute default', 'an attribute define', 'an attribute defined', 'an attribute definition']
an_attr_init: ['an attr init', 'an attr initial', 'an attr initialize', 'an attribute init', 'an attribute initial', 'an attribute initialize']
and: ['and']
attrs: ['attributes']
attrs_superclasses: ['attributes superclasses']
attrs_this_class: ['attributes this class']
autoTst: ['auto test', 'auto tst']
auto_test: ['auto test']
class: ['class']
code: ['code']
code_file: ['code file']
deep_construct: ['deep construct']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
else: ['else']
environ: ['environ', 'environment']
exc: ['exc', 'exception']
except: ['except']
exceptions: ['exceptions']
exclude_bases: ['exclude bases']
exec: ['exec', 'executable', 'execute']
execfile: ['execfile']
expandvars: ['expandvars']
for: ['for']
has_key: ['has key']
her_age: ['her age']
if: ['if']
import: ['import']
in: ['in']
index: ['index']
init_attrs: ['init attributes', 'initial attributes', 'initialize attributes']
items: ['items']
name: ['name']
not: ['not']
num_times: ['num times', 'number times']
obj: ['obj', 'object']
operation: ['operation']
os: ['O. S.', 'operating system', 'os']
pass: ['pass']
posixpath: ['posixpath']
profConstrLargeNonObj: ['prof constr large non-obj', 'prof constr large non-object', 'professional constr large non-obj', 'professional constr large non-object', 'profile constr large non-obj', 'profile constr large non-object', 'profiling constr large non-obj', 'profiling constr large non-object']
profConstrLargeObj: ['prof constr large obj', 'prof constr large object', 'professional constr large obj', 'professional constr large object', 'profile constr large obj', 'profile constr large object', 'profiling constr large obj', 'profiling constr large object']
profConstrSmallNonObj: ['prof constr small non-obj', 'prof constr small non-object', 'professional constr small non-obj', 'professional constr small non-object', 'profile constr small non-obj', 'profile constr small non-object', 'profiling constr small non-obj', 'profiling constr small non-object']
profConstrSmallObj: ['prof constr small obj', 'prof constr small object', 'professional constr small obj', 'professional constr small object', 'profile constr small obj', 'profile constr small object', 'profiling constr small obj', 'profiling constr small object']
profGetLargeNonObj: ['prof get large non-obj', 'prof get large non-object', 'professional get large non-obj', 'professional get large non-object', 'profile get large non-obj', 'profile get large non-object', 'profiling get large non-obj', 'profiling get large non-object']
profGetLargeObj: ['prof get large obj', 'prof get large object', 'professional get large obj', 'professional get large object', 'profile get large obj', 'profile get large object', 'profiling get large obj', 'profiling get large object']
profGetSmallNonObj: ['prof get small non-obj', 'prof get small non-object', 'professional get small non-obj', 'professional get small non-object', 'profile get small non-obj', 'profile get small non-object', 'profiling get small non-obj', 'profiling get small non-object']
profGetSmallObj: ['prof get small obj', 'prof get small object', 'professional get small obj', 'professional get small object', 'profile get small obj', 'profile get small object', 'profiling get small obj', 'profiling get small object']
profObject: ['prof object', 'professional object', 'profile object', 'profiling object']
profSetLargeNonObj: ['prof set large non-obj', 'prof set large non-object', 'professional set large non-obj', 'professional set large non-object', 'profile set large non-obj', 'profile set large non-object', 'profiling set large non-obj', 'profiling set large non-object']
profSetLargeObj: ['prof set large obj', 'prof set large object', 'professional set large obj', 'professional set large object', 'profile set large obj', 'profile set large object', 'profiling set large obj', 'profiling set large object']
profSetSmallNonObj: ['prof set small non-obj', 'prof set small non-object', 'professional set small non-obj', 'professional set small non-object', 'profile set small non-obj', 'profile set small non-object', 'profiling set small non-obj', 'profiling set small non-object']
profSetSmallObj: ['prof set small obj', 'prof set small object', 'professional set small obj', 'professional set small object', 'profile set small obj', 'profile set small object', 'profiling set small obj', 'profiling set small object']
prof_test: ['prof test', 'professional test', 'profile test', 'profiling test']
profile: ['profile']
range: ['range']
run: ['run']
self: ['self']
self_test: ['self test']
sep: ['sep', 'separator']
setattr: ['setattr']
stdout: ['S. T. D. out', 'standard out', 'stdout']
str: ['str', 'string']
sys: ['sys', 'system']
this_class: ['this class']
try: ['try']
try_attribute: ['try attribute']
write: ['write']
x: ['X.']
_cached_symbols_as_one_string[a] is:
    API_function  AttributeError  __abs__  a_base  abs  abspath  accept  accept2dyear  access  acos  acquire  add_test  age  an_attr_def  an_attr_init  and  asin  atan  atan2  atanh  attrs  attrs_superclasses  attrs_this_class  autoTst  auto_test  
_cached_symbols_as_one_string[b] is:
    __bases__  
_cached_symbols_as_one_string[c] is:
    ceil  class  code  code_file  cos  cosh  
_cached_symbols_as_one_string[d] is:
    __dict__  deep_construct  def  
_cached_symbols_as_one_string[e] is:
    else  environ  exc  except  exceptions  exclude_bases  exec  execfile  exp  expandvars  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  for  
_cached_symbols_as_one_string[h] is:
    has_key  her_age  horiz_pos  
_cached_symbols_as_one_string[i] is:
    __init__  if  import  in  index  init_attrs  items  
_cached_symbols_as_one_string[l] is:
    LargeNonObject  LargeObject  len  log  log10  
_cached_symbols_as_one_string[n] is:
    __name__  name  not  num_times  
_cached_symbols_as_one_string[o] is:
    Object  obj  operation  os  
_cached_symbols_as_one_string[p] is:
    pass  posixpath  profConstrLargeNonObj  profConstrLargeObj  profConstrSmallNonObj  profConstrSmallObj  profGetLargeNonObj  profGetLargeObj  profGetSmallNonObj  profGetSmallObj  profObject  profSetLargeNonObj  profSetLargeObj  profSetSmallNonObj  profSetSmallObj  prof_test  profile  
_cached_symbols_as_one_string[r] is:
    range  repr  run  
_cached_symbols_as_one_string[s] is:
    SmallNonObject  SmallObject  self  self_test  sep  setattr  sin  sinh  sqrt  stdout  str  sys  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_class  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  try  try_attribute  type  
_cached_symbols_as_one_string[w] is:
    write  
_cached_symbols_as_one_string[x] is:
    x  
Unresolved abbreviations are:
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'constr': appears in ['profConstrLargeNonObj', 'profConstrLargeObj', 'profConstrSmallNonObj', 'profConstrSmallObj']
'execfile': appears in ['execfile']
'expandvars': appears in ['expandvars']
'posixpath': appears in ['posixpath']
'setattr': appears in ['setattr']
'x': appears in ['x']

*** End of compilation test ***

*** Pseudo symbol match test***
   Source files are: ['%VCODE_HOME%\\Data\\TestData\\large_buff.py']
   Symbols are: ['set attribute', 'expand variables', 'execute file', 'profile Constructor Large Object', 'profile construct large object', 'auto test']


Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'
'set attribute' matches: [setattr, ]
'expand variables' matches: [expandvars, ]
'execute file' matches: [execfile, ]
'profile Constructor Large Object' matches: [profConstrLargeObj, ]
'profile construct large object' matches: [profConstrLargeObj, ]
'auto test' matches: [auto_test, autoTst, ]

*** End of Pseudo Symbol Match test ***


*** Accept symbol match test. source='%VCODE_HOME%\Data\TestData\small_buff.c' ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'
Parsed symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  AttributeError  __abs__  a_base  abs  abspath  accept  accept2dyear  access  acos  acquire  add_test  age  an_attr_def  an_attr_init  and  asin  atan  atan2  atanh  attrs  attrs_superclasses  attrs_this_class  autoTst  auto_test  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  for  
_cached_symbols_as_one_string[h] is:
    has_key  her_age  horiz_pos  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_class  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  try  try_attribute  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'f': appears in ['f_name2', 'f_name']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']


Accepting: 'this symbol is unresolved' -> 'this_sym_is_unres', 


After accepting those symbols, known symbols are:

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  AttributeError  __abs__  a_base  abs  abspath  accept  accept2dyear  access  acos  acquire  add_test  age  an_attr_def  an_attr_init  and  asin  atan  atan2  atanh  attrs  attrs_superclasses  attrs_this_class  autoTst  auto_test  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  for  
_cached_symbols_as_one_string[h] is:
    has_key  her_age  horiz_pos  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_class  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  try  try_attribute  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


Unresolved abbreviations are:
'abbrev': appears in ['this_sym_has_an_other_abbrev']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'f': appears in ['f_name2', 'f_name']
'x': appears in ['x']
'y': appears in ['y']

*** End of accept symbol match test ***



*******************************************************************************
* Name        : SymDict_storage
* Description : testing storage and version updating system for SymDict
*******************************************************************************

Exporting abbreviations from an empty SymDict, so
the following export file should be empty (except for
one blank line)
-----------------------------------------

-----------------------------------------

Compiling symbols for file '%VCODE_HOME%\Data\TestData\selected_py_sym.py'

saving modified SymDict
attempting to recover symbols and abbreviations with
bad persistent SymDict
finishing configuration of the recovered SymDict
Compiling symbols for file '%VCODE_HOME%\Data\TestData\selected_py_sym.py'
comparing modified persistent dictionary with the recovered one
no differences found

version number unchanged

comparing symdict.dict created from scratch with
the reference dictionary current_symdict.dict
no differences found

initializing SymDict from dictionary

initialization from dictionary was successful
Abbreviation file was unchanged, as expected
initializing fresh SymDict from dictionary

initialization from dictionary was successful
Fresh abbreviation file matches current one, as expected


*******************************************************************************
* Name        : SymbolResult
* Description : Testing SymbolResult.
*******************************************************************************



*******************************************************************************
* Name        : am_dictionaries
* Description : Testing AppMgr dictionary management.
*******************************************************************************

new instance of emacs 1

state {
application:  emacs
instance:  emacs(0)
known windows []
} state

new window 14
SelectWinGramDummy for buffer None, window 14
init
SymbolReformattingWinGramDummy for window = window 14
init
new window 20
SelectWinGramDummy for buffer None, window 20
init
SymbolReformattingWinGramDummy for window = window 20
init

state {
application:  emacs
instance:  emacs(0)
window 14
window 20
known windows [14, 20]
} state

new instance of emacs 2
with window 10
SelectWinGramDummy for buffer None, window 10
init
SymbolReformattingWinGramDummy for window = window 10
init

state {
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 10
known windows [10, 14, 20]
} state

new instance of Vim 3
delete window 20
SelectWinGramDummy for buffer None, window 20
deactivating
SymbolReformattingWinGramDummy for window = window 20
deactivating
SelectWinGramDummy for buffer None, window 20
del
SymbolReformattingWinGramDummy for window = window 20
del

state {
application:  Vim
instance:  Vim(0)
application:  emacs
instance:  emacs(0)
window 14
instance:  emacs(1)
window 10
known windows [10, 14]
} state

delete instance emacs(1)
SelectWinGramDummy for buffer None, window 10
deactivating
SymbolReformattingWinGramDummy for window = window 10
deactivating
SymbolReformattingWinGramDummy for window = window 10
del
SelectWinGramDummy for buffer None, window 10
del
new instance of emacs 4
with window 7
SelectWinGramDummy for buffer None, window 7
init
SymbolReformattingWinGramDummy for window = window 7
init

state {
application:  Vim
instance:  Vim(0)
application:  emacs
instance:  emacs(0)
window 14
instance:  emacs(2)
window 7
known windows [7, 14]
} state

delete instance emacs(0)
SelectWinGramDummy for buffer None, window 14
deactivating
SymbolReformattingWinGramDummy for window = window 14
deactivating
SymbolReformattingWinGramDummy for window = window 14
del
SelectWinGramDummy for buffer None, window 14
del

state {
application:  Vim
instance:  Vim(0)
application:  emacs
instance:  emacs(2)
window 7
known windows [7]
} state

delete instance Vim(0)
delete instance emacs(2)
SelectWinGramDummy for buffer None, window 7
deactivating
SymbolReformattingWinGramDummy for window = window 7
deactivating
SymbolReformattingWinGramDummy for window = window 7
del
SelectWinGramDummy for buffer None, window 7
del

state {
application:  Vim
application:  emacs
known windows []
} state

new instance of emacs 5
with window 94
SelectWinGramDummy for buffer None, window 94
init
SymbolReformattingWinGramDummy for window = window 94
init
new instance of emacs 6
with window 94
SelectWinGramDummy for buffer None, window 94
init
SymbolReformattingWinGramDummy for window = window 94
init

state {
application:  Vim
application:  emacs
instance:  emacs(3)
window 94
instance:  emacs(4)
window 94
known windows [94]
} state

SelectWinGramDummy for buffer None, window 94
deactivating
SymbolReformattingWinGramDummy for window = window 94
deactivating
SelectWinGramDummy for buffer None, window 94
del
SymbolReformattingWinGramDummy for window = window 94
del

state {
application:  Vim
application:  emacs
instance:  emacs(3)
instance:  emacs(4)
window 94
known windows [94]
} state


state {
application:  Vim
application:  emacs
instance:  emacs(4)
window 94
known windows [94]
} state

SelectWinGramDummy for buffer None, window 94
deactivating
SymbolReformattingWinGramDummy for window = window 94
deactivating
SymbolReformattingWinGramDummy for window = window 94
del
SelectWinGramDummy for buffer None, window 94
del

state {
application:  Vim
application:  emacs
known windows []
} state



*******************************************************************************
* Name        : automatic_abbreviations
* Description : testing automatic creation of abbreviations
*******************************************************************************



>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
'C:\\Documents and Settings\\desileta\\My Documents\\workspace\\VCode\\Data\\TestData'


>>> Testing console command: compile_symbols([r'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'acos' expands to ['A. cos', 'arc cos', 'arc cosine']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argc' expands to ['arg C.', 'argument count']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asctime' expands to ['ascii time', 'ask time']
'asin' expands to ['A. sine', 'arc sine']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atexit' expands to ['at exit']
'atof' expands to ['A. to F.']
'atoi' expands to ['A. to I.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'boolalpha' expands to ['Boole alpha', 'Boolean alpha']
'bsearch' expands to ['B. search']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'bufsiz' expands to ['buff size', 'buffer size']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'calloc' expands to ['C. Alloc', 'Cal lock']
'cbk' expands to ['callback']
'cerr' expands to ['C. error']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clearerr' expands to ['clear error']
'clock_t' expands to ['clock type']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'copyfmt' expands to ['copy F. M. T.', 'copy format']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctime' expands to ['C. time']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'ctype' expands to ['C. type']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'difftime' expands to ['diff time']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'div_t' expands to ['div type']
'dlg' expands to ['dialog']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'eback' expands to ['E. back']
'ecvt' expands to ['E. convert']
'egptr' expands to ['E. G. pointer', 'E. get pointer', 'egg pointer', 'end get pointer']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'epptr' expands to ['E. P. pointer', 'E. put pointer', 'end put pointer']
'erange' expands to ['E. range', 'error range']
'errno' expands to ['error no', 'error number']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fclose' expands to ['F. close', 'file close']
'fct' expands to ['function']
'fcvt' expands to ['F. convert']
'feof' expands to ['F. E. O. F.', 'F. end of file', 'file E. O. F.', 'file end of file']
'ferror' expands to ['F. error', 'file error']
'fflush' expands to ['F. flush', 'file flush']
'fg' expands to ['foreground']
'fgetc' expands to ['F. get C.', 'file get C.', 'file get character']
'fgetpos' expands to ['F. get pause', 'F. get position', 'file get pause', 'file get position']
'fgets' expands to ['F. get S.', 'F. get string', 'F. gets', 'file get S.', 'file get string', 'file gets']
'fifo' expands to ['fie foe', 'first in first out']
'filebuf' expands to ['file buff', 'file buffer']
'fmod' expands to ['F. mod', 'float mod', 'float modulo']
'fmt' expands to ['format']
'fmtflags' expands to ['F. M. T. flags', 'format flags']
'fp' expands to ['file pointer']
'fpos' expands to ['F. pause', 'F. position', 'file pause']
'fpos_t' expands to ['F. pause type', 'F. position type', 'file pause type']
'fprintf' expands to ['F. print F.', 'F. print format', 'file print F.', 'file print format']
'fputc' expands to ['F. put C.', 'file put C.', 'file put character']
'fputchar' expands to ['F. put char', 'file put char', 'file put character']
'fputs' expands to ['F. put S.', 'F. puts', 'file put S.', 'file put string']
'frac' expands to ['fraction']
'fread' expands to ['file read']
'freopen' expands to ['F. reopen', 'file reopen', 'free open']
'frexp' expands to ['F. R. E. X. P.', 'float remainder exponent', 'fur exp']
'fscanf' expands to ['F. scan F.', 'file scan F.', 'file scan format']
'fseek' expands to ['F. seek', 'file seek']
'fsetpos' expands to ['F. set pause', 'file set pause', 'file set position']
'ftell' expands to ['F. tell', 'file tell']
'func' expands to ['function']
'fwrite' expands to ['F. write', 'file write']
'gbump' expands to ['G. bump', 'get bump']
'gcount' expands to ['G. count', 'get count']
'gcvt' expands to ['G. C. V. T.', 'G. convert']
'gen' expands to ['general', 'generic']
'getc' expands to ['get C.']
'getchar' expands to ['get char', 'get character']
'getenv' expands to ['get E. N. V.', 'get env', 'get environment']
'getline' expands to ['get line']
'getloc' expands to ['get LOC', 'get locale']
'getw' expands to ['get W.']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'gmtime' expands to ['G. M. time', 'Greenwich mean time']
'goto' expands to ['go to']
'gptr' expands to ['G. pointer', 'get pointer']
'gr' expands to ['group']
'h' expands to ['H.']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'ifstream' expands to ['I. F. stream', 'if stream', 'input F. stream', 'input file stream']
'ign' expands to ['I. G. N.', 'ignore']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'inplace' expands to ['in place']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'iofbf' expands to ['I. O. F. B. F.', 'I. O. full buff', 'I. O. fully buffered']
'iostate' expands to ['I. O. state']
'ip' expands to ['I. P.']
'isalnum' expands to ['is Al numb', 'is alphanumeric']
'isalpha' expands to ['is alpha', 'is alphabetic']
'iscntrl' expands to ['is control']
'isdigit' expands to ['is digit']
'isdst' expands to ['is D. S. T.', 'is daylight savings time']
'isgraph' expands to ['is graph', 'is graphical']
'islower' expands to ['is lower', 'is lowercase']
'isprint' expands to ['is print', 'is printable']
'ispunct' expands to ['is punctuation', 'is punked']
'isspace' expands to ['is space']
'istringstream' expands to ['I. string stream', 'input string stream']
'isupper' expands to ['is upper', 'is uppercase']
'isxdigit' expands to ['is X. digit', 'is hex digit', 'is hexadecimal digit']
'itoa' expands to ['I. to A.']
'iword' expands to ['I. word', 'integer word']
'l' expands to ['L.', 'length']
'lconv' expands to ['L. conv', 'locale conventions']
'ldbl' expands to ['L. D. B. L. ', 'L. double', 'long double']
'ldexp' expands to ['L. D. E. X. P.', 'L. D. exp', 'L. double E. X. P.', 'L. double exp', 'load double E. X. P.', 'load double exp']
'ldiv' expands to ['L. div', 'L. divide', 'long div', 'long divide']
'ldiv_t' expands to ['L. div type', 'L. divide type', 'long div type', 'long divide type']
'len' expands to ['length']
'lexicographical' expands to ['lexicographic']
'lfind' expands to ['L. find', 'linear find']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'localeconv' expands to ['locale conv', 'locale conventions']
'localtime' expands to ['local time']
'login' expands to ['log in']
'longjmp' expands to ['long jump']
'lsearch' expands to ['L. search', 'linear search']
'ltoa' expands to ['L. to A.']
'mant' expands to ['mantissa']
'max' expands to ['maximum']
'mday' expands to ['M. day', 'month day']
'mem' expands to ['memory']
'memchr' expands to ['mem Chir', 'memory char', 'memory character']
'memcmp' expands to ['mem comp', 'mem compare', 'memory comp', 'memory compare']
'memmove' expands to ['mem move', 'memory move']
'min' expands to ['minimum']
'mk' expands to ['make']
'mktime' expands to ['M. K. time', 'make time']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'modf' expands to ['mod F.', 'mod float', 'modulo float']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'n' expands to ['N.']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'noboolalpha' expands to ['no Boole alpha', 'no Boolean alpha']
'noshowbase' expands to ['no show base']
'noshowpoint' expands to ['no show point']
'noshowpos' expands to ['no show pause', 'no show position']
'noskipws' expands to ['no skip W. S.', 'no skip white space']
'nounitbuf' expands to ['no unit buff', 'no unit buffer']
'nouppercase' expands to ['no uppercase']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'offsetof' expands to ['offset of']
'ofstream' expands to ['O. F. stream', 'O. file stream', 'output F. stream', 'output file stream']
'openmode' expands to ['open mode']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'ostringstream' expands to ['O. string stream', 'output string stream']
'p' expands to ['P.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'pbackfail' expands to ['P. back fail', 'put back fail']
'pbase' expands to ['P. base', 'put base']
'pbump' expands to ['P. bump', 'put bump']
'perm' expands to ['permission']
'perror' expands to ['P. error', 'put error']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'posn' expands to ['position']
'pptr' expands to ['P. pointer', 'put pointer']
'prev' expands to ['previous']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'ptrdiff' expands to ['pointer diff']
'ptrdiff_t' expands to ['pointer diff type']
'pty' expands to ['P. T. Y.']
'pubimbue' expands to ['pub imbue', 'public imbue']
'pubseekoff' expands to ['pub seek off', 'pub seek offset', 'public seek off', 'public seek offset']
'pubseekpos' expands to ['pub seek pause', 'pub seek position', 'public seek pause', 'public seek position']
'pubsetbuf' expands to ['pub set buff', 'pub set buffer', 'public set buff', 'public set buffer']
'pubsync' expands to ['pub sync', 'public sync']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'putback' expands to ['put back']
'putc' expands to ['put C.']
'putchar' expands to ['put char', 'put character']
'putenv' expands to ['put env', 'put environment']
'putw' expands to ['put W.']
'pword' expands to ['P. word', 'pointer word']
'py' expands to ['P. Y.', 'pie', 'python']
'quot' expands to ['quotient']
'rand' expands to ['random']
'rd' expands to ['read']
'rdbuf' expands to ['read buff', 'read buffer']
'rdstate' expands to ['read state']
'readsome' expands to ['read some']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'sbumpc' expands to ['S. bump C.', 'S. bump char', 'stream bump C.', 'stream bump char']
'schar' expands to ['S. char', 'S. character', 'signed char', 'signed character']
'scr' expands to ['screen']
'sec' expands to ['second']
'seekdir' expands to ['seek dir', 'seek directory']
'seekg' expands to ['seek G.', 'seek get']
'seekoff' expands to ['seek off', 'seek offset']
'seekp' expands to ['seek P.', 'seek put']
'seekpos' expands to ['seek pause', 'seek position']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'setbuf' expands to ['set buf', 'set buffer']
'setf' expands to ['set F.', 'set flag', 'set format']
'setg' expands to ['set G.', 'set get']
'setjmp' expands to ['set jump']
'setlocale' expands to ['set locale']
'setp' expands to ['set P.', 'set put']
'setstate' expands to ['set state']
'setvbuf' expands to ['set V. buff', 'set V. buffer']
'sgetc' expands to ['S. get C.', 'S. get char', 'stream get C.', 'stream get char']
'sgetn' expands to ['S. get N.', 'stream get N.']
'showbase' expands to ['show base']
'showmanyc' expands to ['show many C.', 'show many char']
'showpoint' expands to ['show point']
'showpos' expands to ['show pause', 'show position']
'shrt' expands to ['shirt', 'short']
'sig' expands to ['S. I. G.', 'sig', 'signal']
'sigabrt' expands to ['sig abort', 'signal abort']
'sigfpe' expands to ['sig F. P. E.', 'signal F. P. E.']
'sigill' expands to ['sig ill', 'sig illegal', 'signal ill', 'signal illegal']
'sigint' expands to ['sig int', 'sig interrupt', 'signal int', 'signal interrupt']
'sigsegv' expands to ['sig seg V.', 'sig segment V.', 'signal seg V.', 'signal segment violation']
'sigterm' expands to ['sig term', 'sig terminal', 'signal term', 'signal terminal']
'sin' expands to ['sine']
'sinh' expands to ['hyperbolic sine', 'sinch', 'sine H.']
'size_t' expands to ['size type']
'skipws' expands to ['skip W. S.', 'skip white space']
'smtp' expands to ['S. M. T. P.']
'snextc' expands to ['S. next C.', 'stream next C.', 'stream next char']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'sprintf' expands to ['S. print F.', 'sprint F.', 'string print F.', 'string print format']
'sputbackc' expands to ['S. put back C.', 'S. put back char', 'stream put back C.', 'stream put back char']
'sputc' expands to ['S. put C.', 'S. put char', 'stream put C.', 'stream put char']
'sputn' expands to ['S. put N.', 'stream put N.']
'sqrt' expands to ['sqirt', 'square root']
'srand' expands to ['S. rand', 'S. random', 'seed rand', 'seed random']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'sscanf' expands to ['S. scan F.', 'S. scan format', 'string scan F.', 'string scan format']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdarg' expands to ['S. T. D. arg', 'S. T. D. argument', 'standard arg', 'standard argument']
'stddef' expands to ['S. T. D. deaf', 'S. T. D. definitions', 'standard deaf', 'standard definitions']
'stderr' expands to ['S. T. D. error', 'standard error']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'stdio' expands to ['S. T. D. I. O.', 'standard I. O.', 'studio']
'stdlib' expands to ['S. T. D. lib', 'S. T. D. library', 'standard lib', 'standard library']
'stdout' expands to ['S. T. D. out', 'standard out']
'str' expands to ['string']
'strcat' expands to ['stir cat', 'stir concat', 'stir concatenate', 'string cat', 'string concat', 'string concatenate']
'strchr' expands to ['stir Chir', 'stir char', 'stir character', 'string Chir', 'string char', 'string character']
'strcmp' expands to ['stir comp', 'stir compare', 'string comp', 'string compare']
'strcoll' expands to ['stir call', 'stir collate', 'string call', 'string collate']
'strcpy' expands to ['stir C. P. Y.', 'stir copy', 'string C. P. Y.', 'string copy']
'strcspn' expands to ['stir C. span', 'stir complementary span', 'string complementary span']
'strerror' expands to ['stir error', 'string error']
'strftime' expands to ['stir F. time', 'stir format time', 'string F. time', 'string format time']
'stringbuf' expands to ['string buff', 'string buffer']
'stringstream' expands to ['string stream']
'strlen' expands to ['stir Len', 'stir length', 'string Len', 'string length']
'strncat' expands to ['stern cat', 'string N. cat', 'string N. concat', 'string N. concatenate']
'strncmp' expands to ['stern comp', 'string N. comp', 'string N. compare']
'strncpy' expands to ['stern copy', 'string N. copy']
'strpbrk' expands to ['string P. break', 'string pointer break', 'strip bark', 'strip break']
'strrchr' expands to ['stir Chir', 'stir R. char', 'stir R. character', 'stir reverse char', 'stir reverse character', 'string R. char', 'string R. character', 'string archer', 'string reverse char', 'string reverse character']
'strspn' expands to ['stir span', 'string span']
'strstr' expands to ['stir stir', 'stir string', 'string stir', 'string string']
'strtod' expands to ['stir Todd', 'stir to D.', 'stir to double', 'string to D.', 'string to double']
'strtok' expands to ['stir talk', 'stir toke', 'stir token', 'string toke', 'string token']
'strtol' expands to ['stir tall', 'stir to L.', 'stir to long', 'string to L.', 'string to long']
'strtoul' expands to ['stir to U. L.', 'stir to unsigned long', 'stir tool', 'string to U. L.', 'string to unsigned long', 'string tool']
'strxfrm' expands to ['str X. form', 'str transform', 'string X. form', 'string transform']
'sub' expands to ['sub routine']
'sungetc' expands to ['stream unget C.', 'stream unget char', 'stream unget character', 'sun get C.']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'tanh' expands to ['hyperbolic tan', 'hyperbolic tangent', 'tan H.', 'tan hyperbolic']
'tellg' expands to ['tell G.', 'tell get']
'tellp' expands to ['tell P.', 'tell put']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'time_t' expands to ['time type']
'tmp' expands to ['temporary']
'tmpfile' expands to ['temp file', 'temporary file']
'tmpnam' expands to ['temp nam', 'temp name', 'temporary nam', 'temporary name']
'tmpname' expands to ['temp name', 'temporary name']
'tok' expands to ['token']
'tolower' expands to ['to lower', 'to lowercase']
'toupper' expands to ['to upper', 'to uppercase']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uchar' expands to ['U. char', 'unsigned char', 'unsigned character']
'uflow' expands to ['U. flow']
'uid' expands to ['U. I. D.', 'user I. D.']
'ulong' expands to ['U. long', 'unsigned long']
'ultoa' expands to ['U. L. to A.', 'U. L. to ascii', 'unsigned long to A.', 'unsigned long to ascii']
'undef' expands to ['undefine', 'undefined']
'unget' expands to ['un get']
'ungetc' expands to ['un get C.', 'un get char', 'un get character']
'uniq' expands to ['unique']
'unitbuf' expands to ['unit buff', 'unit buffer']
'unsetf' expands to ['un set F.', 'un set flag', 'un set format']
'url' expands to ['U. R. L.']
'ushrt' expands to ['U. short', 'unsigned short']
'uu' expands to ['U. U.']
'va' expands to ['V. A.', 'var arg']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'vfprintf' expands to ['V. F. print F.', 'V. file print F.', 'V. file print format', 'var F. print F.', 'var file print F.', 'var file print format']
'vprintf' expands to ['V. print F.', 'V. print format', 'var print F.', 'var print format']
'vsprintf' expands to ['V. S. print F.', 'V. string print F.', 'V. string print format', 'var S. print F.', 'var string print F.', 'var string print format']
'wday' expands to ['W. day', 'weekday']
'win' expands to ['window']
'xalloc' expands to ['X. Alloc', 'X. allocate', 'extensible Alloc', 'extensible allocate']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']
'xsgetn' expands to ['X. S. get N.', 'X. stream get N.']
'xsputn' expands to ['X. S. put N.', 'X. stream put N.']
'yday' expands to ['Y. day', 'year day']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'abspath': appears in ['abspath']
'atanh': appears in ['atanh']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say(['this', 'symbol', 'is', 'unresolved', ',\\comma'], user_input='1\n')
Heard this symbol is unresolved comma
*** Start of source buffer ***
  1: this_sym_is_unres, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'acos' expands to ['A. cos', 'arc cos', 'arc cosine']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argc' expands to ['arg C.', 'argument count']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asctime' expands to ['ascii time', 'ask time']
'asin' expands to ['A. sine', 'arc sine']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atexit' expands to ['at exit']
'atof' expands to ['A. to F.']
'atoi' expands to ['A. to I.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'boolalpha' expands to ['Boole alpha', 'Boolean alpha']
'bsearch' expands to ['B. search']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'bufsiz' expands to ['buff size', 'buffer size']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'calloc' expands to ['C. Alloc', 'Cal lock']
'cbk' expands to ['callback']
'cerr' expands to ['C. error']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clearerr' expands to ['clear error']
'clock_t' expands to ['clock type']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'copyfmt' expands to ['copy F. M. T.', 'copy format']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctime' expands to ['C. time']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'ctype' expands to ['C. type']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'difftime' expands to ['diff time']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'div_t' expands to ['div type']
'dlg' expands to ['dialog']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'eback' expands to ['E. back']
'ecvt' expands to ['E. convert']
'egptr' expands to ['E. G. pointer', 'E. get pointer', 'egg pointer', 'end get pointer']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'epptr' expands to ['E. P. pointer', 'E. put pointer', 'end put pointer']
'erange' expands to ['E. range', 'error range']
'errno' expands to ['error no', 'error number']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fclose' expands to ['F. close', 'file close']
'fct' expands to ['function']
'fcvt' expands to ['F. convert']
'feof' expands to ['F. E. O. F.', 'F. end of file', 'file E. O. F.', 'file end of file']
'ferror' expands to ['F. error', 'file error']
'fflush' expands to ['F. flush', 'file flush']
'fg' expands to ['foreground']
'fgetc' expands to ['F. get C.', 'file get C.', 'file get character']
'fgetpos' expands to ['F. get pause', 'F. get position', 'file get pause', 'file get position']
'fgets' expands to ['F. get S.', 'F. get string', 'F. gets', 'file get S.', 'file get string', 'file gets']
'fifo' expands to ['fie foe', 'first in first out']
'filebuf' expands to ['file buff', 'file buffer']
'fmod' expands to ['F. mod', 'float mod', 'float modulo']
'fmt' expands to ['format']
'fmtflags' expands to ['F. M. T. flags', 'format flags']
'fp' expands to ['file pointer']
'fpos' expands to ['F. pause', 'F. position', 'file pause']
'fpos_t' expands to ['F. pause type', 'F. position type', 'file pause type']
'fprintf' expands to ['F. print F.', 'F. print format', 'file print F.', 'file print format']
'fputc' expands to ['F. put C.', 'file put C.', 'file put character']
'fputchar' expands to ['F. put char', 'file put char', 'file put character']
'fputs' expands to ['F. put S.', 'F. puts', 'file put S.', 'file put string']
'frac' expands to ['fraction']
'fread' expands to ['file read']
'freopen' expands to ['F. reopen', 'file reopen', 'free open']
'frexp' expands to ['F. R. E. X. P.', 'float remainder exponent', 'fur exp']
'fscanf' expands to ['F. scan F.', 'file scan F.', 'file scan format']
'fseek' expands to ['F. seek', 'file seek']
'fsetpos' expands to ['F. set pause', 'file set pause', 'file set position']
'ftell' expands to ['F. tell', 'file tell']
'func' expands to ['function']
'fwrite' expands to ['F. write', 'file write']
'gbump' expands to ['G. bump', 'get bump']
'gcount' expands to ['G. count', 'get count']
'gcvt' expands to ['G. C. V. T.', 'G. convert']
'gen' expands to ['general', 'generic']
'getc' expands to ['get C.']
'getchar' expands to ['get char', 'get character']
'getenv' expands to ['get E. N. V.', 'get env', 'get environment']
'getline' expands to ['get line']
'getloc' expands to ['get LOC', 'get locale']
'getw' expands to ['get W.']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'gmtime' expands to ['G. M. time', 'Greenwich mean time']
'goto' expands to ['go to']
'gptr' expands to ['G. pointer', 'get pointer']
'gr' expands to ['group']
'h' expands to ['H.']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'ifstream' expands to ['I. F. stream', 'if stream', 'input F. stream', 'input file stream']
'ign' expands to ['I. G. N.', 'ignore']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'inplace' expands to ['in place']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'iofbf' expands to ['I. O. F. B. F.', 'I. O. full buff', 'I. O. fully buffered']
'iostate' expands to ['I. O. state']
'ip' expands to ['I. P.']
'isalnum' expands to ['is Al numb', 'is alphanumeric']
'isalpha' expands to ['is alpha', 'is alphabetic']
'iscntrl' expands to ['is control']
'isdigit' expands to ['is digit']
'isdst' expands to ['is D. S. T.', 'is daylight savings time']
'isgraph' expands to ['is graph', 'is graphical']
'islower' expands to ['is lower', 'is lowercase']
'isprint' expands to ['is print', 'is printable']
'ispunct' expands to ['is punctuation', 'is punked']
'isspace' expands to ['is space']
'istringstream' expands to ['I. string stream', 'input string stream']
'isupper' expands to ['is upper', 'is uppercase']
'isxdigit' expands to ['is X. digit', 'is hex digit', 'is hexadecimal digit']
'itoa' expands to ['I. to A.']
'iword' expands to ['I. word', 'integer word']
'l' expands to ['L.', 'length']
'lconv' expands to ['L. conv', 'locale conventions']
'ldbl' expands to ['L. D. B. L. ', 'L. double', 'long double']
'ldexp' expands to ['L. D. E. X. P.', 'L. D. exp', 'L. double E. X. P.', 'L. double exp', 'load double E. X. P.', 'load double exp']
'ldiv' expands to ['L. div', 'L. divide', 'long div', 'long divide']
'ldiv_t' expands to ['L. div type', 'L. divide type', 'long div type', 'long divide type']
'len' expands to ['length']
'lexicographical' expands to ['lexicographic']
'lfind' expands to ['L. find', 'linear find']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'localeconv' expands to ['locale conv', 'locale conventions']
'localtime' expands to ['local time']
'login' expands to ['log in']
'longjmp' expands to ['long jump']
'lsearch' expands to ['L. search', 'linear search']
'ltoa' expands to ['L. to A.']
'mant' expands to ['mantissa']
'max' expands to ['maximum']
'mday' expands to ['M. day', 'month day']
'mem' expands to ['memory']
'memchr' expands to ['mem Chir', 'memory char', 'memory character']
'memcmp' expands to ['mem comp', 'mem compare', 'memory comp', 'memory compare']
'memmove' expands to ['mem move', 'memory move']
'min' expands to ['minimum']
'mk' expands to ['make']
'mktime' expands to ['M. K. time', 'make time']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'modf' expands to ['mod F.', 'mod float', 'modulo float']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'n' expands to ['N.']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'noboolalpha' expands to ['no Boole alpha', 'no Boolean alpha']
'noshowbase' expands to ['no show base']
'noshowpoint' expands to ['no show point']
'noshowpos' expands to ['no show pause', 'no show position']
'noskipws' expands to ['no skip W. S.', 'no skip white space']
'nounitbuf' expands to ['no unit buff', 'no unit buffer']
'nouppercase' expands to ['no uppercase']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'offsetof' expands to ['offset of']
'ofstream' expands to ['O. F. stream', 'O. file stream', 'output F. stream', 'output file stream']
'openmode' expands to ['open mode']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'ostringstream' expands to ['O. string stream', 'output string stream']
'p' expands to ['P.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'pbackfail' expands to ['P. back fail', 'put back fail']
'pbase' expands to ['P. base', 'put base']
'pbump' expands to ['P. bump', 'put bump']
'perm' expands to ['permission']
'perror' expands to ['P. error', 'put error']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'posn' expands to ['position']
'pptr' expands to ['P. pointer', 'put pointer']
'prev' expands to ['previous']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'ptrdiff' expands to ['pointer diff']
'ptrdiff_t' expands to ['pointer diff type']
'pty' expands to ['P. T. Y.']
'pubimbue' expands to ['pub imbue', 'public imbue']
'pubseekoff' expands to ['pub seek off', 'pub seek offset', 'public seek off', 'public seek offset']
'pubseekpos' expands to ['pub seek pause', 'pub seek position', 'public seek pause', 'public seek position']
'pubsetbuf' expands to ['pub set buff', 'pub set buffer', 'public set buff', 'public set buffer']
'pubsync' expands to ['pub sync', 'public sync']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'putback' expands to ['put back']
'putc' expands to ['put C.']
'putchar' expands to ['put char', 'put character']
'putenv' expands to ['put env', 'put environment']
'putw' expands to ['put W.']
'pword' expands to ['P. word', 'pointer word']
'py' expands to ['P. Y.', 'pie', 'python']
'quot' expands to ['quotient']
'rand' expands to ['random']
'rd' expands to ['read']
'rdbuf' expands to ['read buff', 'read buffer']
'rdstate' expands to ['read state']
'readsome' expands to ['read some']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'sbumpc' expands to ['S. bump C.', 'S. bump char', 'stream bump C.', 'stream bump char']
'schar' expands to ['S. char', 'S. character', 'signed char', 'signed character']
'scr' expands to ['screen']
'sec' expands to ['second']
'seekdir' expands to ['seek dir', 'seek directory']
'seekg' expands to ['seek G.', 'seek get']
'seekoff' expands to ['seek off', 'seek offset']
'seekp' expands to ['seek P.', 'seek put']
'seekpos' expands to ['seek pause', 'seek position']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'setbuf' expands to ['set buf', 'set buffer']
'setf' expands to ['set F.', 'set flag', 'set format']
'setg' expands to ['set G.', 'set get']
'setjmp' expands to ['set jump']
'setlocale' expands to ['set locale']
'setp' expands to ['set P.', 'set put']
'setstate' expands to ['set state']
'setvbuf' expands to ['set V. buff', 'set V. buffer']
'sgetc' expands to ['S. get C.', 'S. get char', 'stream get C.', 'stream get char']
'sgetn' expands to ['S. get N.', 'stream get N.']
'showbase' expands to ['show base']
'showmanyc' expands to ['show many C.', 'show many char']
'showpoint' expands to ['show point']
'showpos' expands to ['show pause', 'show position']
'shrt' expands to ['shirt', 'short']
'sig' expands to ['S. I. G.', 'sig', 'signal']
'sigabrt' expands to ['sig abort', 'signal abort']
'sigfpe' expands to ['sig F. P. E.', 'signal F. P. E.']
'sigill' expands to ['sig ill', 'sig illegal', 'signal ill', 'signal illegal']
'sigint' expands to ['sig int', 'sig interrupt', 'signal int', 'signal interrupt']
'sigsegv' expands to ['sig seg V.', 'sig segment V.', 'signal seg V.', 'signal segment violation']
'sigterm' expands to ['sig term', 'sig terminal', 'signal term', 'signal terminal']
'sin' expands to ['sine']
'sinh' expands to ['hyperbolic sine', 'sinch', 'sine H.']
'size_t' expands to ['size type']
'skipws' expands to ['skip W. S.', 'skip white space']
'smtp' expands to ['S. M. T. P.']
'snextc' expands to ['S. next C.', 'stream next C.', 'stream next char']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'sprintf' expands to ['S. print F.', 'sprint F.', 'string print F.', 'string print format']
'sputbackc' expands to ['S. put back C.', 'S. put back char', 'stream put back C.', 'stream put back char']
'sputc' expands to ['S. put C.', 'S. put char', 'stream put C.', 'stream put char']
'sputn' expands to ['S. put N.', 'stream put N.']
'sqrt' expands to ['sqirt', 'square root']
'srand' expands to ['S. rand', 'S. random', 'seed rand', 'seed random']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'sscanf' expands to ['S. scan F.', 'S. scan format', 'string scan F.', 'string scan format']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdarg' expands to ['S. T. D. arg', 'S. T. D. argument', 'standard arg', 'standard argument']
'stddef' expands to ['S. T. D. deaf', 'S. T. D. definitions', 'standard deaf', 'standard definitions']
'stderr' expands to ['S. T. D. error', 'standard error']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'stdio' expands to ['S. T. D. I. O.', 'standard I. O.', 'studio']
'stdlib' expands to ['S. T. D. lib', 'S. T. D. library', 'standard lib', 'standard library']
'stdout' expands to ['S. T. D. out', 'standard out']
'str' expands to ['string']
'strcat' expands to ['stir cat', 'stir concat', 'stir concatenate', 'string cat', 'string concat', 'string concatenate']
'strchr' expands to ['stir Chir', 'stir char', 'stir character', 'string Chir', 'string char', 'string character']
'strcmp' expands to ['stir comp', 'stir compare', 'string comp', 'string compare']
'strcoll' expands to ['stir call', 'stir collate', 'string call', 'string collate']
'strcpy' expands to ['stir C. P. Y.', 'stir copy', 'string C. P. Y.', 'string copy']
'strcspn' expands to ['stir C. span', 'stir complementary span', 'string complementary span']
'strerror' expands to ['stir error', 'string error']
'strftime' expands to ['stir F. time', 'stir format time', 'string F. time', 'string format time']
'stringbuf' expands to ['string buff', 'string buffer']
'stringstream' expands to ['string stream']
'strlen' expands to ['stir Len', 'stir length', 'string Len', 'string length']
'strncat' expands to ['stern cat', 'string N. cat', 'string N. concat', 'string N. concatenate']
'strncmp' expands to ['stern comp', 'string N. comp', 'string N. compare']
'strncpy' expands to ['stern copy', 'string N. copy']
'strpbrk' expands to ['string P. break', 'string pointer break', 'strip bark', 'strip break']
'strrchr' expands to ['stir Chir', 'stir R. char', 'stir R. character', 'stir reverse char', 'stir reverse character', 'string R. char', 'string R. character', 'string archer', 'string reverse char', 'string reverse character']
'strspn' expands to ['stir span', 'string span']
'strstr' expands to ['stir stir', 'stir string', 'string stir', 'string string']
'strtod' expands to ['stir Todd', 'stir to D.', 'stir to double', 'string to D.', 'string to double']
'strtok' expands to ['stir talk', 'stir toke', 'stir token', 'string toke', 'string token']
'strtol' expands to ['stir tall', 'stir to L.', 'stir to long', 'string to L.', 'string to long']
'strtoul' expands to ['stir to U. L.', 'stir to unsigned long', 'stir tool', 'string to U. L.', 'string to unsigned long', 'string tool']
'strxfrm' expands to ['str X. form', 'str transform', 'string X. form', 'string transform']
'sub' expands to ['sub routine']
'sungetc' expands to ['stream unget C.', 'stream unget char', 'stream unget character', 'sun get C.']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'tanh' expands to ['hyperbolic tan', 'hyperbolic tangent', 'tan H.', 'tan hyperbolic']
'tellg' expands to ['tell G.', 'tell get']
'tellp' expands to ['tell P.', 'tell put']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'time_t' expands to ['time type']
'tmp' expands to ['temporary']
'tmpfile' expands to ['temp file', 'temporary file']
'tmpnam' expands to ['temp nam', 'temp name', 'temporary nam', 'temporary name']
'tmpname' expands to ['temp name', 'temporary name']
'tok' expands to ['token']
'tolower' expands to ['to lower', 'to lowercase']
'toupper' expands to ['to upper', 'to uppercase']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uchar' expands to ['U. char', 'unsigned char', 'unsigned character']
'uflow' expands to ['U. flow']
'uid' expands to ['U. I. D.', 'user I. D.']
'ulong' expands to ['U. long', 'unsigned long']
'ultoa' expands to ['U. L. to A.', 'U. L. to ascii', 'unsigned long to A.', 'unsigned long to ascii']
'undef' expands to ['undefine', 'undefined']
'unget' expands to ['un get']
'ungetc' expands to ['un get C.', 'un get char', 'un get character']
'uniq' expands to ['unique']
'unitbuf' expands to ['unit buff', 'unit buffer']
'unsetf' expands to ['un set F.', 'un set flag', 'un set format']
'url' expands to ['U. R. L.']
'ushrt' expands to ['U. short', 'unsigned short']
'uu' expands to ['U. U.']
'va' expands to ['V. A.', 'var arg']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'vfprintf' expands to ['V. F. print F.', 'V. file print F.', 'V. file print format', 'var F. print F.', 'var file print F.', 'var file print format']
'vprintf' expands to ['V. print F.', 'V. print format', 'var print F.', 'var print format']
'vsprintf' expands to ['V. S. print F.', 'V. string print F.', 'V. string print format', 'var S. print F.', 'var string print F.', 'var string print format']
'wday' expands to ['W. day', 'weekday']
'win' expands to ['window']
'xalloc' expands to ['X. Alloc', 'X. allocate', 'extensible Alloc', 'extensible allocate']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']
'xsgetn' expands to ['X. S. get N.', 'X. stream get N.']
'xsputn' expands to ['X. S. put N.', 'X. stream put N.']
'yday' expands to ['Y. day', 'year day']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'abspath': appears in ['abspath']
'atanh': appears in ['atanh']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'unres': appears in ['this_sym_is_unres', 'this_sym_is_unres_too']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Testing console command: say(['this_sym_is_unres_too\\this symbol is unresolved too', ',\\comma'], user_input='None')
Heard this symbol is unresolved too comma
*** Start of source buffer ***
  1: this_sym_is_unres, this_sym_is_unres_too, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'acos' expands to ['A. cos', 'arc cos', 'arc cosine']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argc' expands to ['arg C.', 'argument count']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asctime' expands to ['ascii time', 'ask time']
'asin' expands to ['A. sine', 'arc sine']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atexit' expands to ['at exit']
'atof' expands to ['A. to F.']
'atoi' expands to ['A. to I.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'boolalpha' expands to ['Boole alpha', 'Boolean alpha']
'bsearch' expands to ['B. search']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'bufsiz' expands to ['buff size', 'buffer size']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'calloc' expands to ['C. Alloc', 'Cal lock']
'cbk' expands to ['callback']
'cerr' expands to ['C. error']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clearerr' expands to ['clear error']
'clock_t' expands to ['clock type']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'copyfmt' expands to ['copy F. M. T.', 'copy format']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctime' expands to ['C. time']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'ctype' expands to ['C. type']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'difftime' expands to ['diff time']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'div_t' expands to ['div type']
'dlg' expands to ['dialog']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'eback' expands to ['E. back']
'ecvt' expands to ['E. convert']
'egptr' expands to ['E. G. pointer', 'E. get pointer', 'egg pointer', 'end get pointer']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'epptr' expands to ['E. P. pointer', 'E. put pointer', 'end put pointer']
'erange' expands to ['E. range', 'error range']
'errno' expands to ['error no', 'error number']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fclose' expands to ['F. close', 'file close']
'fct' expands to ['function']
'fcvt' expands to ['F. convert']
'feof' expands to ['F. E. O. F.', 'F. end of file', 'file E. O. F.', 'file end of file']
'ferror' expands to ['F. error', 'file error']
'fflush' expands to ['F. flush', 'file flush']
'fg' expands to ['foreground']
'fgetc' expands to ['F. get C.', 'file get C.', 'file get character']
'fgetpos' expands to ['F. get pause', 'F. get position', 'file get pause', 'file get position']
'fgets' expands to ['F. get S.', 'F. get string', 'F. gets', 'file get S.', 'file get string', 'file gets']
'fifo' expands to ['fie foe', 'first in first out']
'filebuf' expands to ['file buff', 'file buffer']
'fmod' expands to ['F. mod', 'float mod', 'float modulo']
'fmt' expands to ['format']
'fmtflags' expands to ['F. M. T. flags', 'format flags']
'fp' expands to ['file pointer']
'fpos' expands to ['F. pause', 'F. position', 'file pause']
'fpos_t' expands to ['F. pause type', 'F. position type', 'file pause type']
'fprintf' expands to ['F. print F.', 'F. print format', 'file print F.', 'file print format']
'fputc' expands to ['F. put C.', 'file put C.', 'file put character']
'fputchar' expands to ['F. put char', 'file put char', 'file put character']
'fputs' expands to ['F. put S.', 'F. puts', 'file put S.', 'file put string']
'frac' expands to ['fraction']
'fread' expands to ['file read']
'freopen' expands to ['F. reopen', 'file reopen', 'free open']
'frexp' expands to ['F. R. E. X. P.', 'float remainder exponent', 'fur exp']
'fscanf' expands to ['F. scan F.', 'file scan F.', 'file scan format']
'fseek' expands to ['F. seek', 'file seek']
'fsetpos' expands to ['F. set pause', 'file set pause', 'file set position']
'ftell' expands to ['F. tell', 'file tell']
'func' expands to ['function']
'fwrite' expands to ['F. write', 'file write']
'gbump' expands to ['G. bump', 'get bump']
'gcount' expands to ['G. count', 'get count']
'gcvt' expands to ['G. C. V. T.', 'G. convert']
'gen' expands to ['general', 'generic']
'getc' expands to ['get C.']
'getchar' expands to ['get char', 'get character']
'getenv' expands to ['get E. N. V.', 'get env', 'get environment']
'getline' expands to ['get line']
'getloc' expands to ['get LOC', 'get locale']
'getw' expands to ['get W.']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'gmtime' expands to ['G. M. time', 'Greenwich mean time']
'goto' expands to ['go to']
'gptr' expands to ['G. pointer', 'get pointer']
'gr' expands to ['group']
'h' expands to ['H.']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'ifstream' expands to ['I. F. stream', 'if stream', 'input F. stream', 'input file stream']
'ign' expands to ['I. G. N.', 'ignore']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'inplace' expands to ['in place']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'iofbf' expands to ['I. O. F. B. F.', 'I. O. full buff', 'I. O. fully buffered']
'iostate' expands to ['I. O. state']
'ip' expands to ['I. P.']
'isalnum' expands to ['is Al numb', 'is alphanumeric']
'isalpha' expands to ['is alpha', 'is alphabetic']
'iscntrl' expands to ['is control']
'isdigit' expands to ['is digit']
'isdst' expands to ['is D. S. T.', 'is daylight savings time']
'isgraph' expands to ['is graph', 'is graphical']
'islower' expands to ['is lower', 'is lowercase']
'isprint' expands to ['is print', 'is printable']
'ispunct' expands to ['is punctuation', 'is punked']
'isspace' expands to ['is space']
'istringstream' expands to ['I. string stream', 'input string stream']
'isupper' expands to ['is upper', 'is uppercase']
'isxdigit' expands to ['is X. digit', 'is hex digit', 'is hexadecimal digit']
'itoa' expands to ['I. to A.']
'iword' expands to ['I. word', 'integer word']
'l' expands to ['L.', 'length']
'lconv' expands to ['L. conv', 'locale conventions']
'ldbl' expands to ['L. D. B. L. ', 'L. double', 'long double']
'ldexp' expands to ['L. D. E. X. P.', 'L. D. exp', 'L. double E. X. P.', 'L. double exp', 'load double E. X. P.', 'load double exp']
'ldiv' expands to ['L. div', 'L. divide', 'long div', 'long divide']
'ldiv_t' expands to ['L. div type', 'L. divide type', 'long div type', 'long divide type']
'len' expands to ['length']
'lexicographical' expands to ['lexicographic']
'lfind' expands to ['L. find', 'linear find']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'localeconv' expands to ['locale conv', 'locale conventions']
'localtime' expands to ['local time']
'login' expands to ['log in']
'longjmp' expands to ['long jump']
'lsearch' expands to ['L. search', 'linear search']
'ltoa' expands to ['L. to A.']
'mant' expands to ['mantissa']
'max' expands to ['maximum']
'mday' expands to ['M. day', 'month day']
'mem' expands to ['memory']
'memchr' expands to ['mem Chir', 'memory char', 'memory character']
'memcmp' expands to ['mem comp', 'mem compare', 'memory comp', 'memory compare']
'memmove' expands to ['mem move', 'memory move']
'min' expands to ['minimum']
'mk' expands to ['make']
'mktime' expands to ['M. K. time', 'make time']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'modf' expands to ['mod F.', 'mod float', 'modulo float']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'n' expands to ['N.']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'noboolalpha' expands to ['no Boole alpha', 'no Boolean alpha']
'noshowbase' expands to ['no show base']
'noshowpoint' expands to ['no show point']
'noshowpos' expands to ['no show pause', 'no show position']
'noskipws' expands to ['no skip W. S.', 'no skip white space']
'nounitbuf' expands to ['no unit buff', 'no unit buffer']
'nouppercase' expands to ['no uppercase']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'offsetof' expands to ['offset of']
'ofstream' expands to ['O. F. stream', 'O. file stream', 'output F. stream', 'output file stream']
'openmode' expands to ['open mode']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'ostringstream' expands to ['O. string stream', 'output string stream']
'p' expands to ['P.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'pbackfail' expands to ['P. back fail', 'put back fail']
'pbase' expands to ['P. base', 'put base']
'pbump' expands to ['P. bump', 'put bump']
'perm' expands to ['permission']
'perror' expands to ['P. error', 'put error']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'posn' expands to ['position']
'pptr' expands to ['P. pointer', 'put pointer']
'prev' expands to ['previous']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'ptrdiff' expands to ['pointer diff']
'ptrdiff_t' expands to ['pointer diff type']
'pty' expands to ['P. T. Y.']
'pubimbue' expands to ['pub imbue', 'public imbue']
'pubseekoff' expands to ['pub seek off', 'pub seek offset', 'public seek off', 'public seek offset']
'pubseekpos' expands to ['pub seek pause', 'pub seek position', 'public seek pause', 'public seek position']
'pubsetbuf' expands to ['pub set buff', 'pub set buffer', 'public set buff', 'public set buffer']
'pubsync' expands to ['pub sync', 'public sync']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'putback' expands to ['put back']
'putc' expands to ['put C.']
'putchar' expands to ['put char', 'put character']
'putenv' expands to ['put env', 'put environment']
'putw' expands to ['put W.']
'pword' expands to ['P. word', 'pointer word']
'py' expands to ['P. Y.', 'pie', 'python']
'quot' expands to ['quotient']
'rand' expands to ['random']
'rd' expands to ['read']
'rdbuf' expands to ['read buff', 'read buffer']
'rdstate' expands to ['read state']
'readsome' expands to ['read some']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'sbumpc' expands to ['S. bump C.', 'S. bump char', 'stream bump C.', 'stream bump char']
'schar' expands to ['S. char', 'S. character', 'signed char', 'signed character']
'scr' expands to ['screen']
'sec' expands to ['second']
'seekdir' expands to ['seek dir', 'seek directory']
'seekg' expands to ['seek G.', 'seek get']
'seekoff' expands to ['seek off', 'seek offset']
'seekp' expands to ['seek P.', 'seek put']
'seekpos' expands to ['seek pause', 'seek position']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'setbuf' expands to ['set buf', 'set buffer']
'setf' expands to ['set F.', 'set flag', 'set format']
'setg' expands to ['set G.', 'set get']
'setjmp' expands to ['set jump']
'setlocale' expands to ['set locale']
'setp' expands to ['set P.', 'set put']
'setstate' expands to ['set state']
'setvbuf' expands to ['set V. buff', 'set V. buffer']
'sgetc' expands to ['S. get C.', 'S. get char', 'stream get C.', 'stream get char']
'sgetn' expands to ['S. get N.', 'stream get N.']
'showbase' expands to ['show base']
'showmanyc' expands to ['show many C.', 'show many char']
'showpoint' expands to ['show point']
'showpos' expands to ['show pause', 'show position']
'shrt' expands to ['shirt', 'short']
'sig' expands to ['S. I. G.', 'sig', 'signal']
'sigabrt' expands to ['sig abort', 'signal abort']
'sigfpe' expands to ['sig F. P. E.', 'signal F. P. E.']
'sigill' expands to ['sig ill', 'sig illegal', 'signal ill', 'signal illegal']
'sigint' expands to ['sig int', 'sig interrupt', 'signal int', 'signal interrupt']
'sigsegv' expands to ['sig seg V.', 'sig segment V.', 'signal seg V.', 'signal segment violation']
'sigterm' expands to ['sig term', 'sig terminal', 'signal term', 'signal terminal']
'sin' expands to ['sine']
'sinh' expands to ['hyperbolic sine', 'sinch', 'sine H.']
'size_t' expands to ['size type']
'skipws' expands to ['skip W. S.', 'skip white space']
'smtp' expands to ['S. M. T. P.']
'snextc' expands to ['S. next C.', 'stream next C.', 'stream next char']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'sprintf' expands to ['S. print F.', 'sprint F.', 'string print F.', 'string print format']
'sputbackc' expands to ['S. put back C.', 'S. put back char', 'stream put back C.', 'stream put back char']
'sputc' expands to ['S. put C.', 'S. put char', 'stream put C.', 'stream put char']
'sputn' expands to ['S. put N.', 'stream put N.']
'sqrt' expands to ['sqirt', 'square root']
'srand' expands to ['S. rand', 'S. random', 'seed rand', 'seed random']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'sscanf' expands to ['S. scan F.', 'S. scan format', 'string scan F.', 'string scan format']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdarg' expands to ['S. T. D. arg', 'S. T. D. argument', 'standard arg', 'standard argument']
'stddef' expands to ['S. T. D. deaf', 'S. T. D. definitions', 'standard deaf', 'standard definitions']
'stderr' expands to ['S. T. D. error', 'standard error']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'stdio' expands to ['S. T. D. I. O.', 'standard I. O.', 'studio']
'stdlib' expands to ['S. T. D. lib', 'S. T. D. library', 'standard lib', 'standard library']
'stdout' expands to ['S. T. D. out', 'standard out']
'str' expands to ['string']
'strcat' expands to ['stir cat', 'stir concat', 'stir concatenate', 'string cat', 'string concat', 'string concatenate']
'strchr' expands to ['stir Chir', 'stir char', 'stir character', 'string Chir', 'string char', 'string character']
'strcmp' expands to ['stir comp', 'stir compare', 'string comp', 'string compare']
'strcoll' expands to ['stir call', 'stir collate', 'string call', 'string collate']
'strcpy' expands to ['stir C. P. Y.', 'stir copy', 'string C. P. Y.', 'string copy']
'strcspn' expands to ['stir C. span', 'stir complementary span', 'string complementary span']
'strerror' expands to ['stir error', 'string error']
'strftime' expands to ['stir F. time', 'stir format time', 'string F. time', 'string format time']
'stringbuf' expands to ['string buff', 'string buffer']
'stringstream' expands to ['string stream']
'strlen' expands to ['stir Len', 'stir length', 'string Len', 'string length']
'strncat' expands to ['stern cat', 'string N. cat', 'string N. concat', 'string N. concatenate']
'strncmp' expands to ['stern comp', 'string N. comp', 'string N. compare']
'strncpy' expands to ['stern copy', 'string N. copy']
'strpbrk' expands to ['string P. break', 'string pointer break', 'strip bark', 'strip break']
'strrchr' expands to ['stir Chir', 'stir R. char', 'stir R. character', 'stir reverse char', 'stir reverse character', 'string R. char', 'string R. character', 'string archer', 'string reverse char', 'string reverse character']
'strspn' expands to ['stir span', 'string span']
'strstr' expands to ['stir stir', 'stir string', 'string stir', 'string string']
'strtod' expands to ['stir Todd', 'stir to D.', 'stir to double', 'string to D.', 'string to double']
'strtok' expands to ['stir talk', 'stir toke', 'stir token', 'string toke', 'string token']
'strtol' expands to ['stir tall', 'stir to L.', 'stir to long', 'string to L.', 'string to long']
'strtoul' expands to ['stir to U. L.', 'stir to unsigned long', 'stir tool', 'string to U. L.', 'string to unsigned long', 'string tool']
'strxfrm' expands to ['str X. form', 'str transform', 'string X. form', 'string transform']
'sub' expands to ['sub routine']
'sungetc' expands to ['stream unget C.', 'stream unget char', 'stream unget character', 'sun get C.']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'tanh' expands to ['hyperbolic tan', 'hyperbolic tangent', 'tan H.', 'tan hyperbolic']
'tellg' expands to ['tell G.', 'tell get']
'tellp' expands to ['tell P.', 'tell put']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'time_t' expands to ['time type']
'tmp' expands to ['temporary']
'tmpfile' expands to ['temp file', 'temporary file']
'tmpnam' expands to ['temp nam', 'temp name', 'temporary nam', 'temporary name']
'tmpname' expands to ['temp name', 'temporary name']
'tok' expands to ['token']
'tolower' expands to ['to lower', 'to lowercase']
'toupper' expands to ['to upper', 'to uppercase']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uchar' expands to ['U. char', 'unsigned char', 'unsigned character']
'uflow' expands to ['U. flow']
'uid' expands to ['U. I. D.', 'user I. D.']
'ulong' expands to ['U. long', 'unsigned long']
'ultoa' expands to ['U. L. to A.', 'U. L. to ascii', 'unsigned long to A.', 'unsigned long to ascii']
'undef' expands to ['undefine', 'undefined']
'unget' expands to ['un get']
'ungetc' expands to ['un get C.', 'un get char', 'un get character']
'uniq' expands to ['unique']
'unitbuf' expands to ['unit buff', 'unit buffer']
'unres' expands to ['unresolved']
'unsetf' expands to ['un set F.', 'un set flag', 'un set format']
'url' expands to ['U. R. L.']
'ushrt' expands to ['U. short', 'unsigned short']
'uu' expands to ['U. U.']
'va' expands to ['V. A.', 'var arg']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'vfprintf' expands to ['V. F. print F.', 'V. file print F.', 'V. file print format', 'var F. print F.', 'var file print F.', 'var file print format']
'vprintf' expands to ['V. print F.', 'V. print format', 'var print F.', 'var print format']
'vsprintf' expands to ['V. S. print F.', 'V. string print F.', 'V. string print format', 'var S. print F.', 'var string print F.', 'var string print format']
'wday' expands to ['W. day', 'weekday']
'win' expands to ['window']
'xalloc' expands to ['X. Alloc', 'X. allocate', 'extensible Alloc', 'extensible allocate']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']
'xsgetn' expands to ['X. S. get N.', 'X. stream get N.']
'xsputn' expands to ['X. S. put N.', 'X. stream put N.']
'yday' expands to ['Y. day', 'year day']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'abspath': appears in ['abspath']
'atanh': appears in ['atanh']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say(['file', 'name', ',\\comma'], user_input='1\n')
Heard file name comma
*** Start of source buffer ***
  1: this_sym_is_unres, this_sym_is_unres_too, file_name, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
file_name: ['file name']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this sym is unresolved', 'this symbol is unres', 'this symbol is unresolved']
this_sym_is_unres_too: ['this sym is unres too', 'this sym is unresolved too', 'this symbol is unres too', 'this symbol is unresolved too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  file_name  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'acos' expands to ['A. cos', 'arc cos', 'arc cosine']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argc' expands to ['arg C.', 'argument count']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asctime' expands to ['ascii time', 'ask time']
'asin' expands to ['A. sine', 'arc sine']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atexit' expands to ['at exit']
'atof' expands to ['A. to F.']
'atoi' expands to ['A. to I.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'boolalpha' expands to ['Boole alpha', 'Boolean alpha']
'bsearch' expands to ['B. search']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'bufsiz' expands to ['buff size', 'buffer size']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'calloc' expands to ['C. Alloc', 'Cal lock']
'cbk' expands to ['callback']
'cerr' expands to ['C. error']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clearerr' expands to ['clear error']
'clock_t' expands to ['clock type']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'copyfmt' expands to ['copy F. M. T.', 'copy format']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctime' expands to ['C. time']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'ctype' expands to ['C. type']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'difftime' expands to ['diff time']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'div_t' expands to ['div type']
'dlg' expands to ['dialog']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'eback' expands to ['E. back']
'ecvt' expands to ['E. convert']
'egptr' expands to ['E. G. pointer', 'E. get pointer', 'egg pointer', 'end get pointer']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'epptr' expands to ['E. P. pointer', 'E. put pointer', 'end put pointer']
'erange' expands to ['E. range', 'error range']
'errno' expands to ['error no', 'error number']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fclose' expands to ['F. close', 'file close']
'fct' expands to ['function']
'fcvt' expands to ['F. convert']
'feof' expands to ['F. E. O. F.', 'F. end of file', 'file E. O. F.', 'file end of file']
'ferror' expands to ['F. error', 'file error']
'fflush' expands to ['F. flush', 'file flush']
'fg' expands to ['foreground']
'fgetc' expands to ['F. get C.', 'file get C.', 'file get character']
'fgetpos' expands to ['F. get pause', 'F. get position', 'file get pause', 'file get position']
'fgets' expands to ['F. get S.', 'F. get string', 'F. gets', 'file get S.', 'file get string', 'file gets']
'fifo' expands to ['fie foe', 'first in first out']
'filebuf' expands to ['file buff', 'file buffer']
'fmod' expands to ['F. mod', 'float mod', 'float modulo']
'fmt' expands to ['format']
'fmtflags' expands to ['F. M. T. flags', 'format flags']
'fp' expands to ['file pointer']
'fpos' expands to ['F. pause', 'F. position', 'file pause']
'fpos_t' expands to ['F. pause type', 'F. position type', 'file pause type']
'fprintf' expands to ['F. print F.', 'F. print format', 'file print F.', 'file print format']
'fputc' expands to ['F. put C.', 'file put C.', 'file put character']
'fputchar' expands to ['F. put char', 'file put char', 'file put character']
'fputs' expands to ['F. put S.', 'F. puts', 'file put S.', 'file put string']
'frac' expands to ['fraction']
'fread' expands to ['file read']
'freopen' expands to ['F. reopen', 'file reopen', 'free open']
'frexp' expands to ['F. R. E. X. P.', 'float remainder exponent', 'fur exp']
'fscanf' expands to ['F. scan F.', 'file scan F.', 'file scan format']
'fseek' expands to ['F. seek', 'file seek']
'fsetpos' expands to ['F. set pause', 'file set pause', 'file set position']
'ftell' expands to ['F. tell', 'file tell']
'func' expands to ['function']
'fwrite' expands to ['F. write', 'file write']
'gbump' expands to ['G. bump', 'get bump']
'gcount' expands to ['G. count', 'get count']
'gcvt' expands to ['G. C. V. T.', 'G. convert']
'gen' expands to ['general', 'generic']
'getc' expands to ['get C.']
'getchar' expands to ['get char', 'get character']
'getenv' expands to ['get E. N. V.', 'get env', 'get environment']
'getline' expands to ['get line']
'getloc' expands to ['get LOC', 'get locale']
'getw' expands to ['get W.']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'gmtime' expands to ['G. M. time', 'Greenwich mean time']
'goto' expands to ['go to']
'gptr' expands to ['G. pointer', 'get pointer']
'gr' expands to ['group']
'h' expands to ['H.']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'ifstream' expands to ['I. F. stream', 'if stream', 'input F. stream', 'input file stream']
'ign' expands to ['I. G. N.', 'ignore']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'inplace' expands to ['in place']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'iofbf' expands to ['I. O. F. B. F.', 'I. O. full buff', 'I. O. fully buffered']
'iostate' expands to ['I. O. state']
'ip' expands to ['I. P.']
'isalnum' expands to ['is Al numb', 'is alphanumeric']
'isalpha' expands to ['is alpha', 'is alphabetic']
'iscntrl' expands to ['is control']
'isdigit' expands to ['is digit']
'isdst' expands to ['is D. S. T.', 'is daylight savings time']
'isgraph' expands to ['is graph', 'is graphical']
'islower' expands to ['is lower', 'is lowercase']
'isprint' expands to ['is print', 'is printable']
'ispunct' expands to ['is punctuation', 'is punked']
'isspace' expands to ['is space']
'istringstream' expands to ['I. string stream', 'input string stream']
'isupper' expands to ['is upper', 'is uppercase']
'isxdigit' expands to ['is X. digit', 'is hex digit', 'is hexadecimal digit']
'itoa' expands to ['I. to A.']
'iword' expands to ['I. word', 'integer word']
'l' expands to ['L.', 'length']
'lconv' expands to ['L. conv', 'locale conventions']
'ldbl' expands to ['L. D. B. L. ', 'L. double', 'long double']
'ldexp' expands to ['L. D. E. X. P.', 'L. D. exp', 'L. double E. X. P.', 'L. double exp', 'load double E. X. P.', 'load double exp']
'ldiv' expands to ['L. div', 'L. divide', 'long div', 'long divide']
'ldiv_t' expands to ['L. div type', 'L. divide type', 'long div type', 'long divide type']
'len' expands to ['length']
'lexicographical' expands to ['lexicographic']
'lfind' expands to ['L. find', 'linear find']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'localeconv' expands to ['locale conv', 'locale conventions']
'localtime' expands to ['local time']
'login' expands to ['log in']
'longjmp' expands to ['long jump']
'lsearch' expands to ['L. search', 'linear search']
'ltoa' expands to ['L. to A.']
'mant' expands to ['mantissa']
'max' expands to ['maximum']
'mday' expands to ['M. day', 'month day']
'mem' expands to ['memory']
'memchr' expands to ['mem Chir', 'memory char', 'memory character']
'memcmp' expands to ['mem comp', 'mem compare', 'memory comp', 'memory compare']
'memmove' expands to ['mem move', 'memory move']
'min' expands to ['minimum']
'mk' expands to ['make']
'mktime' expands to ['M. K. time', 'make time']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'modf' expands to ['mod F.', 'mod float', 'modulo float']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'n' expands to ['N.']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'noboolalpha' expands to ['no Boole alpha', 'no Boolean alpha']
'noshowbase' expands to ['no show base']
'noshowpoint' expands to ['no show point']
'noshowpos' expands to ['no show pause', 'no show position']
'noskipws' expands to ['no skip W. S.', 'no skip white space']
'nounitbuf' expands to ['no unit buff', 'no unit buffer']
'nouppercase' expands to ['no uppercase']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'offsetof' expands to ['offset of']
'ofstream' expands to ['O. F. stream', 'O. file stream', 'output F. stream', 'output file stream']
'openmode' expands to ['open mode']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'ostringstream' expands to ['O. string stream', 'output string stream']
'p' expands to ['P.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'pbackfail' expands to ['P. back fail', 'put back fail']
'pbase' expands to ['P. base', 'put base']
'pbump' expands to ['P. bump', 'put bump']
'perm' expands to ['permission']
'perror' expands to ['P. error', 'put error']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'posn' expands to ['position']
'pptr' expands to ['P. pointer', 'put pointer']
'prev' expands to ['previous']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'ptrdiff' expands to ['pointer diff']
'ptrdiff_t' expands to ['pointer diff type']
'pty' expands to ['P. T. Y.']
'pubimbue' expands to ['pub imbue', 'public imbue']
'pubseekoff' expands to ['pub seek off', 'pub seek offset', 'public seek off', 'public seek offset']
'pubseekpos' expands to ['pub seek pause', 'pub seek position', 'public seek pause', 'public seek position']
'pubsetbuf' expands to ['pub set buff', 'pub set buffer', 'public set buff', 'public set buffer']
'pubsync' expands to ['pub sync', 'public sync']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'putback' expands to ['put back']
'putc' expands to ['put C.']
'putchar' expands to ['put char', 'put character']
'putenv' expands to ['put env', 'put environment']
'putw' expands to ['put W.']
'pword' expands to ['P. word', 'pointer word']
'py' expands to ['P. Y.', 'pie', 'python']
'quot' expands to ['quotient']
'rand' expands to ['random']
'rd' expands to ['read']
'rdbuf' expands to ['read buff', 'read buffer']
'rdstate' expands to ['read state']
'readsome' expands to ['read some']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'sbumpc' expands to ['S. bump C.', 'S. bump char', 'stream bump C.', 'stream bump char']
'schar' expands to ['S. char', 'S. character', 'signed char', 'signed character']
'scr' expands to ['screen']
'sec' expands to ['second']
'seekdir' expands to ['seek dir', 'seek directory']
'seekg' expands to ['seek G.', 'seek get']
'seekoff' expands to ['seek off', 'seek offset']
'seekp' expands to ['seek P.', 'seek put']
'seekpos' expands to ['seek pause', 'seek position']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'setbuf' expands to ['set buf', 'set buffer']
'setf' expands to ['set F.', 'set flag', 'set format']
'setg' expands to ['set G.', 'set get']
'setjmp' expands to ['set jump']
'setlocale' expands to ['set locale']
'setp' expands to ['set P.', 'set put']
'setstate' expands to ['set state']
'setvbuf' expands to ['set V. buff', 'set V. buffer']
'sgetc' expands to ['S. get C.', 'S. get char', 'stream get C.', 'stream get char']
'sgetn' expands to ['S. get N.', 'stream get N.']
'showbase' expands to ['show base']
'showmanyc' expands to ['show many C.', 'show many char']
'showpoint' expands to ['show point']
'showpos' expands to ['show pause', 'show position']
'shrt' expands to ['shirt', 'short']
'sig' expands to ['S. I. G.', 'sig', 'signal']
'sigabrt' expands to ['sig abort', 'signal abort']
'sigfpe' expands to ['sig F. P. E.', 'signal F. P. E.']
'sigill' expands to ['sig ill', 'sig illegal', 'signal ill', 'signal illegal']
'sigint' expands to ['sig int', 'sig interrupt', 'signal int', 'signal interrupt']
'sigsegv' expands to ['sig seg V.', 'sig segment V.', 'signal seg V.', 'signal segment violation']
'sigterm' expands to ['sig term', 'sig terminal', 'signal term', 'signal terminal']
'sin' expands to ['sine']
'sinh' expands to ['hyperbolic sine', 'sinch', 'sine H.']
'size_t' expands to ['size type']
'skipws' expands to ['skip W. S.', 'skip white space']
'smtp' expands to ['S. M. T. P.']
'snextc' expands to ['S. next C.', 'stream next C.', 'stream next char']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'sprintf' expands to ['S. print F.', 'sprint F.', 'string print F.', 'string print format']
'sputbackc' expands to ['S. put back C.', 'S. put back char', 'stream put back C.', 'stream put back char']
'sputc' expands to ['S. put C.', 'S. put char', 'stream put C.', 'stream put char']
'sputn' expands to ['S. put N.', 'stream put N.']
'sqrt' expands to ['sqirt', 'square root']
'srand' expands to ['S. rand', 'S. random', 'seed rand', 'seed random']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'sscanf' expands to ['S. scan F.', 'S. scan format', 'string scan F.', 'string scan format']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdarg' expands to ['S. T. D. arg', 'S. T. D. argument', 'standard arg', 'standard argument']
'stddef' expands to ['S. T. D. deaf', 'S. T. D. definitions', 'standard deaf', 'standard definitions']
'stderr' expands to ['S. T. D. error', 'standard error']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'stdio' expands to ['S. T. D. I. O.', 'standard I. O.', 'studio']
'stdlib' expands to ['S. T. D. lib', 'S. T. D. library', 'standard lib', 'standard library']
'stdout' expands to ['S. T. D. out', 'standard out']
'str' expands to ['string']
'strcat' expands to ['stir cat', 'stir concat', 'stir concatenate', 'string cat', 'string concat', 'string concatenate']
'strchr' expands to ['stir Chir', 'stir char', 'stir character', 'string Chir', 'string char', 'string character']
'strcmp' expands to ['stir comp', 'stir compare', 'string comp', 'string compare']
'strcoll' expands to ['stir call', 'stir collate', 'string call', 'string collate']
'strcpy' expands to ['stir C. P. Y.', 'stir copy', 'string C. P. Y.', 'string copy']
'strcspn' expands to ['stir C. span', 'stir complementary span', 'string complementary span']
'strerror' expands to ['stir error', 'string error']
'strftime' expands to ['stir F. time', 'stir format time', 'string F. time', 'string format time']
'stringbuf' expands to ['string buff', 'string buffer']
'stringstream' expands to ['string stream']
'strlen' expands to ['stir Len', 'stir length', 'string Len', 'string length']
'strncat' expands to ['stern cat', 'string N. cat', 'string N. concat', 'string N. concatenate']
'strncmp' expands to ['stern comp', 'string N. comp', 'string N. compare']
'strncpy' expands to ['stern copy', 'string N. copy']
'strpbrk' expands to ['string P. break', 'string pointer break', 'strip bark', 'strip break']
'strrchr' expands to ['stir Chir', 'stir R. char', 'stir R. character', 'stir reverse char', 'stir reverse character', 'string R. char', 'string R. character', 'string archer', 'string reverse char', 'string reverse character']
'strspn' expands to ['stir span', 'string span']
'strstr' expands to ['stir stir', 'stir string', 'string stir', 'string string']
'strtod' expands to ['stir Todd', 'stir to D.', 'stir to double', 'string to D.', 'string to double']
'strtok' expands to ['stir talk', 'stir toke', 'stir token', 'string toke', 'string token']
'strtol' expands to ['stir tall', 'stir to L.', 'stir to long', 'string to L.', 'string to long']
'strtoul' expands to ['stir to U. L.', 'stir to unsigned long', 'stir tool', 'string to U. L.', 'string to unsigned long', 'string tool']
'strxfrm' expands to ['str X. form', 'str transform', 'string X. form', 'string transform']
'sub' expands to ['sub routine']
'sungetc' expands to ['stream unget C.', 'stream unget char', 'stream unget character', 'sun get C.']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'tanh' expands to ['hyperbolic tan', 'hyperbolic tangent', 'tan H.', 'tan hyperbolic']
'tellg' expands to ['tell G.', 'tell get']
'tellp' expands to ['tell P.', 'tell put']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'time_t' expands to ['time type']
'tmp' expands to ['temporary']
'tmpfile' expands to ['temp file', 'temporary file']
'tmpnam' expands to ['temp nam', 'temp name', 'temporary nam', 'temporary name']
'tmpname' expands to ['temp name', 'temporary name']
'tok' expands to ['token']
'tolower' expands to ['to lower', 'to lowercase']
'toupper' expands to ['to upper', 'to uppercase']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uchar' expands to ['U. char', 'unsigned char', 'unsigned character']
'uflow' expands to ['U. flow']
'uid' expands to ['U. I. D.', 'user I. D.']
'ulong' expands to ['U. long', 'unsigned long']
'ultoa' expands to ['U. L. to A.', 'U. L. to ascii', 'unsigned long to A.', 'unsigned long to ascii']
'undef' expands to ['undefine', 'undefined']
'unget' expands to ['un get']
'ungetc' expands to ['un get C.', 'un get char', 'un get character']
'uniq' expands to ['unique']
'unitbuf' expands to ['unit buff', 'unit buffer']
'unres' expands to ['unresolved']
'unsetf' expands to ['un set F.', 'un set flag', 'un set format']
'url' expands to ['U. R. L.']
'ushrt' expands to ['U. short', 'unsigned short']
'uu' expands to ['U. U.']
'va' expands to ['V. A.', 'var arg']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'vfprintf' expands to ['V. F. print F.', 'V. file print F.', 'V. file print format', 'var F. print F.', 'var file print F.', 'var file print format']
'vprintf' expands to ['V. print F.', 'V. print format', 'var print F.', 'var print format']
'vsprintf' expands to ['V. S. print F.', 'V. string print F.', 'V. string print format', 'var S. print F.', 'var string print F.', 'var string print format']
'wday' expands to ['W. day', 'weekday']
'win' expands to ['window']
'xalloc' expands to ['X. Alloc', 'X. allocate', 'extensible Alloc', 'extensible allocate']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']
'xsgetn' expands to ['X. S. get N.', 'X. stream get N.']
'xsputn' expands to ['X. S. put N.', 'X. stream put N.']
'yday' expands to ['Y. day', 'year day']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'abspath': appears in ['abspath']
'atanh': appears in ['atanh']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: say(['application', 'programming', 'interface', 'function', ',\\comma'], user_input='1\n')
Heard application programming interface function comma
*** Start of source buffer ***
  1: this_sym_is_unres, this_sym_is_unres_too, file_name, application_programming_interface_function, <CURSOR>

*** End of source buffer ***


>>> Testing console command: print_abbreviations(1)

List of abbreviations

'abs' expands to ['absolute']
'acos' expands to ['A. cos', 'arc cos', 'arc cosine']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argc' expands to ['arg C.', 'argument count']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asctime' expands to ['ascii time', 'ask time']
'asin' expands to ['A. sine', 'arc sine']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atexit' expands to ['at exit']
'atof' expands to ['A. to F.']
'atoi' expands to ['A. to I.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'boolalpha' expands to ['Boole alpha', 'Boolean alpha']
'bsearch' expands to ['B. search']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'bufsiz' expands to ['buff size', 'buffer size']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'calloc' expands to ['C. Alloc', 'Cal lock']
'cbk' expands to ['callback']
'cerr' expands to ['C. error']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clearerr' expands to ['clear error']
'clock_t' expands to ['clock type']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'copyfmt' expands to ['copy F. M. T.', 'copy format']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctime' expands to ['C. time']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'ctype' expands to ['C. type']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'difftime' expands to ['diff time']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'div_t' expands to ['div type']
'dlg' expands to ['dialog']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'eback' expands to ['E. back']
'ecvt' expands to ['E. convert']
'egptr' expands to ['E. G. pointer', 'E. get pointer', 'egg pointer', 'end get pointer']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'epptr' expands to ['E. P. pointer', 'E. put pointer', 'end put pointer']
'erange' expands to ['E. range', 'error range']
'errno' expands to ['error no', 'error number']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fclose' expands to ['F. close', 'file close']
'fct' expands to ['function']
'fcvt' expands to ['F. convert']
'feof' expands to ['F. E. O. F.', 'F. end of file', 'file E. O. F.', 'file end of file']
'ferror' expands to ['F. error', 'file error']
'fflush' expands to ['F. flush', 'file flush']
'fg' expands to ['foreground']
'fgetc' expands to ['F. get C.', 'file get C.', 'file get character']
'fgetpos' expands to ['F. get pause', 'F. get position', 'file get pause', 'file get position']
'fgets' expands to ['F. get S.', 'F. get string', 'F. gets', 'file get S.', 'file get string', 'file gets']
'fifo' expands to ['fie foe', 'first in first out']
'filebuf' expands to ['file buff', 'file buffer']
'fmod' expands to ['F. mod', 'float mod', 'float modulo']
'fmt' expands to ['format']
'fmtflags' expands to ['F. M. T. flags', 'format flags']
'fp' expands to ['file pointer']
'fpos' expands to ['F. pause', 'F. position', 'file pause']
'fpos_t' expands to ['F. pause type', 'F. position type', 'file pause type']
'fprintf' expands to ['F. print F.', 'F. print format', 'file print F.', 'file print format']
'fputc' expands to ['F. put C.', 'file put C.', 'file put character']
'fputchar' expands to ['F. put char', 'file put char', 'file put character']
'fputs' expands to ['F. put S.', 'F. puts', 'file put S.', 'file put string']
'frac' expands to ['fraction']
'fread' expands to ['file read']
'freopen' expands to ['F. reopen', 'file reopen', 'free open']
'frexp' expands to ['F. R. E. X. P.', 'float remainder exponent', 'fur exp']
'fscanf' expands to ['F. scan F.', 'file scan F.', 'file scan format']
'fseek' expands to ['F. seek', 'file seek']
'fsetpos' expands to ['F. set pause', 'file set pause', 'file set position']
'ftell' expands to ['F. tell', 'file tell']
'func' expands to ['function']
'fwrite' expands to ['F. write', 'file write']
'gbump' expands to ['G. bump', 'get bump']
'gcount' expands to ['G. count', 'get count']
'gcvt' expands to ['G. C. V. T.', 'G. convert']
'gen' expands to ['general', 'generic']
'getc' expands to ['get C.']
'getchar' expands to ['get char', 'get character']
'getenv' expands to ['get E. N. V.', 'get env', 'get environment']
'getline' expands to ['get line']
'getloc' expands to ['get LOC', 'get locale']
'getw' expands to ['get W.']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'gmtime' expands to ['G. M. time', 'Greenwich mean time']
'goto' expands to ['go to']
'gptr' expands to ['G. pointer', 'get pointer']
'gr' expands to ['group']
'h' expands to ['H.']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'ifstream' expands to ['I. F. stream', 'if stream', 'input F. stream', 'input file stream']
'ign' expands to ['I. G. N.', 'ignore']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'inplace' expands to ['in place']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'iofbf' expands to ['I. O. F. B. F.', 'I. O. full buff', 'I. O. fully buffered']
'iostate' expands to ['I. O. state']
'ip' expands to ['I. P.']
'isalnum' expands to ['is Al numb', 'is alphanumeric']
'isalpha' expands to ['is alpha', 'is alphabetic']
'iscntrl' expands to ['is control']
'isdigit' expands to ['is digit']
'isdst' expands to ['is D. S. T.', 'is daylight savings time']
'isgraph' expands to ['is graph', 'is graphical']
'islower' expands to ['is lower', 'is lowercase']
'isprint' expands to ['is print', 'is printable']
'ispunct' expands to ['is punctuation', 'is punked']
'isspace' expands to ['is space']
'istringstream' expands to ['I. string stream', 'input string stream']
'isupper' expands to ['is upper', 'is uppercase']
'isxdigit' expands to ['is X. digit', 'is hex digit', 'is hexadecimal digit']
'itoa' expands to ['I. to A.']
'iword' expands to ['I. word', 'integer word']
'l' expands to ['L.', 'length']
'lconv' expands to ['L. conv', 'locale conventions']
'ldbl' expands to ['L. D. B. L. ', 'L. double', 'long double']
'ldexp' expands to ['L. D. E. X. P.', 'L. D. exp', 'L. double E. X. P.', 'L. double exp', 'load double E. X. P.', 'load double exp']
'ldiv' expands to ['L. div', 'L. divide', 'long div', 'long divide']
'ldiv_t' expands to ['L. div type', 'L. divide type', 'long div type', 'long divide type']
'len' expands to ['length']
'lexicographical' expands to ['lexicographic']
'lfind' expands to ['L. find', 'linear find']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'localeconv' expands to ['locale conv', 'locale conventions']
'localtime' expands to ['local time']
'login' expands to ['log in']
'longjmp' expands to ['long jump']
'lsearch' expands to ['L. search', 'linear search']
'ltoa' expands to ['L. to A.']
'mant' expands to ['mantissa']
'max' expands to ['maximum']
'mday' expands to ['M. day', 'month day']
'mem' expands to ['memory']
'memchr' expands to ['mem Chir', 'memory char', 'memory character']
'memcmp' expands to ['mem comp', 'mem compare', 'memory comp', 'memory compare']
'memmove' expands to ['mem move', 'memory move']
'min' expands to ['minimum']
'mk' expands to ['make']
'mktime' expands to ['M. K. time', 'make time']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'modf' expands to ['mod F.', 'mod float', 'modulo float']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'n' expands to ['N.']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'noboolalpha' expands to ['no Boole alpha', 'no Boolean alpha']
'noshowbase' expands to ['no show base']
'noshowpoint' expands to ['no show point']
'noshowpos' expands to ['no show pause', 'no show position']
'noskipws' expands to ['no skip W. S.', 'no skip white space']
'nounitbuf' expands to ['no unit buff', 'no unit buffer']
'nouppercase' expands to ['no uppercase']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'offsetof' expands to ['offset of']
'ofstream' expands to ['O. F. stream', 'O. file stream', 'output F. stream', 'output file stream']
'openmode' expands to ['open mode']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'ostringstream' expands to ['O. string stream', 'output string stream']
'p' expands to ['P.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'pbackfail' expands to ['P. back fail', 'put back fail']
'pbase' expands to ['P. base', 'put base']
'pbump' expands to ['P. bump', 'put bump']
'perm' expands to ['permission']
'perror' expands to ['P. error', 'put error']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'posn' expands to ['position']
'pptr' expands to ['P. pointer', 'put pointer']
'prev' expands to ['previous']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'ptrdiff' expands to ['pointer diff']
'ptrdiff_t' expands to ['pointer diff type']
'pty' expands to ['P. T. Y.']
'pubimbue' expands to ['pub imbue', 'public imbue']
'pubseekoff' expands to ['pub seek off', 'pub seek offset', 'public seek off', 'public seek offset']
'pubseekpos' expands to ['pub seek pause', 'pub seek position', 'public seek pause', 'public seek position']
'pubsetbuf' expands to ['pub set buff', 'pub set buffer', 'public set buff', 'public set buffer']
'pubsync' expands to ['pub sync', 'public sync']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'putback' expands to ['put back']
'putc' expands to ['put C.']
'putchar' expands to ['put char', 'put character']
'putenv' expands to ['put env', 'put environment']
'putw' expands to ['put W.']
'pword' expands to ['P. word', 'pointer word']
'py' expands to ['P. Y.', 'pie', 'python']
'quot' expands to ['quotient']
'rand' expands to ['random']
'rd' expands to ['read']
'rdbuf' expands to ['read buff', 'read buffer']
'rdstate' expands to ['read state']
'readsome' expands to ['read some']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'sbumpc' expands to ['S. bump C.', 'S. bump char', 'stream bump C.', 'stream bump char']
'schar' expands to ['S. char', 'S. character', 'signed char', 'signed character']
'scr' expands to ['screen']
'sec' expands to ['second']
'seekdir' expands to ['seek dir', 'seek directory']
'seekg' expands to ['seek G.', 'seek get']
'seekoff' expands to ['seek off', 'seek offset']
'seekp' expands to ['seek P.', 'seek put']
'seekpos' expands to ['seek pause', 'seek position']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'setbuf' expands to ['set buf', 'set buffer']
'setf' expands to ['set F.', 'set flag', 'set format']
'setg' expands to ['set G.', 'set get']
'setjmp' expands to ['set jump']
'setlocale' expands to ['set locale']
'setp' expands to ['set P.', 'set put']
'setstate' expands to ['set state']
'setvbuf' expands to ['set V. buff', 'set V. buffer']
'sgetc' expands to ['S. get C.', 'S. get char', 'stream get C.', 'stream get char']
'sgetn' expands to ['S. get N.', 'stream get N.']
'showbase' expands to ['show base']
'showmanyc' expands to ['show many C.', 'show many char']
'showpoint' expands to ['show point']
'showpos' expands to ['show pause', 'show position']
'shrt' expands to ['shirt', 'short']
'sig' expands to ['S. I. G.', 'sig', 'signal']
'sigabrt' expands to ['sig abort', 'signal abort']
'sigfpe' expands to ['sig F. P. E.', 'signal F. P. E.']
'sigill' expands to ['sig ill', 'sig illegal', 'signal ill', 'signal illegal']
'sigint' expands to ['sig int', 'sig interrupt', 'signal int', 'signal interrupt']
'sigsegv' expands to ['sig seg V.', 'sig segment V.', 'signal seg V.', 'signal segment violation']
'sigterm' expands to ['sig term', 'sig terminal', 'signal term', 'signal terminal']
'sin' expands to ['sine']
'sinh' expands to ['hyperbolic sine', 'sinch', 'sine H.']
'size_t' expands to ['size type']
'skipws' expands to ['skip W. S.', 'skip white space']
'smtp' expands to ['S. M. T. P.']
'snextc' expands to ['S. next C.', 'stream next C.', 'stream next char']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'sprintf' expands to ['S. print F.', 'sprint F.', 'string print F.', 'string print format']
'sputbackc' expands to ['S. put back C.', 'S. put back char', 'stream put back C.', 'stream put back char']
'sputc' expands to ['S. put C.', 'S. put char', 'stream put C.', 'stream put char']
'sputn' expands to ['S. put N.', 'stream put N.']
'sqrt' expands to ['sqirt', 'square root']
'srand' expands to ['S. rand', 'S. random', 'seed rand', 'seed random']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'sscanf' expands to ['S. scan F.', 'S. scan format', 'string scan F.', 'string scan format']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdarg' expands to ['S. T. D. arg', 'S. T. D. argument', 'standard arg', 'standard argument']
'stddef' expands to ['S. T. D. deaf', 'S. T. D. definitions', 'standard deaf', 'standard definitions']
'stderr' expands to ['S. T. D. error', 'standard error']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'stdio' expands to ['S. T. D. I. O.', 'standard I. O.', 'studio']
'stdlib' expands to ['S. T. D. lib', 'S. T. D. library', 'standard lib', 'standard library']
'stdout' expands to ['S. T. D. out', 'standard out']
'str' expands to ['string']
'strcat' expands to ['stir cat', 'stir concat', 'stir concatenate', 'string cat', 'string concat', 'string concatenate']
'strchr' expands to ['stir Chir', 'stir char', 'stir character', 'string Chir', 'string char', 'string character']
'strcmp' expands to ['stir comp', 'stir compare', 'string comp', 'string compare']
'strcoll' expands to ['stir call', 'stir collate', 'string call', 'string collate']
'strcpy' expands to ['stir C. P. Y.', 'stir copy', 'string C. P. Y.', 'string copy']
'strcspn' expands to ['stir C. span', 'stir complementary span', 'string complementary span']
'strerror' expands to ['stir error', 'string error']
'strftime' expands to ['stir F. time', 'stir format time', 'string F. time', 'string format time']
'stringbuf' expands to ['string buff', 'string buffer']
'stringstream' expands to ['string stream']
'strlen' expands to ['stir Len', 'stir length', 'string Len', 'string length']
'strncat' expands to ['stern cat', 'string N. cat', 'string N. concat', 'string N. concatenate']
'strncmp' expands to ['stern comp', 'string N. comp', 'string N. compare']
'strncpy' expands to ['stern copy', 'string N. copy']
'strpbrk' expands to ['string P. break', 'string pointer break', 'strip bark', 'strip break']
'strrchr' expands to ['stir Chir', 'stir R. char', 'stir R. character', 'stir reverse char', 'stir reverse character', 'string R. char', 'string R. character', 'string archer', 'string reverse char', 'string reverse character']
'strspn' expands to ['stir span', 'string span']
'strstr' expands to ['stir stir', 'stir string', 'string stir', 'string string']
'strtod' expands to ['stir Todd', 'stir to D.', 'stir to double', 'string to D.', 'string to double']
'strtok' expands to ['stir talk', 'stir toke', 'stir token', 'string toke', 'string token']
'strtol' expands to ['stir tall', 'stir to L.', 'stir to long', 'string to L.', 'string to long']
'strtoul' expands to ['stir to U. L.', 'stir to unsigned long', 'stir tool', 'string to U. L.', 'string to unsigned long', 'string tool']
'strxfrm' expands to ['str X. form', 'str transform', 'string X. form', 'string transform']
'sub' expands to ['sub routine']
'sungetc' expands to ['stream unget C.', 'stream unget char', 'stream unget character', 'sun get C.']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'tanh' expands to ['hyperbolic tan', 'hyperbolic tangent', 'tan H.', 'tan hyperbolic']
'tellg' expands to ['tell G.', 'tell get']
'tellp' expands to ['tell P.', 'tell put']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'time_t' expands to ['time type']
'tmp' expands to ['temporary']
'tmpfile' expands to ['temp file', 'temporary file']
'tmpnam' expands to ['temp nam', 'temp name', 'temporary nam', 'temporary name']
'tmpname' expands to ['temp name', 'temporary name']
'tok' expands to ['token']
'tolower' expands to ['to lower', 'to lowercase']
'toupper' expands to ['to upper', 'to uppercase']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uchar' expands to ['U. char', 'unsigned char', 'unsigned character']
'uflow' expands to ['U. flow']
'uid' expands to ['U. I. D.', 'user I. D.']
'ulong' expands to ['U. long', 'unsigned long']
'ultoa' expands to ['U. L. to A.', 'U. L. to ascii', 'unsigned long to A.', 'unsigned long to ascii']
'undef' expands to ['undefine', 'undefined']
'unget' expands to ['un get']
'ungetc' expands to ['un get C.', 'un get char', 'un get character']
'uniq' expands to ['unique']
'unitbuf' expands to ['unit buff', 'unit buffer']
'unres' expands to ['unresolved']
'unsetf' expands to ['un set F.', 'un set flag', 'un set format']
'url' expands to ['U. R. L.']
'ushrt' expands to ['U. short', 'unsigned short']
'uu' expands to ['U. U.']
'va' expands to ['V. A.', 'var arg']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'vfprintf' expands to ['V. F. print F.', 'V. file print F.', 'V. file print format', 'var F. print F.', 'var file print F.', 'var file print format']
'vprintf' expands to ['V. print F.', 'V. print format', 'var print F.', 'var print format']
'vsprintf' expands to ['V. S. print F.', 'V. string print F.', 'V. string print format', 'var S. print F.', 'var string print F.', 'var string print format']
'wday' expands to ['W. day', 'weekday']
'win' expands to ['window']
'xalloc' expands to ['X. Alloc', 'X. allocate', 'extensible Alloc', 'extensible allocate']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']
'xsgetn' expands to ['X. S. get N.', 'X. stream get N.']
'xsputn' expands to ['X. S. put N.', 'X. stream put N.']
'yday' expands to ['Y. day', 'year day']


List of unresolved abbreviations

'abbrev': appears in ['this_sym_has_an_other_abbrev']
'abspath': appears in ['abspath']
'atanh': appears in ['atanh']
'c': appears in ['THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym']
'dyear': appears in ['accept2dyear']
'f': appears in ['f_name', 'f_name2']
'x': appears in ['x']
'y': appears in ['y']


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : basic_correction
* Description : Testing basic correction infrastructure with ResMgr.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

***Testing initial state***


0 stored utterances, as expected


recent dictation is empty, as expected


***Some simple dictation***



>>> Testing console command: say(['class', 'clown', 'inherits', 'from', 'student'], user_input='0
0
')
Heard class clown inherits from student
*** Start of source buffer ***
  1: class Clown(Student<CURSOR>):
  2:     

*** End of source buffer ***


>>> Testing console command: say(['class', 'body'], user_input='')
Heard class body
*** Start of source buffer ***
  1: class Clown(Student):
  2:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['define', 'method', 'popularity', 'method', 'body'], user_input='0
')
Heard define method popularity method body
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['return', 'eight'], user_input='')
Heard return eight
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8<CURSOR>

*** End of source buffer ***

***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing scratch that***

scratching 1

*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

3 stored utterances, as expected


3 recently dictated utterances, as expected


***Moving cursor manually***

*** Start of source buffer ***
  1: <CURSOR>class Clown(Student):
  2:     def popularity(self):
  3:         

*** End of source buffer ***

***Testing scratch that following manual move***

scratching 1

*** Start of source buffer ***
  1: class Clown(Student):
  2:     <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

2 stored utterances, as expected


2 recently dictated utterances, as expected



>>> Testing console command: say(['define', 'method', 'grades', 'method', 'body', 'return', 'B.'], user_input='0
2
')
Heard define method grades method body return B.
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def grades(self):
  3:         return b<CURSOR>

*** End of source buffer ***

3 stored utterances, as expected


3 recently dictated utterances, as expected



>>> Testing console command: say(['select', 'Clown'], user_input='None')
Heard select clown
*** Start of source buffer ***
  1: class <SEL_START>Clown<SEL_END>(Student):
  2:     def grades(self):
  3:         return b

*** End of source buffer ***

***Manually changing text

*** Start of source buffer ***
  1: class president<CURSOR>(Student):
  2:     def grades(self):
  3:         return b

*** End of source buffer ***

***Testing scratch that following manual change***

scratching 1

scratch 1 failed as expected
WARNING: source file 'blahblah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

***Testing whether symbol "Cloud" exists before dictation***

symbol Cloud did not exist, as expected


>>> Testing console command: say(['class', 'cloud', 'inherits', 'from', 'student'], user_input='0
0
')
Heard class cloud inherits from student
*** Start of source buffer ***
  1: class Cloud(Student<CURSOR>):
  2:     

*** End of source buffer ***


>>> Testing console command: say(['class', 'body'], user_input='')
Heard class body
*** Start of source buffer ***
  1: class Cloud(Student):
  2:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['fine', 'method', 'popularity', 'method', 'body'], user_input='0
')
Heard fine method popularity method body
*** Start of source buffer ***
  1: class Cloud(Student):
  2:     fine_method_popularity<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['return', 'eight'], user_input='')
Heard return eight
*** Start of source buffer ***
  1: class Cloud(Student):
  2:     fine_method_popularityreturn 8<CURSOR>

*** End of source buffer ***

***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing symbol addition***

symbol Cloud has spoken forms ['cloud']
symbol fine_method_popularity has spoken forms ['fine method popularity']

***Testing correction of recent utterance***

detecting changes
utterance 2: change = {'fine': 'define'}
word fine being replaced with define
utterance 2 was changed 
utterance 2 was corrected
about to reinterpret
*** Start of source buffer ***
  1: class Cloud(Student):
  2:     <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Cloud(Student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Cloud(Student):
  2:     def popularity(self):
  3:         return 8<CURSOR>

*** End of source buffer ***

all utterances from 2 to the present
were reinterpreted, as expected


***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing symbol removal on correction***

symbol fine_method_popularity did not exist, as expected

***Testing correction of another recent utterance***

detecting changes
utterance 4: change = {'cloud': 'clown'}
word cloud being replaced with clown
utterance 4 was changed 
utterance 4 was corrected
about to reinterpret
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(Student<CURSOR>):
  2:     

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(Student):
  2:     <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8<CURSOR>

*** End of source buffer ***

all utterances from 4 to the present
were reinterpreted, as expected


***Testing state***


4 stored utterances, as expected


4 recently dictated utterances, as expected


***Testing symbol removal on correction***

symbol Cloud did not exist, as expected

***Testing whether symbol "excess" exists before dictation***

symbol excess did not exist, as expected


>>> Testing console command: say(['new', 'line'], user_input='')
Heard new line
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back indent'], user_input='')
Heard back indent
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['excess', 'equals', 'zero'], user_input='0
')
Heard excess equals zero
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4: excess = 0<CURSOR>

*** End of source buffer ***

***Testing symbol addition***

symbol excess has spoken forms ['excess']

***Manually changing text

*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4: excess<CURSOR>

*** End of source buffer ***

***Testing state***


7 stored utterances, as expected


7 recently dictated utterances, as expected


***Testing failed correction of a recent utterance***


don't expect to be able to correct error 1 utterances ago
because can_reinterpret returned false, but we'll try anyway

detecting changes
utterance 1: change = {'excess': 'success'}
word excess being replaced with success
utterance 1 was changed 
utterance 1 was corrected
about to reinterpret

reinterpretation failed, as expected


***Testing failed symbol addition***

(reinterpretation should have failed, so symbol "success" should
not have been added)

symbol success did not exist, as expected

***Testing symbol removal***

(despite re-interpretation failure, incorrect symbol "excess"
should have been removed)

symbol excess did not exist, as expected

***Testing whether symbol "results" exists before dictation***

symbol results did not exist, as expected

***Fixing error manually***

*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4: <CURSOR>

*** End of source buffer ***

***Testing state***


7 stored utterances, as expected


7 recently dictated utterances, as expected



>>> Testing console command: say(['excess', 'equals', 'one', 'new', 'line'], user_input='0
')
Heard excess equals one new line
  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['back indent'], user_input='')
Heard back indent
  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['results', 'at', 'index', 'zero', 'jump', 'out', 'equals', 'zero'], user_input='0
')
Heard results at index zero jump out equals zero
  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: results[0] = 0<CURSOR>

*** End of source buffer ***

***Testing state***


10 stored utterances, as expected


10 recently dictated utterances, as expected


***Testing symbol addition***

symbol excess has spoken forms ['excess']
symbol results has spoken forms ['results']

***Testing scratch that***

scratching 1

  2:     def popularity(self):
  3:         return 8
  4: excess = 1
  5: <CURSOR>

*** End of source buffer ***
scratch 1 succeeded as expected

***Testing state***


9 stored utterances, as expected


9 recently dictated utterances, as expected


***Testing symbol removal***

symbol results did not exist, as expected

***Testing correction after scratch that***

detecting changes
utterance 2: change = {'excess': 'success'}
word excess being replaced with success
utterance 2 was changed 
utterance 2 was corrected
about to reinterpret
*** Start of source buffer ***
  1: class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4: <CURSOR>

*** End of source buffer ***
  2:     def popularity(self):
  3:         return 8
  4: success = 1
  5: <CURSOR>

*** End of source buffer ***
  2:     def popularity(self):
  3:         return 8
  4: success = 1
  5: <CURSOR>

*** End of source buffer ***

all utterances from 2 to the present
were reinterpreted, as expected


***Testing state***


9 stored utterances, as expected


9 recently dictated utterances, as expected


***Testing symbol addition***

symbol success has spoken forms ['success']

***Testing symbol removal***

symbol excess did not exist, as expected

Testing correction and formatting state:



>>> Testing console command: say(['new', 'statement'], user_input='0
')
Heard new statement
  3:         return 8
  4: success = 1
  5: 
  6: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['new', 'class'], user_input='')
Heard new class
  3:         return 8
  4: success = 1
  5: 
  6: class <CURSOR>:
  7:     

*** End of source buffer ***


>>> Testing console command: say(['red', 'brick'], user_input='0
')
Heard red brick
  3:         return 8
  4: success = 1
  5: 
  6: class RedBrick<CURSOR>:
  7:     

*** End of source buffer ***

***Testing state***


12 stored utterances, as expected


12 recently dictated utterances, as expected


***Testing scratch that***

scratching 1

  3:         return 8
  4: success = 1
  5: 
  6: class <CURSOR>:
  7:     

*** End of source buffer ***
scratch 1 succeeded as expected

***new class name should still be in HungarianNotation***



>>> Testing console command: say(['red', 'book'], user_input='0
')
Heard red book
  3:         return 8
  4: success = 1
  5: 
  6: class RedBook<CURSOR>:
  7:     

*** End of source buffer ***

***Testing state***


12 stored utterances, as expected


12 recently dictated utterances, as expected



>>> Testing console command: say(['class', 'body'], user_input='0
')
Heard class body
  4: success = 1
  5: 
  6: class RedBook:
  7:     <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['define', 'method'], user_input='')
Heard define method
  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***


>>> Testing console command: say(['lower', 'Hungarian'], user_input='')
Heard lower Hungarian
  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***


>>> Testing console command: say(['act', 'up'], user_input='')
Heard act up
  4: success = 1
  5: 
  6: class RedBook:
  7:     def actUp<CURSOR>(self):
  8:         

*** End of source buffer ***

***Testing state***


16 stored utterances, as expected


16 recently dictated utterances, as expected


***Testing symbol addition and formatting**

symbol actUp has spoken forms ['act up']

***Testing correction***

detecting changes
utterance 1: change = {'up': 'out'}
word up being replaced with out
utterance 1 was changed 
utterance 1 was corrected
about to reinterpret
  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***
  4: success = 1
  5: 
  6: class RedBook:
  7:     def actOut<CURSOR>(self):
  8:         

*** End of source buffer ***

all utterances from 1 to the present
were reinterpreted, as expected


***Testing state***


16 stored utterances, as expected


16 recently dictated utterances, as expected


***Testing symbol removal on correction***

symbol actUp did not exist, as expected

***Testing symbol addition and formatting**

symbol actOut has spoken forms ['act out']

***Moving cursor manually***

*** Start of source buffer ***
  1: <CURSOR>class Clown(Student):
  2:     def popularity(self):
  3:         return 8
  4: success = 1

***Testing scratching of manual styling***

scratching 2

  4: success = 1
  5: 
  6: class RedBook:
  7:     def <CURSOR>(self):
  8:         

*** End of source buffer ***
scratch 2 succeeded as expected
scratched: 
['act', 'out']
['lower', 'Hungarian']

***Testing symbol removal on correction***

symbol actOut did not exist, as expected


>>> Testing console command: say(['act', 'out'], user_input='')
Heard act out
  4: success = 1
  5: 
  6: class RedBook:
  7:     def act_out<CURSOR>(self):
  8:         

*** End of source buffer ***

***Testing state***


15 stored utterances, as expected


15 recently dictated utterances, as expected


***Testing symbol addition and formatting**

symbol act_out has spoken forms ['act out']

***Testing reformatting of a new symbol to another new symbol***



>>> Testing console command: say(['new', 'statement', 'return', 'size', 'of', 'promised', 'tax', 'cuts'], user_input='0
')
Heard new statement return size of promised tax cuts
  5: 
  6: class RedBook:
  7:     def act_out(self):
  8:         return size_of_promised_tax_cuts<CURSOR>
  9:         

*** End of source buffer ***
Checking that 'excess' is not in recent symbols anymore:

Recent interpreted symbols were: 
   written as: 'success', spoken as: '['success']'
   written as: 'RedBook', spoken as: '['red', 'book']'
   written as: 'act_out', spoken as: '['act', 'out']'
   written as: 'size_of_promised_tax_cuts', spoken as: '['size', 'of', 'promised', 'tax', 'cuts']'
  4: success = 1
  5: 
  6: class RedBook:
  7:     def act_out<CURSOR>(self):
  8:         

*** End of source buffer ***
  5: 
  6: class RedBook:
  7:     def act_out(self):
  8:         return sz_of_prom_tax_cuts<CURSOR>
  9:         

*** End of source buffer ***

***Testing state***


16 stored utterances, as expected


16 recently dictated utterances, as expected


***Testing tentative symbol removal and correct symbol addition on correction***

symbol size_of_promised_tax_cuts has spoken forms ['size of promised tax cuts']
symbol sz_of_prom_tax_cuts has spoken forms ['size of promised tax cuts', 'S. Z. of prom tax cuts', 'SZ of prom tax cuts']

***Testing subsequent dictation of reformatted symbol***



>>> Testing console command: say(['new', 'statement', 'size', 'of', 'promised', 'tax', 'cuts', 'equals', 'zero'], user_input='0
')
Heard new statement size of promised tax cuts equals zero
  6: class RedBook:
  7:     def act_out(self):
  8:         return sz_of_prom_tax_cuts
  9:     sz_of_prom_tax_cuts = 0<CURSOR>
 10:         

*** End of source buffer ***

***Testing reformatting of an existing symbol to a new symbol***

symbol RedBook has spoken forms ['red book']
symbol red_bk did not exist, as expected


>>> Testing console command: say(['new', 'statement', 'red', 'book', 'equals', 'none'], user_input='0
')
Heard new statement red book equals none
  7:     def act_out(self):
  8:         return sz_of_prom_tax_cuts
  9:     sz_of_prom_tax_cuts = 0
 10:     RedBook = None<CURSOR>
 11:         

*** End of source buffer ***
  6: class RedBook:
  7:     def act_out(self):
  8:         return sz_of_prom_tax_cuts
  9:     sz_of_prom_tax_cuts = 0<CURSOR>
 10:         

*** End of source buffer ***
  7:     def act_out(self):
  8:         return sz_of_prom_tax_cuts
  9:     sz_of_prom_tax_cuts = 0
 10:     red_bk = None<CURSOR>
 11:         

*** End of source buffer ***

***Testing state***


18 stored utterances, as expected


18 recently dictated utterances, as expected


***Testing correct new symbol addition on correction***

symbol RedBook has spoken forms ['red book']
symbol red_bk has spoken forms ['red book', 'red B. K.', 'red BK']

***Testing subsequent dictation of reformatted symbol***



>>> Testing console command: say(['new', 'statement', 'red', 'book', 'equals', 'zero'], user_input='0
')
Heard new statement red book equals zero
  8:         return sz_of_prom_tax_cuts
  9:     sz_of_prom_tax_cuts = 0
 10:     red_bk = None
 11:     red_bk = 0<CURSOR>
 12:         

*** End of source buffer ***

***Testing reformatting of an existing symbol to an other existing symgol ***

symbol BlueBook has spoken forms ['blue book']
symbol blue_bk has spoken forms ['blue book', 'blue B. K.', 'blue BK']


>>> Testing console command: say(['new', 'statement', 'blue', 'book', 'equals', 'none'], user_input='0
')
Heard new statement blue book equals none
  9:     sz_of_prom_tax_cuts = 0
 10:     red_bk = None
 11:     red_bk = 0
 12:     BlueBook = None<CURSOR>
 13:         

*** End of source buffer ***
  8:         return sz_of_prom_tax_cuts
  9:     sz_of_prom_tax_cuts = 0
 10:     red_bk = None
 11:     red_bk = 0<CURSOR>
 12:         

*** End of source buffer ***
  9:     sz_of_prom_tax_cuts = 0
 10:     red_bk = None
 11:     red_bk = 0
 12:     blue_bk = None<CURSOR>
 13:         

*** End of source buffer ***

***Testing state***


20 stored utterances, as expected


20 recently dictated utterances, as expected


WARNING: status of utterance 13 (['success', 'equals', 'one', 'new', 'line']) was 0 (expected 1)

***Checking that both symbols are still there***

symbol BlueBook has spoken forms ['blue book']
symbol blue_bk has spoken forms ['blue book', 'blue B. K.', 'blue BK']

***Testing subsequent dictation of reformatted symbol***



>>> Testing console command: say(['new', 'statement', 'blue', 'book', 'equals', 'zero'], user_input='0
')
Heard new statement blue book equals zero
 10:     red_bk = None
 11:     red_bk = 0
 12:     blue_bk = None
 13:     blue_bk = 0<CURSOR>
 14:         

*** End of source buffer ***

***Testing reformatting of a new symbol to a existing one ***

symbol osym has spoken forms ['O. symbol', 'osym']
symbol other_symbol did not exist, as expected


>>> Testing console command: say(['new', 'statement', 'other', 'symbol', 'equals', 'zero'], user_input='0
')
Heard new statement other symbol equals zero
 11:     red_bk = 0
 12:     blue_bk = None
 13:     blue_bk = 0
 14:     other_symbol = 0<CURSOR>
 15:         

*** End of source buffer ***
 10:     red_bk = None
 11:     red_bk = 0
 12:     blue_bk = None
 13:     blue_bk = 0<CURSOR>
 14:         

*** End of source buffer ***
 11:     red_bk = 0
 12:     blue_bk = None
 13:     blue_bk = 0
 14:     osym = 0<CURSOR>
 15:         

*** End of source buffer ***

***Testing state***


## AD: Is there an issue with the warnings below?##


22 stored utterances, as expected


22 recently dictated utterances, as expected


WARNING: status of utterance 12 (['new', 'class']) was 0 (expected 1)

WARNING: status of utterance 13 (['new', 'statement']) was 0 (expected 1)

WARNING: status of utterance 14 (['back indent']) was 0 (expected 1)

WARNING: status of utterance 15 (['success', 'equals', 'one', 'new', 'line']) was 0 (expected 1)

***Checking that tentative new symbol was removed ***

symbol osym has spoken forms ['O. symbol', 'osym', 'other symbol']
symbol other_symbol has spoken forms ['other symbol']

***Testing subsequent dictation of reformatted symbol***



>>> Testing console command: say(['new', 'statement', 'other', 'symbol', 'equals', 'one'], user_input='0
')
Heard new statement other symbol equals one
 12:     blue_bk = None
 13:     blue_bk = 0
 14:     osym = 0
 15:     osym = 1<CURSOR>
 16:         

*** End of source buffer ***

***Testing that symbol reformatting with empty list of reformattings does not cause a crash***



*******************************************************************************
* Name        : beg_end_of_line
* Description : Testing methods for going to the beginning or end of a line.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['line', 'one', 'new', 'statement', 'line', 'two', 'new', 'statement', 'line', 'three']
Heard line one new statement line two new statement line three
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: <CURSOR>line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: <CURSOR>line3

*** End of source buffer ***
Got command: move_relative(-1,)
*** Start of source buffer ***
  1: line1
  2: line2<CURSOR>
  3: line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: <CURSOR>line2
  3: line3

*** End of source buffer ***
Got command: move_relative(3,)
*** Start of source buffer ***
  1: line1
  2: lin<CURSOR>e2
  3: line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: <CURSOR>line2
  3: line3

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>line1
  2: line2
  3: line3

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: <CURSOR>line1
  2: line2
  3: line3

*** End of source buffer ***
WARNING: source file 'blah2.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['line', 'one', 'new', 'statement', 'line', 'two', 'new', 'statement', 'line', 'three']
Heard line one new statement line two new statement line three
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>line1
  2: line2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1<CURSOR>
  2: line2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1<CURSOR>
  2: line2
  3: line3

*** End of source buffer ***
Got command: move_relative(1,)
*** Start of source buffer ***
  1: line1
  2: <CURSOR>line2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2<CURSOR>
  3: line3

*** End of source buffer ***
Got command: move_relative(-3,)
*** Start of source buffer ***
  1: line1
  2: li<CURSOR>ne2
  3: line3

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2<CURSOR>
  3: line3

*** End of source buffer ***
Got command: goto(17,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: line1
  2: line2
  3: line3<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : blank_line_context
* Description : Testing commands that have a special meaning only a a blank line
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['for', 'do', 'the', 'following']
Heard for do the following
*** Start of source buffer ***
  1: for :
  2:     <CURSOR>

*** End of source buffer ***
Saying: ['security', 'level', 'equals', 'for', 'your', 'eyes', 'only', 'new', 'statement', 'back', 'indent']
Heard security level equals for your eyes only new statement back indent
*** Start of source buffer ***
  1: for :
  2:     security_level = for_your_eyes_only
  3: <CURSOR>

*** End of source buffer ***
Saying: ['while', 'loop', 'one', 'do', 'the', 'following']
Heard while loop one do the following
*** Start of source buffer ***
  1: for :
  2:     security_level = for_your_eyes_only
  3: while 1:
  4:     <CURSOR>

*** End of source buffer ***
Saying: ['when', 'equals', 'while', 'processing', 'new', 'statement']
Heard when equals while processing new statement
  2:     security_level = for_your_eyes_only
  3: while 1:
  4:     when = while_processing
  5:     <CURSOR>

*** End of source buffer ***
Saying: ['if', 'condition', 'do', 'the', 'following']
Heard if condition do the following
  3: while 1:
  4:     when = while_processing
  5:     if condition:
  6:         <CURSOR>

*** End of source buffer ***
Saying: ['check', 'equals', 'if', 'all', 'right', 'without', 'arguments', 'new', 'statement']
Heard check equals if all right without arguments new statement
  4:     when = while_processing
  5:     if condition:
  6:         check = if_all_right()
  7:         <CURSOR>

*** End of source buffer ***
Saying: ['back', 'indent', 'back', 'indent']
Heard back indent back indent
  4:     when = while_processing
  5:     if condition:
  6:         check = if_all_right()
  7: <CURSOR>

*** End of source buffer ***
Saying: ['class', 'some', 'class', 'class', 'body']
Heard class some class class body
  5:     if condition:
  6:         check = if_all_right()
  7: class SomeClass:
  8:     <CURSOR>

*** End of source buffer ***
Saying: ['try']
Heard try
  6:         check = if_all_right()
  7: class SomeClass:
  8:     try:
  9:         <CURSOR>

*** End of source buffer ***
Saying: ['flag', 'equals', 'did', 'try', 'new', 'statement']
Heard flag equals did try new statement
  7: class SomeClass:
  8:     try:
  9:         flag = did_try
 10:         <CURSOR>

*** End of source buffer ***
Saying: ['the', 'next', 'ones', 'still', 'present', 'bugs', 'new', 'statement']
Heard the next ones still present bugs new statement
  8:     try:
  9:         flag = did_try
 10:         the_next_ones_still_present_bugs
 11:         <CURSOR>

*** End of source buffer ***
Saying: ['check', 'if', 'was', 'done', 'without', 'arguments', 'new', 'statement']
Heard check if was done without arguments new statement
  9:         flag = did_try
 10:         the_next_ones_still_present_bugs
 11:         check_if_was_done()
 12:         <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : change_direction
* Description : testing changing direction of last command
*******************************************************************************



>>> Testing console command: open_file(r'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\large_buff.py')

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['again'])

Heard again
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


>>> Testing console command: say(['again'])

Heard again
 13: 
 14:     - safe attribute setting
 15:     - deep constructor
 16:     - <CURSOR>pretty printing???
 17:     
 18: 
 19:     **SAFE ATTRIBUTE SETTING***


>>> Testing console command: say(['previous one'])

Heard previous one
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


>>> Testing console command: say(['previous one'])

Heard previous one
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['next', 'one'])

Heard next one
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


*******************************************************************************
* Name        : commands_that_set_format_of_subsequent_symbols
* Description : Testing commands that specify formatting of subsequent symbols.
*******************************************************************************

Testing Python commands.
WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['class', 'some', 'python', 'class', 'inherits', 'from', 'some', 'python', 'super', 'class'], user_input='None')
Heard class some python class inherits from some python super class
*** Start of source buffer ***
  1: class SomePythonClass(SomePythonSuperClass<CURSOR>):
  2:     

*** End of source buffer ***
Testing C++ commands.
WARNING: source file 'blah.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['class', 'some', 'Cclass', 'inherits', 'from', 'some', 'C', 'super', 'class'], user_input='None')
Heard class some Cclass inherits from some C super class
*** Start of source buffer ***
  1: class SomeCclass: SomeCSuperclass <CURSOR>
  2: {
  3: 
  4: public:


*******************************************************************************
* Name        : compile_symbols
* Description : Testing voice command for compiling symbols
*******************************************************************************

*** Start of source buffer ***
  1: <CURSOR># This is a small test buffer for Python
  2: 
  3: 
  4: 
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'
Before compiling symbols, symbols are:

THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  type  
Heard compile symbols
Compiling symbols for None
Done compiling symbols
*** Start of source buffer ***
  1: <CURSOR># This is a small test buffer for Python
  2: 
  3: 
  4: 
After compiling symbols, symbols are:

AClass: ['A. class', 'a class']
ASuper: ['A. super', 'a super']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
a_method: ['A. method', 'a method']
class: ['class']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
print: ['print']
self: ['self']
x: ['X.']
_cached_symbols_as_one_string[a] is:
    AClass  ASuper  __abs__  a_method  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  class  cos  cosh  
_cached_symbols_as_one_string[d] is:
    def  
_cached_symbols_as_one_string[p] is:
    print  
_cached_symbols_as_one_string[s] is:
    self  sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  type  
_cached_symbols_as_one_string[x] is:
    x  


*******************************************************************************
* Name        : dummy_grammars
* Description : Testing WinGramMgr grammar management with dummy grammars.
*******************************************************************************

EdSim.__init__
SourceBuff.__init__: 
new buffer fish.C
with window 5
SourceBuff.__init__: fish.C
SelectWinGramDummy for buffer None, window 5
init
SymbolReformattingWinGramDummy for window = window 5
init
DictWinGramDummy for buffer = 'fish.C', window 5
init
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
init
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
init
new buffer fowl.py
with window 5
SourceBuff.__init__: fowl.py
DictWinGramDummy for buffer = 'fowl.py', window 5
init
DictThroughCmdGramDummy for buffer = 'fowl.py', window 5
init
DictThroughCmdGramDummy for buffer = 'fowl.py', window 5
init
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
DictWinGramDummy for buffer = 'fowl.py', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'fowl.py', window 5
deactivating
SelectWinGramDummy for buffer 'fish.C', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'fish.C', window 5
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
activating:  5  
new window 7
SelectWinGramDummy for buffer None, window 7
init
SymbolReformattingWinGramDummy for window = window 7
init
new buffer dog.pl
with window 7
SourceBuff.__init__: dog.pl
DictWinGramDummy for buffer = 'dog.pl', window 7
init
DictThroughCmdGramDummy for buffer = 'dog.pl', window 7
init
DictThroughCmdGramDummy for buffer = 'dog.pl', window 7
init
new buffer fish.h
with window 7
SourceBuff.__init__: fish.h
DictWinGramDummy for buffer = 'fish.h', window 7
init
DictThroughCmdGramDummy for buffer = 'fish.h', window 7
init
DictThroughCmdGramDummy for buffer = 'fish.h', window 7
init
activating buffer dog.pl for window 7
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'fish.h', window 7
deactivating
DictThroughCmdGramDummy for buffer = 'fish.h', window 7
deactivating
SelectWinGramDummy for buffer 'dog.pl', window 7
activating:  7  
SymbolReformattingWinGramDummy for window = window 7
activating:  7  
DictWinGramDummy for buffer = 'dog.pl', window 7
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 7
activating:  7  
DictThroughCmdGramDummy for buffer = 'dog.pl', window 7
activating:  7  
activating buffer fish.h for window 7
*** Start of source buffer ***
  1: void move(float x, y);<CURSOR>
  2: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'dog.pl', window 7
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 7
deactivating
SelectWinGramDummy for buffer 'fish.h', window 7
activating:  7  
SymbolReformattingWinGramDummy for window = window 7
activating:  7  
DictWinGramDummy for buffer = 'fish.h', window 7
setting context: before = [ x, y);], after = [
]
DictWinGramDummy for buffer = 'fish.h', window 7
activating:  7  
DictThroughCmdGramDummy for buffer = 'fish.h', window 7
activating:  7  
activating buffer fowl.py for window 5
*** Start of source buffer ***
  1: import sys
  2: 
  3: def something(value):
  4:     print <CURSOR>value
  5: 
  6: if __name__ == '__main__':
  7:     something('nice')
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
deactivating
SelectWinGramDummy for buffer 'fowl.py', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'fowl.py', window 5
setting context: before = [ something(value):
    print ], after = [value]
DictWinGramDummy for buffer = 'fowl.py', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'fowl.py', window 5
activating:  5  
SourceBuff.remove_other_references: fowl.py
SourceBuff.__del__: fowl.py
close buffer fowl.py
DictWinGramDummy for buffer = 'fowl.py', window 5
del
DictThroughCmdGramDummy for buffer = 'fowl.py', window 5
del
deactivate all for window 5
SelectWinGramDummy for buffer 'fowl.py', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
deactivating
delete window 7
SelectWinGramDummy for buffer 'fish.h', window 7
deactivating
SymbolReformattingWinGramDummy for window = window 7
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 7
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 7
deactivating
DictWinGramDummy for buffer = 'fish.h', window 7
deactivating
DictThroughCmdGramDummy for buffer = 'fish.h', window 7
deactivating
SelectWinGramDummy for buffer 'fish.h', window 7
del
SymbolReformattingWinGramDummy for window = window 7
del
DictWinGramDummy for buffer = 'fish.h', window 7
del
DictThroughCmdGramDummy for buffer = 'fish.h', window 7
del
DictWinGramDummy for buffer = 'dog.pl', window 7
del
DictThroughCmdGramDummy for buffer = 'dog.pl', window 7
del
SourceBuff.remove_other_references: dog.pl
SourceBuff.__del__: dog.pl
close buffer dog.pl
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
SelectWinGramDummy for buffer 'fish.C', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'fish.C', window 5
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
activating:  5  
deactivate all
SelectWinGramDummy for buffer 'fish.C', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
deactivating
close all buffers
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.remove_other_references: fish.C
SourceBuff.__del__: fish.C
SourceBuff.remove_other_references: fish.h
SourceBuff.__del__: fish.h
cleanup app
EdSim.remove_other_references
cleanup manager
SelectWinGramDummy for buffer 'fish.C', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'fish.C', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
del
SelectWinGramDummy for buffer 'fish.C', window 5
del
DictThroughCmdGramDummy for buffer = 'fish.C', window 5
del
DictWinGramDummy for buffer = 'fish.C', window 5
del
test ending - expect dels of manager, app
EdSim.__del__


*******************************************************************************
* Name        : dummy_grammars_global
* Description : Testing WinGramMgr grammar management with global, exclusive dummy grammars.
*******************************************************************************

EdSim.__init__
SourceBuff.__init__: 
new buffer fish.C
with window 5
SourceBuff.__init__: fish.C
SelectWinGramDummy for buffer None, global
init
SymbolReformattingWinGramDummy for window = global
init
DictWinGramDummy for buffer = 'fish.C', global
init
DictThroughCmdGramDummy for buffer = 'fish.C', global
init
DictThroughCmdGramDummy for buffer = 'fish.C', global
init
new buffer fowl.py
with window 5
SourceBuff.__init__: fowl.py
DictWinGramDummy for buffer = 'fowl.py', global
init
DictThroughCmdGramDummy for buffer = 'fowl.py', global
init
DictThroughCmdGramDummy for buffer = 'fowl.py', global
init
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
DictWinGramDummy for buffer = 'fowl.py', global
deactivating
DictThroughCmdGramDummy for buffer = 'fowl.py', global
deactivating
SelectWinGramDummy for buffer 'fish.C', global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'fish.C', global
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'fish.C', global
activating:  global  exclusive 

new window 7
SelectWinGramDummy for buffer None, global
init
SymbolReformattingWinGramDummy for window = global
init
new buffer dog.pl
with window 7
SourceBuff.__init__: dog.pl
DictWinGramDummy for buffer = 'dog.pl', global
init
DictThroughCmdGramDummy for buffer = 'dog.pl', global
init
DictThroughCmdGramDummy for buffer = 'dog.pl', global
init
new buffer fish.h
with window 7
SourceBuff.__init__: fish.h
DictWinGramDummy for buffer = 'fish.h', global
init
DictThroughCmdGramDummy for buffer = 'fish.h', global
init
DictThroughCmdGramDummy for buffer = 'fish.h', global
init
activating buffer dog.pl for window 7
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'fish.h', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fowl.py', global
deactivating
DictThroughCmdGramDummy for buffer = 'fowl.py', global
deactivating
SelectWinGramDummy for buffer 'dog.pl', global
activating:  global  exclusive 

SelectWinGramDummy for buffer 'fish.C', global
deactivating
SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'dog.pl', global
activating:  global  exclusive 

activating buffer fish.h for window 7
*** Start of source buffer ***
  1: void move(float x, y);<CURSOR>
  2: 

*** End of source buffer ***
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fowl.py', global
deactivating
DictThroughCmdGramDummy for buffer = 'fowl.py', global
deactivating
SelectWinGramDummy for buffer 'fish.h', global
activating:  global  exclusive 

SelectWinGramDummy for buffer 'fish.C', global
deactivating
SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
setting context: before = [ x, y);], after = [
]
DictWinGramDummy for buffer = 'fish.h', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'fish.h', global
activating:  global  exclusive 

activating buffer fowl.py for window 5
*** Start of source buffer ***
  1: import sys
  2: 
  3: def something(value):
  4:     print <CURSOR>value
  5: 
  6: if __name__ == '__main__':
  7:     something('nice')
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.h', global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', global
deactivating
SelectWinGramDummy for buffer 'fowl.py', global
activating:  global  exclusive 

SelectWinGramDummy for buffer 'fish.h', global
deactivating
SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'fowl.py', global
setting context: before = [ something(value):
    print ], after = [value]
DictWinGramDummy for buffer = 'fowl.py', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'fowl.py', global
activating:  global  exclusive 

SourceBuff.remove_other_references: fowl.py
SourceBuff.__del__: fowl.py
close buffer fowl.py
DictWinGramDummy for buffer = 'fowl.py', global
del
DictThroughCmdGramDummy for buffer = 'fowl.py', global
del
deactivate all for window 5
SelectWinGramDummy for buffer 'fowl.py', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', global
deactivating
SelectWinGramDummy for buffer 'fish.h', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.h', global
deactivating
delete window 7
SelectWinGramDummy for buffer 'fish.h', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'dog.pl', global
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', global
deactivating
DictWinGramDummy for buffer = 'fish.h', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.h', global
deactivating
SelectWinGramDummy for buffer 'fish.h', global
del
SymbolReformattingWinGramDummy for window = global
del
DictWinGramDummy for buffer = 'fish.h', global
del
DictThroughCmdGramDummy for buffer = 'fish.h', global
del
DictWinGramDummy for buffer = 'dog.pl', global
del
DictThroughCmdGramDummy for buffer = 'dog.pl', global
del
SourceBuff.remove_other_references: dog.pl
SourceBuff.__del__: dog.pl
close buffer dog.pl
activating buffer fish.C for window 5
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;
SelectWinGramDummy for buffer 'fish.C', global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'fish.C', global
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'fish.C', global
activating:  global  exclusive 

deactivate all
SelectWinGramDummy for buffer 'fish.C', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', global
deactivating
close all buffers
SourceBuff.remove_other_references: 
SourceBuff.__del__: 
SourceBuff.remove_other_references: fish.C
SourceBuff.__del__: fish.C
SourceBuff.remove_other_references: fish.h
SourceBuff.__del__: fish.h
cleanup app
EdSim.remove_other_references
cleanup manager
SelectWinGramDummy for buffer 'fish.C', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'fish.C', global
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', global
deactivating
SymbolReformattingWinGramDummy for window = global
del
SelectWinGramDummy for buffer 'fish.C', global
del
DictThroughCmdGramDummy for buffer = 'fish.C', global
del
DictWinGramDummy for buffer = 'fish.C', global
del
test ending - expect dels of manager, app
EdSim.__del__


*******************************************************************************
* Name        : explicit_indent
* Description : Testing explicit indentation.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['if', 'condition', 'do', 'the', 'following']
Heard if condition do the following
*** Start of source buffer ***
  1: if condition:
  2:     <CURSOR>

*** End of source buffer ***
Saying: ['back', 'indent']
Heard back indent
*** Start of source buffer ***
  1: if condition:
  2: <CURSOR>

*** End of source buffer ***
Saying: ['index', 'equals', 'one', 'do', 'the', 'following']
Heard index equals one do the following
*** Start of source buffer ***
  1: if condition:
  2: index = 1<CURSOR>

*** End of source buffer ***
Saying: ['indent']
Heard indent
*** Start of source buffer ***
  1: if condition:
  2:     index = 1<CURSOR>

*** End of source buffer ***
Got command: move_relative(-3,)
*** Start of source buffer ***
  1: if condition:
  2:     index <CURSOR>= 1

*** End of source buffer ***
Saying: ['back', 'indent']
Heard back indent
*** Start of source buffer ***
  1: if condition:
  2: <CURSOR>index = 1

*** End of source buffer ***
Got command: move_relative(3,)
*** Start of source buffer ***
  1: if condition:
  2: ind<CURSOR>ex = 1

*** End of source buffer ***
Saying: ['indent']
Heard indent
*** Start of source buffer ***
  1: if condition:
  2:     ind<CURSOR>ex = 1

*** End of source buffer ***


*******************************************************************************
* Name        : inserted_text
* Description : Test of new reporting system for inserted text
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
inserting 'x = 3'
*** Start of source buffer ***
  1: x = 3<CURSOR>

*** End of source buffer ***
text: range: 0 5, text = 'x = 3'
inserting '\n'
*** Start of source buffer ***
  1: x = 3
  2: <CURSOR>

*** End of source buffer ***
text: range: 5 6, text = '\n'
inserting 'if ', ':\n\t'
*** Start of source buffer ***
  1: x = 3
  2: if <CURSOR>:
  3:     

*** End of source buffer ***
before cursor: range: 6 9, text = 'if '
after_cursor: range: 9 15, text = ':\n    '
inserting 'x > 2', ''
*** Start of source buffer ***
  1: x = 3
  2: if x > 2<CURSOR>:
  3:     

*** End of source buffer ***
before cursor: range: 9 14, text = 'x > 2'
after_cursor: (no block)
inserting 'multi()', ''
*** Start of source buffer ***
  1: x = 3
  2: if x > 2:
  3:     multi()<CURSOR>

*** End of source buffer ***
before cursor: range: 20 27, text = 'multi()'
after_cursor: (no block)
inserting '\nelif ', ':\n\t'
*** Start of source buffer ***
  1: x = 3
  2: if x > 2:
  3:     multi()
  4: elif <CURSOR>:
  5:     

*** End of source buffer ***
before cursor: range: 27 33, text = '\nelif '
after_cursor: range: 33 39, text = ':\n    '
inserting 'x == 1', ''
*** Start of source buffer ***
  1: x = 3
  2: if x > 2:
  3:     multi()
  4: elif x == 1<CURSOR>:
  5:     

*** End of source buffer ***
before cursor: range: 33 39, text = 'x == 1'
after_cursor: (no block)
inserting 'solitaire()', ''
  2: if x > 2:
  3:     multi()
  4: elif x == 1:
  5:     solitaire()<CURSOR>

*** End of source buffer ***
before cursor: range: 45 56, text = 'solitaire()'
after_cursor: (no block)
inserting '\nelse:\n', ''
  4: elif x == 1:
  5:     solitaire()
  6: else:
  7:     <CURSOR>

*** End of source buffer ***
before cursor: range: 56 67, text = '\nelse:\n    '
after_cursor: (no block)
inserting 'dual()', ''
  4: elif x == 1:
  5:     solitaire()
  6: else:
  7:     dual()<CURSOR>

*** End of source buffer ***
before cursor: range: 67 73, text = 'dual()'
after_cursor: (no block)


*******************************************************************************
* Name        : language_name
* Description : Testing language name of a buffer.
*******************************************************************************

WARNING: source file 'dummy.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

Language for this file is: python

WARNING: source file 'dummy.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

Language for this file is: C

WARNING: source file 'dummy.h' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

Language for this file is: C

WARNING: source file 'dummy.cpp' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

Language for this file is: C

WARNING: source file 'fileWithMultipleDots.InItsName.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***

Language for this file is: python



*******************************************************************************
* Name        : large_messages
* Description : Send a message that has more than 1024 character (length of a message chunk)
*******************************************************************************

WARNING: source file 'tmp.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>12345678
  2: 12345678
  3: 12345678
  4: 12345678


*******************************************************************************
* Name        : looking_at
* Description : Testing the looking at method.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['hello']
Heard hello
*** Start of source buffer ***
  1: hello<CURSOR>

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: <CURSOR>hello

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: hello<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : mediator_console
* Description : testing mediator console commands
*******************************************************************************



>>> Testing console command: clear_symbols()    

Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'


>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
List of abbreviations

'abs' expands to ['absolute']
'acos' expands to ['A. cos', 'arc cos', 'arc cosine']
'addr' expands to ['address']
'alnum' expands to ['alpha numeric']
'alt' expands to ['alternate', 'alternative']
'arg' expands to ['argument']
'argc' expands to ['arg C.', 'argument count']
'argv' expands to ['arg V.', 'argument value']
'asc' expands to ['ascii']
'asctime' expands to ['ascii time', 'ask time']
'asin' expands to ['A. sine', 'arc sine']
'asyn' expands to ['asynchronous']
'async' expands to ['asynchronous']
'atan' expands to ['arc tangent']
'atexit' expands to ['at exit']
'atof' expands to ['A. to F.']
'atoi' expands to ['A. to I.']
'atol' expands to ['A. to L.']
'attr' expands to ['attribute']
'avail' expands to ['available']
'avg' expands to ['average']
'beg' expands to ['begin', 'beginning']
'bg' expands to ['background']
'blk' expands to ['block', 'blocking']
'boolalpha' expands to ['Boole alpha', 'Boolean alpha']
'bsearch' expands to ['B. search']
'buf' expands to ['buffer']
'buff' expands to ['buffer']
'bufsiz' expands to ['buff size', 'buffer size']
'builtin' expands to ['built in']
'calc' expands to ['calculate', 'calculated', 'calculation']
'calloc' expands to ['C. Alloc', 'Cal lock']
'cbk' expands to ['callback']
'cerr' expands to ['C. error']
'cgi' expands to ['C. G. I.']
'char' expands to ['character']
'chg' expands to ['change', 'changed']
'chr' expands to ['character']
'clearerr' expands to ['clear error']
'clock_t' expands to ['clock type']
'clr' expands to ['clear']
'cmd' expands to ['command']
'cmp' expands to ['compare']
'cntrl' expands to ['control']
'col' expands to ['column']
'concat' expands to ['concatenate']
'cond' expands to ['condition']
'conf' expands to ['configuration', 'configure']
'config' expands to ['configuration', 'configure']
'conn' expands to ['connected']
'cont' expands to ['content', 'context']
'copyfmt' expands to ['copy F. M. T.', 'copy format']
'cos' expands to ['cosine']
'cpp' expands to ['C. plus plus']
'ctime' expands to ['C. time']
'ctl' expands to ['control']
'ctrl' expands to ['control']
'ctype' expands to ['C. type']
'cur' expands to ['current', 'cursor']
'curr' expands to ['current']
'db' expands to ['D. B.', 'data base']
'decl' expands to ['declaration', 'declare']
'def' expands to ['deaf', 'default', 'define', 'defined', 'definition']
'delim' expands to ['delimiter']
'dev' expands to ['device']
'dict' expands to ['dictionary']
'difftime' expands to ['diff time']
'dir' expands to ['direction', 'directory']
'div' expands to ['divide']
'div_t' expands to ['div type']
'dlg' expands to ['dialog']
'doc' expands to ['document', 'documentation']
'dom' expands to ['domain']
'dst' expands to ['distance']
'dtd' expands to ['D. T. D.']
'eback' expands to ['E. back']
'ecvt' expands to ['E. convert']
'egptr' expands to ['E. G. pointer', 'E. get pointer', 'egg pointer', 'end get pointer']
'elem' expands to ['element']
'ent' expands to ['entity', 'entry']
'env' expands to ['environment']
'environ' expands to ['environment']
'eol' expands to ['E. O. L.', 'end of line']
'epptr' expands to ['E. P. pointer', 'E. put pointer', 'end put pointer']
'erange' expands to ['E. range', 'error range']
'errno' expands to ['error no', 'error number']
'eval' expands to ['E. val', 'evaluate', 'evaluation']
'ex' expands to ['example']
'exc' expands to ['exception']
'exec' expands to ['executable', 'execute']
'expr' expands to ['expression']
'fclose' expands to ['F. close', 'file close']
'fct' expands to ['function']
'fcvt' expands to ['F. convert']
'feof' expands to ['F. E. O. F.', 'F. end of file', 'file E. O. F.', 'file end of file']
'ferror' expands to ['F. error', 'file error']
'fflush' expands to ['F. flush', 'file flush']
'fg' expands to ['foreground']
'fgetc' expands to ['F. get C.', 'file get C.', 'file get character']
'fgetpos' expands to ['F. get pause', 'F. get position', 'file get pause', 'file get position']
'fgets' expands to ['F. get S.', 'F. get string', 'F. gets', 'file get S.', 'file get string', 'file gets']
'fifo' expands to ['fie foe', 'first in first out']
'filebuf' expands to ['file buff', 'file buffer']
'fmod' expands to ['F. mod', 'float mod', 'float modulo']
'fmt' expands to ['format']
'fmtflags' expands to ['F. M. T. flags', 'format flags']
'fp' expands to ['file pointer']
'fpos' expands to ['F. pause', 'F. position', 'file pause']
'fpos_t' expands to ['F. pause type', 'F. position type', 'file pause type']
'fprintf' expands to ['F. print F.', 'F. print format', 'file print F.', 'file print format']
'fputc' expands to ['F. put C.', 'file put C.', 'file put character']
'fputchar' expands to ['F. put char', 'file put char', 'file put character']
'fputs' expands to ['F. put S.', 'F. puts', 'file put S.', 'file put string']
'frac' expands to ['fraction']
'fread' expands to ['file read']
'freopen' expands to ['F. reopen', 'file reopen', 'free open']
'frexp' expands to ['F. R. E. X. P.', 'float remainder exponent', 'fur exp']
'fscanf' expands to ['F. scan F.', 'file scan F.', 'file scan format']
'fseek' expands to ['F. seek', 'file seek']
'fsetpos' expands to ['F. set pause', 'file set pause', 'file set position']
'ftell' expands to ['F. tell', 'file tell']
'func' expands to ['function']
'fwrite' expands to ['F. write', 'file write']
'gbump' expands to ['G. bump', 'get bump']
'gcount' expands to ['G. count', 'get count']
'gcvt' expands to ['G. C. V. T.', 'G. convert']
'gen' expands to ['general', 'generic']
'getc' expands to ['get C.']
'getchar' expands to ['get char', 'get character']
'getenv' expands to ['get E. N. V.', 'get env', 'get environment']
'getline' expands to ['get line']
'getloc' expands to ['get LOC', 'get locale']
'getw' expands to ['get W.']
'gid' expands to ['G. I. D.', 'group I. D.']
'glob' expands to ['global']
'gmtime' expands to ['G. M. time', 'Greenwich mean time']
'goto' expands to ['go to']
'gptr' expands to ['G. pointer', 'get pointer']
'gr' expands to ['group']
'h' expands to ['H.']
'hex' expands to ['hexadecimal']
'horiz' expands to ['horizontal', 'horizontally']
'html' expands to ['H. T. M. L.']
'http' expands to ['H. T. T. P.']
'ifstream' expands to ['I. F. stream', 'if stream', 'input F. stream', 'input file stream']
'ign' expands to ['I. G. N.', 'ignore']
'imap' expands to ['I. map']
'impl' expands to ['implementation']
'inc' expands to ['include', 'increment']
'incl' expands to ['include', 'included']
'info' expands to ['information']
'init' expands to ['initial', 'initialize']
'inplace' expands to ['in place']
'ins' expands to ['insert']
'int' expands to ['integer']
'interp' expands to ['interpreter']
'intro' expands to ['introduction']
'io' expands to ['I. O.', 'input output']
'iofbf' expands to ['I. O. F. B. F.', 'I. O. full buff', 'I. O. fully buffered']
'iostate' expands to ['I. O. state']
'ip' expands to ['I. P.']
'isalnum' expands to ['is Al numb', 'is alphanumeric']
'isalpha' expands to ['is alpha', 'is alphabetic']
'iscntrl' expands to ['is control']
'isdigit' expands to ['is digit']
'isdst' expands to ['is D. S. T.', 'is daylight savings time']
'isgraph' expands to ['is graph', 'is graphical']
'islower' expands to ['is lower', 'is lowercase']
'isprint' expands to ['is print', 'is printable']
'ispunct' expands to ['is punctuation', 'is punked']
'isspace' expands to ['is space']
'istringstream' expands to ['I. string stream', 'input string stream']
'isupper' expands to ['is upper', 'is uppercase']
'isxdigit' expands to ['is X. digit', 'is hex digit', 'is hexadecimal digit']
'itoa' expands to ['I. to A.']
'iword' expands to ['I. word', 'integer word']
'l' expands to ['L.', 'length']
'lconv' expands to ['L. conv', 'locale conventions']
'ldbl' expands to ['L. D. B. L. ', 'L. double', 'long double']
'ldexp' expands to ['L. D. E. X. P.', 'L. D. exp', 'L. double E. X. P.', 'L. double exp', 'load double E. X. P.', 'load double exp']
'ldiv' expands to ['L. div', 'L. divide', 'long div', 'long divide']
'ldiv_t' expands to ['L. div type', 'L. divide type', 'long div type', 'long divide type']
'len' expands to ['length']
'lexicographical' expands to ['lexicographic']
'lfind' expands to ['L. find', 'linear find']
'ln' expands to ['line']
'lnk' expands to ['link']
'loc' expands to ['locate', 'location']
'localeconv' expands to ['locale conv', 'locale conventions']
'localtime' expands to ['local time']
'login' expands to ['log in']
'longjmp' expands to ['long jump']
'lsearch' expands to ['L. search', 'linear search']
'ltoa' expands to ['L. to A.']
'mant' expands to ['mantissa']
'max' expands to ['maximum']
'mday' expands to ['M. day', 'month day']
'mem' expands to ['memory']
'memchr' expands to ['mem Chir', 'memory char', 'memory character']
'memcmp' expands to ['mem comp', 'mem compare', 'memory comp', 'memory compare']
'memmove' expands to ['mem move', 'memory move']
'min' expands to ['minimum']
'mk' expands to ['make']
'mktime' expands to ['M. K. time', 'make time']
'mnt' expands to ['mount', 'mounted']
'mod' expands to ['mode', 'modified', 'modify']
'modf' expands to ['mod F.', 'mod float', 'modulo float']
'msec' expands to ['millisecond']
'msg' expands to ['message']
'mtime' expands to ['M. time']
'n' expands to ['N.']
'nam' expands to ['name']
'nntp' expands to ['N. N. T. P.']
'no' expands to ['number']
'noboolalpha' expands to ['no Boole alpha', 'no Boolean alpha']
'noshowbase' expands to ['no show base']
'noshowpoint' expands to ['no show point']
'noshowpos' expands to ['no show pause', 'no show position']
'noskipws' expands to ['no skip W. S.', 'no skip white space']
'nounitbuf' expands to ['no unit buff', 'no unit buffer']
'nouppercase' expands to ['no uppercase']
'num' expands to ['number']
'obj' expands to ['object']
'oct' expands to ['octal']
'offsetof' expands to ['offset of']
'ofstream' expands to ['O. F. stream', 'O. file stream', 'output F. stream', 'output file stream']
'openmode' expands to ['open mode']
'opt' expands to ['optimize', 'option', 'optional']
'os' expands to ['O. S.', 'operating system']
'osf' expands to ['O. S. F.']
'ostringstream' expands to ['O. string stream', 'output string stream']
'p' expands to ['P.']
'par' expands to ['parameter']
'param' expands to ['parameter']
'pat' expands to ['pattern']
'patt' expands to ['pattern']
'pbackfail' expands to ['P. back fail', 'put back fail']
'pbase' expands to ['P. base', 'put base']
'pbump' expands to ['P. bump', 'put bump']
'perm' expands to ['permission']
'perror' expands to ['P. error', 'put error']
'pkg' expands to ['package']
'pos' expands to ['position', 'positioning']
'posn' expands to ['position']
'pptr' expands to ['P. pointer', 'put pointer']
'prev' expands to ['previous']
'prof' expands to ['professional', 'profile', 'profiling']
'proto' expands to ['protocol', 'prototype']
'ptrdiff' expands to ['pointer diff']
'ptrdiff_t' expands to ['pointer diff type']
'pty' expands to ['P. T. Y.']
'pubimbue' expands to ['pub imbue', 'public imbue']
'pubseekoff' expands to ['pub seek off', 'pub seek offset', 'public seek off', 'public seek offset']
'pubseekpos' expands to ['pub seek pause', 'pub seek position', 'public seek pause', 'public seek position']
'pubsetbuf' expands to ['pub set buff', 'pub set buffer', 'public set buff', 'public set buffer']
'pubsync' expands to ['pub sync', 'public sync']
'punc' expands to ['punctuation']
'punct' expands to ['punctuation']
'putback' expands to ['put back']
'putc' expands to ['put C.']
'putchar' expands to ['put char', 'put character']
'putenv' expands to ['put env', 'put environment']
'putw' expands to ['put W.']
'pword' expands to ['P. word', 'pointer word']
'py' expands to ['P. Y.', 'pie', 'python']
'quot' expands to ['quotient']
'rand' expands to ['random']
'rd' expands to ['read']
'rdbuf' expands to ['read buff', 'read buffer']
'rdstate' expands to ['read state']
'readsome' expands to ['read some']
'rect' expands to ['rectangle']
'ref' expands to ['reference']
'reg' expands to ['regular', 'regular expression']
'regex' expands to ['regular expression']
'regexp' expands to ['regular expression']
'rel' expands to ['relative']
'repr' expands to ['represent', 'representation']
'req' expands to ['request']
'rexp' expands to ['regular expression']
'rgb' expands to ['R. G. B.']
'rm' expands to ['remove']
'sbumpc' expands to ['S. bump C.', 'S. bump char', 'stream bump C.', 'stream bump char']
'schar' expands to ['S. char', 'S. character', 'signed char', 'signed character']
'scr' expands to ['screen']
'sec' expands to ['second']
'seekdir' expands to ['seek dir', 'seek directory']
'seekg' expands to ['seek G.', 'seek get']
'seekoff' expands to ['seek off', 'seek offset']
'seekp' expands to ['seek P.', 'seek put']
'seekpos' expands to ['seek pause', 'seek position']
'sep' expands to ['separator']
'seq' expands to ['sequence']
'serv' expands to ['server']
'setbuf' expands to ['set buf', 'set buffer']
'setf' expands to ['set F.', 'set flag', 'set format']
'setg' expands to ['set G.', 'set get']
'setjmp' expands to ['set jump']
'setlocale' expands to ['set locale']
'setp' expands to ['set P.', 'set put']
'setstate' expands to ['set state']
'setvbuf' expands to ['set V. buff', 'set V. buffer']
'sgetc' expands to ['S. get C.', 'S. get char', 'stream get C.', 'stream get char']
'sgetn' expands to ['S. get N.', 'stream get N.']
'showbase' expands to ['show base']
'showmanyc' expands to ['show many C.', 'show many char']
'showpoint' expands to ['show point']
'showpos' expands to ['show pause', 'show position']
'shrt' expands to ['shirt', 'short']
'sig' expands to ['S. I. G.', 'sig', 'signal']
'sigabrt' expands to ['sig abort', 'signal abort']
'sigfpe' expands to ['sig F. P. E.', 'signal F. P. E.']
'sigill' expands to ['sig ill', 'sig illegal', 'signal ill', 'signal illegal']
'sigint' expands to ['sig int', 'sig interrupt', 'signal int', 'signal interrupt']
'sigsegv' expands to ['sig seg V.', 'sig segment V.', 'signal seg V.', 'signal segment violation']
'sigterm' expands to ['sig term', 'sig terminal', 'signal term', 'signal terminal']
'sin' expands to ['sine']
'sinh' expands to ['hyperbolic sine', 'sinch', 'sine H.']
'size_t' expands to ['size type']
'skipws' expands to ['skip W. S.', 'skip white space']
'smtp' expands to ['S. M. T. P.']
'snextc' expands to ['S. next C.', 'stream next C.', 'stream next char']
'sock' expands to ['socket']
'soundex' expands to ['sound X.']
'spc' expands to ['space']
'sprintf' expands to ['S. print F.', 'sprint F.', 'string print F.', 'string print format']
'sputbackc' expands to ['S. put back C.', 'S. put back char', 'stream put back C.', 'stream put back char']
'sputc' expands to ['S. put C.', 'S. put char', 'stream put C.', 'stream put char']
'sputn' expands to ['S. put N.', 'stream put N.']
'sqrt' expands to ['sqirt', 'square root']
'srand' expands to ['S. rand', 'S. random', 'seed rand', 'seed random']
'src' expands to ['source']
'srv' expands to ['server', 'service']
'sscanf' expands to ['S. scan F.', 'S. scan format', 'string scan F.', 'string scan format']
'stat' expands to ['static', 'statistics']
'std' expands to ['standard']
'stdarg' expands to ['S. T. D. arg', 'S. T. D. argument', 'standard arg', 'standard argument']
'stddef' expands to ['S. T. D. deaf', 'S. T. D. definitions', 'standard deaf', 'standard definitions']
'stderr' expands to ['S. T. D. error', 'standard error']
'stdin' expands to ['S. T. D. in', 'standard in', 'standard input']
'stdio' expands to ['S. T. D. I. O.', 'standard I. O.', 'studio']
'stdlib' expands to ['S. T. D. lib', 'S. T. D. library', 'standard lib', 'standard library']
'stdout' expands to ['S. T. D. out', 'standard out']
'str' expands to ['string']
'strcat' expands to ['stir cat', 'stir concat', 'stir concatenate', 'string cat', 'string concat', 'string concatenate']
'strchr' expands to ['stir Chir', 'stir char', 'stir character', 'string Chir', 'string char', 'string character']
'strcmp' expands to ['stir comp', 'stir compare', 'string comp', 'string compare']
'strcoll' expands to ['stir call', 'stir collate', 'string call', 'string collate']
'strcpy' expands to ['stir C. P. Y.', 'stir copy', 'string C. P. Y.', 'string copy']
'strcspn' expands to ['stir C. span', 'stir complementary span', 'string complementary span']
'strerror' expands to ['stir error', 'string error']
'strftime' expands to ['stir F. time', 'stir format time', 'string F. time', 'string format time']
'stringbuf' expands to ['string buff', 'string buffer']
'stringstream' expands to ['string stream']
'strlen' expands to ['stir Len', 'stir length', 'string Len', 'string length']
'strncat' expands to ['stern cat', 'string N. cat', 'string N. concat', 'string N. concatenate']
'strncmp' expands to ['stern comp', 'string N. comp', 'string N. compare']
'strncpy' expands to ['stern copy', 'string N. copy']
'strpbrk' expands to ['string P. break', 'string pointer break', 'strip bark', 'strip break']
'strrchr' expands to ['stir Chir', 'stir R. char', 'stir R. character', 'stir reverse char', 'stir reverse character', 'string R. char', 'string R. character', 'string archer', 'string reverse char', 'string reverse character']
'strspn' expands to ['stir span', 'string span']
'strstr' expands to ['stir stir', 'stir string', 'string stir', 'string string']
'strtod' expands to ['stir Todd', 'stir to D.', 'stir to double', 'string to D.', 'string to double']
'strtok' expands to ['stir talk', 'stir toke', 'stir token', 'string toke', 'string token']
'strtol' expands to ['stir tall', 'stir to L.', 'stir to long', 'string to L.', 'string to long']
'strtoul' expands to ['stir to U. L.', 'stir to unsigned long', 'stir tool', 'string to U. L.', 'string to unsigned long', 'string tool']
'strxfrm' expands to ['str X. form', 'str transform', 'string X. form', 'string transform']
'sub' expands to ['sub routine']
'sungetc' expands to ['stream unget C.', 'stream unget char', 'stream unget character', 'sun get C.']
'sym' expands to ['symbol']
'sync' expands to ['synchronize', 'synchronous']
'sys' expands to ['system']
'tanh' expands to ['hyperbolic tan', 'hyperbolic tangent', 'tan H.', 'tan hyperbolic']
'tellg' expands to ['tell G.', 'tell get']
'tellp' expands to ['tell P.', 'tell put']
'temp' expands to ['temporary']
'termid' expands to ['term I. D.', 'terminal I. D.']
'time_t' expands to ['time type']
'tmp' expands to ['temporary']
'tmpfile' expands to ['temp file', 'temporary file']
'tmpnam' expands to ['temp nam', 'temp name', 'temporary nam', 'temporary name']
'tmpname' expands to ['temp name', 'temporary name']
'tok' expands to ['token']
'tolower' expands to ['to lower', 'to lowercase']
'toupper' expands to ['to upper', 'to uppercase']
'trans' expands to ['transform', 'transformation', 'transition', 'translation', 'transport']
'tst' expands to ['test']
'tty' expands to ['T. T. Y.']
'uchar' expands to ['U. char', 'unsigned char', 'unsigned character']
'uflow' expands to ['U. flow']
'uid' expands to ['U. I. D.', 'user I. D.']
'ulong' expands to ['U. long', 'unsigned long']
'ultoa' expands to ['U. L. to A.', 'U. L. to ascii', 'unsigned long to A.', 'unsigned long to ascii']
'undef' expands to ['undefine', 'undefined']
'unget' expands to ['un get']
'ungetc' expands to ['un get C.', 'un get char', 'un get character']
'uniq' expands to ['unique']
'unitbuf' expands to ['unit buff', 'unit buffer']
'unsetf' expands to ['un set F.', 'un set flag', 'un set format']
'url' expands to ['U. R. L.']
'ushrt' expands to ['U. short', 'unsigned short']
'uu' expands to ['U. U.']
'va' expands to ['V. A.', 'var arg']
'val' expands to ['value']
'var' expands to ['variable']
'vert' expands to ['vertical', 'vertically']
'vfprintf' expands to ['V. F. print F.', 'V. file print F.', 'V. file print format', 'var F. print F.', 'var file print F.', 'var file print format']
'vprintf' expands to ['V. print F.', 'V. print format', 'var print F.', 'var print format']
'vsprintf' expands to ['V. S. print F.', 'V. string print F.', 'V. string print format', 'var S. print F.', 'var string print F.', 'var string print format']
'wday' expands to ['W. day', 'weekday']
'win' expands to ['window']
'xalloc' expands to ['X. Alloc', 'X. allocate', 'extensible Alloc', 'extensible allocate']
'xml' expands to ['X. M. L.']
'xor' expands to ['X. or', 'exclusive or']
'xsgetn' expands to ['X. S. get N.', 'X. stream get N.']
'xsputn' expands to ['X. S. put N.', 'X. stream put N.']
'yday' expands to ['Y. day', 'year day']


List of unresolved abbreviations



>>> Testing console command: compile_symbols([r'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
f_name: ['F. name']
f_name2: ['F. name 2']
float: ['float']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Testing console command: say(['for', 'loop', 'horiz_pos\\horizontal position', 'equals', '0\\zero', 'loop', 'body'], user_input='None')
Heard for loop horizontal position equals zero loop body
*** Start of source buffer ***
  1: for (horiz_pos = 0; ; )
  2: {
  3: <CURSOR>
  4: }
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select', 'horiz_pos\horizontal position', '=\equals'],  never_bypass_sr_recog=1)

Heard select horizontal position equals
*** Start of source buffer ***
  1: for (<SEL_START>horiz_pos =<SEL_END> 0; ; )
  2: {
  3: 
  4: }


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : misc_bugs
* Description : Testing a series of miscellaneous bugs that might reoccur.
*******************************************************************************



>>> Testing console command: open_file(r'blah.py')

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['<\less-than', '>\greater-than', '=\equal-sign'])

Heard less-than greater-than equal-sign
*** Start of source buffer ***
  1:  <  > =<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : navigation_within_buffer
* Description : unit testing navigation commands like page up/down etc.
*******************************************************************************

Heard yo page down
Heard do that again
Heard again two times
Heard yo page up
Heard do that again
Heard again two times
Heard go to end of line
Heard go to beginning of line
Heard yo top of file
Heard yo bottom of file


*******************************************************************************
* Name        : new_statement
* Description : Test creation of new statements above/below current line
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: <CURSOR>

*** End of source buffer ***
Saying: ['below', 'when', 'empty', 'buffer']
Heard below when empty buffer
*** Start of source buffer ***
  1: 
  2: below_when_empty_buffer<CURSOR>

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>
  2: below_when_empty_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: <CURSOR>
  3: below_when_empty_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'first', 'line', 'of', 'a', 'buffer']
Heard below when at first line of a buffer
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer<CURSOR>
  3: below_when_empty_buffer

*** End of source buffer ***
Got command: goto(61,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer
  4: <CURSOR>

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'last', 'character', 'of', 'a', 'buffer']
Heard below when at last character of a buffer
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer
  4: below_when_at_last_character_of_a_buffer<CURSOR>

*** End of source buffer ***
Got command: goto_line(2,)
*** Start of source buffer ***
  1: 
  2: <CURSOR>below_when_at_first_line_of_a_buffer
  3: below_when_empty_buffer
  4: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'on', 'middle', 'line', 'of', 'buffer']
Heard below when on middle line of buffer
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer<CURSOR>
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>below_when_on_middle_line_of_buffer
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer<CURSOR>
  4: below_when_empty_buffer
  5: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: <CURSOR>
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'end', 'of', 'line']
Heard below when at end of line
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: below_when_at_end_of_line<CURSOR>
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>below_when_on_middle_line_of_buffer
  4: below_when_at_end_of_line
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>below_when_on_middle_line_of_buffer
  4: below_when_at_end_of_line
  5: below_when_empty_buffer
  6: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: <CURSOR>
  5: below_when_at_end_of_line
  6: below_when_empty_buffer
  7: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Saying: ['below', 'when', 'at', 'beginning', 'of', 'line']
Heard below when at beginning of line
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: below_when_at_beginning_of_line<CURSOR>
  5: below_when_at_end_of_line
  6: below_when_empty_buffer
  7: below_when_at_last_character_of_a_buffer

*** End of source buffer ***
Got command: goto(10,)
*** Start of source buffer ***
  1: 
  2: below_whe<CURSOR>n_at_first_line_of_a_buffer
  3: below_when_on_middle_line_of_buffer
  4: below_when_at_beginning_of_line
  5: below_when_at_end_of_line
Saying: ['new', 'statement', 'below']
Heard new statement below
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: <CURSOR>
  4: below_when_on_middle_line_of_buffer
  5: below_when_at_beginning_of_line
  6: below_when_at_end_of_line
Saying: ['below', 'when', 'at', 'middle', 'of', 'a', 'line']
Heard below when at middle of a line
*** Start of source buffer ***
  1: 
  2: below_when_at_first_line_of_a_buffer
  3: below_when_at_middle_of_a_line<CURSOR>
  4: below_when_on_middle_line_of_buffer
  5: below_when_at_beginning_of_line
  6: below_when_at_end_of_line
WARNING: source file 'blah2.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: <CURSOR>
  2: 

*** End of source buffer ***
Saying: ['above', 'when', 'empty', 'buffer']
Heard above when empty buffer
*** Start of source buffer ***
  1: above_when_empty_buffer<CURSOR>
  2: 

*** End of source buffer ***
Got command: goto(0,)
*** Start of source buffer ***
  1: <CURSOR>above_when_empty_buffer
  2: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: <CURSOR>
  2: above_when_empty_buffer
  3: 

*** End of source buffer ***
Saying: ['above', 'when', 'at', 'first', 'line', 'of', 'a', 'buffer']
Heard above when at first line of a buffer
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer<CURSOR>
  2: above_when_empty_buffer
  3: 

*** End of source buffer ***
Got command: goto(61,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_empty_buffer
  3: <CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_empty_buffer
  3: <CURSOR>
  4: 

*** End of source buffer ***
Saying: ['above', 'when', 'at', 'last', 'character', 'of', 'a', 'buffer']
Heard above when at last character of a buffer
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_empty_buffer
  3: above_when_at_last_character_of_a_buffer<CURSOR>
  4: 

*** End of source buffer ***
Got command: goto_line(2,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: <CURSOR>above_when_empty_buffer
  3: above_when_at_last_character_of_a_buffer
  4: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: <CURSOR>
  3: above_when_empty_buffer
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Saying: ['above', 'when', 'on', 'middle', 'line', 'of', 'buffer']
Heard above when on middle line of buffer
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer<CURSOR>
  3: above_when_empty_buffer
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>above_when_empty_buffer
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Got command: goto_end_of_line(None,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_empty_buffer<CURSOR>
  4: above_when_at_last_character_of_a_buffer
  5: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Saying: ['above', 'when', 'at', 'end', 'of', 'line']
Heard above when at end of line
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_at_end_of_line<CURSOR>
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Got command: goto_line(3,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>above_when_at_end_of_line
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Got command: goto_beginning_of_line(None,)
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>above_when_at_end_of_line
  4: above_when_empty_buffer
  5: above_when_at_last_character_of_a_buffer
  6: 

*** End of source buffer ***
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: <CURSOR>
  4: above_when_at_end_of_line
  5: above_when_empty_buffer
  6: above_when_at_last_character_of_a_buffer
Saying: ['above', 'when', 'at', 'beginning', 'of', 'line']
Heard above when at beginning of line
*** Start of source buffer ***
  1: above_when_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_at_beginning_of_line<CURSOR>
  4: above_when_at_end_of_line
  5: above_when_empty_buffer
  6: above_when_at_last_character_of_a_buffer
Got command: goto(10,)
*** Start of source buffer ***
  1: above_when<CURSOR>_at_first_line_of_a_buffer
  2: above_when_on_middle_line_of_buffer
  3: above_when_at_beginning_of_line
  4: above_when_at_end_of_line
Saying: ['new', 'statement', 'above']
Heard new statement above
*** Start of source buffer ***
  1: <CURSOR>
  2: above_when_at_first_line_of_a_buffer
  3: above_when_on_middle_line_of_buffer
  4: above_when_at_beginning_of_line
Saying: ['above', 'when', 'at', 'middle', 'of', 'a', 'line']
Heard above when at middle of a line
*** Start of source buffer ***
  1: above_when_at_middle_of_a_line<CURSOR>
  2: above_when_at_first_line_of_a_buffer
  3: above_when_on_middle_line_of_buffer
  4: above_when_at_beginning_of_line


*******************************************************************************
* Name        : number_dictation
* Description : Test number dictation
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Got command: say(['23\\twenty-three', '54\\fifty-four', 'comma', '0\\zero', '.\\point', '04\\oh four'],None,0,0,)
Heard twenty-three fifty-four comma zero point oh four
*** Start of source buffer ***
  1: 2354, 0.04<CURSOR>

*** End of source buffer ***
Got command: say(['select', '0\\zero', '.\\point'],0
,1,0,)
Heard select zero point
*** Start of source buffer ***
  1: 2354, <SEL_START>0.<SEL_END>04

*** End of source buffer ***
Got command: say(['select', '04\\oh four'],0
,1,0,)
Heard select oh four
*** Start of source buffer ***
  1: 2354, 0.<SEL_START>04<SEL_END>

*** End of source buffer ***
Got command: say(['select', '0\\zero', '.\\point', '04\\oh four'],0
,1,0,)
Heard select zero point oh four
*** Start of source buffer ***
  1: 2354, <SEL_START>0.04<SEL_END>

*** End of source buffer ***


*******************************************************************************
* Name        : operators
* Description : testing various operators
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['count', 'plus', 'equals', 'extra', 'new', 'statement']
Heard count plus equals extra new statement
*** Start of source buffer ***
  1: count += extra
  2: <CURSOR>

*** End of source buffer ***
Saying: ['bits', 'binary', 'or', 'equals', 'flag', 'new', 'statement']
Heard bits binary or equals flag new statement
*** Start of source buffer ***
  1: count += extra
  2: bits |= flag
  3: <CURSOR>

*** End of source buffer ***
Saying: ['bits', 'right', 'shift', 'equals', '1\\one', 'new', 'statement']
Heard bits right shift equals one new statement
*** Start of source buffer ***
  1: count += extra
  2: bits |= flag
  3: bits >>= 1
  4: <CURSOR>

*** End of source buffer ***
Saying: ['bits', 'ampersand', 'equals', 'flag', 'shift', 'left', '1\\one', 'new', 'statement']
Heard bits ampersand equals flag shift left one new statement
  2: bits |= flag
  3: bits >>= 1
  4: bits &= flag << 1
  5: <CURSOR>

*** End of source buffer ***
Saying: ['factor', 'star', 'equals', 'N.', 'new', 'statement']
Heard factor star equals N. new statement
  3: bits >>= 1
  4: bits &= flag << 1
  5: factor *= n
  6: <CURSOR>

*** End of source buffer ***
Saying: ['value', 'slash', 'equals', 'parens', '1\\one', 'plus', 'discount', 'rate', 'new', 'statement']
Heard value slash equals parens one plus discount rate new statement
  4: bits &= flag << 1
  5: factor *= n
  6: value /= (1 + discount_rate)
  7: <CURSOR>

*** End of source buffer ***
Saying: ['rate', 'divide', 'equals', 'time', 'new', 'statement']
Heard rate divide equals time new statement
  5: factor *= n
  6: value /= (1 + discount_rate)
  7: rate /= time
  8: <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : persistence
* Description : testing persistence between VoiceCode sessions
*******************************************************************************

As best as I can tell from SF Browse CVS, this test was 
    introduced in revision vcode vcode-0-0-7, and broken before 
    vcode-0-0-8, and has never since worked in the manner the 
    printed >>> comments indicate, until now -- DCF


>>> Starting mediator with persistence
EdSim instance EdSim(0) connected


>>> Testing console command: compile_symbols([r'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Restarting mediator with persistence. Compiled symbols should still be in the dictionary.



>>> Testing console command: quit(save_speech_files=0, disconnect=0)

EdSim instance EdSim(0) connected


>>> Testing console command: print_symbols()

API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']


>>> Restarting mediator WITHOUT persistence. There should be NO symbols in the dictionary.



>>> Testing console command: quit(save_speech_files=0, disconnect=0)

EdSim instance EdSim(0) connected


>>> Testing console command: print_symbols()



>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : profile_config
* Description : profiling configuration
*******************************************************************************



*******************************************************************************
* Name        : punctuation
* Description : testing the various Python CSCs and LSAs
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['variable', '\\blank space', '=\\equals', '\\space-bar', 'index', '*\\asterisk', '2\\two', '**\\double asterisk', '8\\eight', '\\New-Line']
Heard variable blank space equals space-bar index asterisk two double asterisk eight New-Line
*** Start of source buffer ***
  1: variable  =  index*2**8
  2: <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', 'variable', '/\\slash', '2\\two', '+\\plus-sign', '1\\one', '-\\minus-sign', 'index', 'new statement']
Heard variable equals variable slash two plus-sign one minus-sign index new statement
*** Start of source buffer ***
  1: variable  =  index*2**8
  2: variable = variable/2+1-index
  3: <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', 'index', '%\\percent', '2\\two', '+\\plus', 'index', '%\\percent-sign', '3\\three', 'new statement']
Heard variable equals index percent two plus index percent-sign three new statement
*** Start of source buffer ***
  1: variable  =  index*2**8
  2: variable = variable/2+1-index
  3: variable = index%2 + index%3
  4: <CURSOR>

*** End of source buffer ***
Saying: ['if', 'index', '&\\ampersand', 'variable', 'then']
Heard if index ampersand variable then
  2: variable = variable/2+1-index
  3: variable = index%2 + index%3
  4: if index&variable:
  5:     <CURSOR>

*** End of source buffer ***
Saying: ['if', 'index', '|\\pipe', 'variable', '|\\pipe-sign', 'index', '|\\vertical-bar', 'value', 'then']
Heard if index pipe variable pipe-sign index vertical-bar value then
  3: variable = index%2 + index%3
  4: if index&variable:
  5:     if index|variable|index|value:
  6:         <CURSOR>

*** End of source buffer ***
Saying: ['index', '=\\equals', '0\\zero', ';\\semicolon', 'variable', '=\\equals', '0\\zero', ';\\semi', 'new statement']
Heard index equals zero semicolon variable equals zero semi new statement
  4: if index&variable:
  5:     if index|variable|index|value:
  6:         index = 0; variable = 0;
  7:         <CURSOR>

*** End of source buffer ***
Saying: ['index', '.\\dot', 'function', '()\\without arguments', 'new statement']
Heard index dot function without arguments new statement
  5:     if index|variable|index|value:
  6:         index = 0; variable = 0;
  7:         index.function()
  8:         <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', 'new', 'list', '0\\zero', '...\\ellipsis', '10\\ten', 'new statement']
Heard variable equals new list zero ellipsis ten new statement
  6:         index = 0; variable = 0;
  7:         index.function()
  8:         variable = [0...10]
  9:         <CURSOR>

*** End of source buffer ***
Saying: ['#\\number-sign', '!\\bang', 'python', 'new statement']
Heard number-sign bang python new statement
  7:         index.function()
  8:         variable = [0...10]
  9:         #!python
 10:         <CURSOR>

*** End of source buffer ***
Saying: ['#\\number-sign', '!\\exclamation-mark', 'python', 'new statement']
Heard number-sign exclamation-mark python new statement
  8:         variable = [0...10]
  9:         #!python
 10:         #!python
 11:         <CURSOR>

*** End of source buffer ***
Saying: ['if', '~\\tilde', 'index', 'and', '~\\squiggle', 'variable', 'then']
Heard if tilde index and squiggle variable then
  9:         #!python
 10:         #!python
 11:         if ~index and ~variable:
 12:             <CURSOR>

*** End of source buffer ***
Saying: ['variable', '::\\double colon', 'index', '::\\colon colon', 'field', 'new statement']
Heard variable double colon index colon colon field new statement
 10:         #!python
 11:         if ~index and ~variable:
 12:             variable::index::field
 13:             <CURSOR>

*** End of source buffer ***
Saying: ['if', 'index', '<\\less-than', '0\\zero', 'and\\and', 'index', '>\\greater-than', '-\\minus-sign', '1\\one', 'then']
Heard if index less-than zero and index greater-than minus-sign one then
 11:         if ~index and ~variable:
 12:             variable::index::field
 13:             if index < 0 and index > -1:
 14:                 <CURSOR>

*** End of source buffer ***
Saying: ['index', '=\\equal-sign', '0\\zero', 'new statement']
Heard index equal-sign zero new statement
 12:             variable::index::field
 13:             if index < 0 and index > -1:
 14:                 index=0
 15:                 <CURSOR>

*** End of source buffer ***
Saying: ['function', '(\\open-paren', '0\\zero', ')\\close-paren', 'new statement']
Heard function open-paren zero close-paren new statement
 13:             if index < 0 and index > -1:
 14:                 index=0
 15:                 function(0)
 16:                 <CURSOR>

*** End of source buffer ***
Saying: ['function', 'parens', '0\\zero', 'new statement']
Heard function parens zero new statement
 14:                 index=0
 15:                 function(0)
 16:                 function(0)
 17:                 <CURSOR>

*** End of source buffer ***
Saying: ['function', '()\\empty parens', 'new statement']
Heard function empty parens new statement
 15:                 function(0)
 16:                 function(0)
 17:                 function()
 18:                 <CURSOR>

*** End of source buffer ***
Saying: ['list', '[\\open-square-bracket', '0\\zero', ']\\close-square-bracket', 'new statement']
Heard list open-square-bracket zero close-square-bracket new statement
 16:                 function(0)
 17:                 function()
 18:                 list[0]
 19:                 <CURSOR>

*** End of source buffer ***
Saying: ['list', 'brackets', '0\\zero', 'new statement']
Heard list brackets zero new statement
 17:                 function()
 18:                 list[0]
 19:                 list[0]
 20:                 <CURSOR>

*** End of source buffer ***
Saying: ['list', '[]\\empty brackets', 'new statement']
Heard list empty brackets new statement
 18:                 list[0]
 19:                 list[0]
 20:                 list[]
 21:                 <CURSOR>

*** End of source buffer ***
Saying: ['dictionary', 'braces', '0\\zero', 'new statement']
Heard dictionary braces zero new statement
 19:                 list[0]
 20:                 list[]
 21:                 dictionary{0}
 22:                 <CURSOR>

*** End of source buffer ***
Saying: ['<\\open-angle', 'head', '>\\close-angle', 'new statement']
Heard open-angle head close-angle new statement
 20:                 list[]
 21:                 dictionary{0}
 22:                 <head>
 23:                 <CURSOR>

*** End of source buffer ***
Saying: ['angle brackets', 'head', 'new statement']
Heard angle brackets head new statement
 21:                 dictionary{0}
 22:                 <head>
 23:                 <head>
 24:                 <CURSOR>

*** End of source buffer ***
Saying: ['<>\\empty angles', 'new statement']
Heard empty angles new statement
 22:                 <head>
 23:                 <head>
 24:                 <>
 25:                 <CURSOR>

*** End of source buffer ***
Saying: ['pattern', 'equals', 'raw', 'string', 'single', 'quotes', 'back slash sierra', 'asterisk', 'back slash cap sierra', '+\\plus-sign', 'new statement']
Heard pattern equals raw string single quotes back slash sierra asterisk back slash cap sierra plus-sign new statement
 23:                 <head>
 24:                 <>
 25:                 pattern = r'\s*\S+'
 26:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', "'\\open-single-quote", 'message', "'\\close-single-quote", 'new statement']
Heard string equals open-single-quote message close-single-quote new statement
 24:                 <>
 25:                 pattern = r'\s*\S+'
 26:                 str = 'message'
 27:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', 'equals', 'single', 'quotes', 'message', 'new statement']
Heard string equals single quotes message new statement
 25:                 pattern = r'\s*\S+'
 26:                 str = 'message'
 27:                 str = 'message'
 28:                 <CURSOR>

*** End of source buffer ***
Saying: ["''\\empty single-quotes", 'new statement']
Heard empty single-quotes new statement
 26:                 str = 'message'
 27:                 str = 'message'
 28:                 ''
 29:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', '"\\open-quote', 'message', '"\\close-quote', 'new statement']
Heard string equals open-quote message close-quote new statement
 27:                 str = 'message'
 28:                 ''
 29:                 str = "message"
 30:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', 'equals', 'quotes', 'message', 'new statement']
Heard string equals quotes message new statement
 28:                 ''
 29:                 str = "message"
 30:                 str = "message"
 31:                 <CURSOR>

*** End of source buffer ***
Saying: ['""\\empty quotes', 'new statement']
Heard empty quotes new statement
 29:                 str = "message"
 30:                 str = "message"
 31:                 ""
 32:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', '`\\open-backquote', 'message', '`\\close-backquote', 'new statement']
Heard string equals open-backquote message close-backquote new statement
 30:                 str = "message"
 31:                 ""
 32:                 str = `message`
 33:                 <CURSOR>

*** End of source buffer ***
Saying: ['string', '=\\equals', 'backquotes', 'message', 'new statement']
Heard string equals backquotes message new statement
 31:                 ""
 32:                 str = `message`
 33:                 str = `message`
 34:                 <CURSOR>

*** End of source buffer ***
Saying: ['``\\empty backquotes', 'new statement']
Heard empty backquotes new statement
 32:                 str = `message`
 33:                 str = `message`
 34:                 ``
 35:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash A.', 'back slash alpha', 'new statement']
Heard quotes back slash A. back slash alpha new statement
 33:                 str = `message`
 34:                 ``
 35:                 "\a\a"
 36:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash B.', 'back slash bravo', 'new statement']
Heard quotes back slash B. back slash bravo new statement
 34:                 ``
 35:                 "\a\a"
 36:                 "\b\b"
 37:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash C.', 'back slash charlie', 'new statement']
Heard quotes back slash C. back slash charlie new statement
 35:                 "\a\a"
 36:                 "\b\b"
 37:                 "\c\c"
 38:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash D.', 'back slash delta', 'new statement']
Heard quotes back slash D. back slash delta new statement
 36:                 "\b\b"
 37:                 "\c\c"
 38:                 "\d\d"
 39:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash E.', 'back slash echo', 'new statement']
Heard quotes back slash E. back slash echo new statement
 37:                 "\c\c"
 38:                 "\d\d"
 39:                 "\e\e"
 40:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash F.', 'back slash foxtrot', 'new statement']
Heard quotes back slash F. back slash foxtrot new statement
 38:                 "\d\d"
 39:                 "\e\e"
 40:                 "\f\f"
 41:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash G.', 'back slash golf', 'new statement']
Heard quotes back slash G. back slash golf new statement
 39:                 "\e\e"
 40:                 "\f\f"
 41:                 "\g\g"
 42:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash H.', 'back slash hotel', 'new statement']
Heard quotes back slash H. back slash hotel new statement
 40:                 "\f\f"
 41:                 "\g\g"
 42:                 "\h\h"
 43:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash I.', 'back slash india', 'new statement']
Heard quotes back slash I. back slash india new statement
 41:                 "\g\g"
 42:                 "\h\h"
 43:                 "\i\i"
 44:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash J.', 'back slash juliett', 'new statement']
Heard quotes back slash J. back slash juliett new statement
 42:                 "\h\h"
 43:                 "\i\i"
 44:                 "\j\j"
 45:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash K.', 'back slash kilo', 'new statement']
Heard quotes back slash K. back slash kilo new statement
 43:                 "\i\i"
 44:                 "\j\j"
 45:                 "\k\k"
 46:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash L.', 'back slash lima', 'new statement']
Heard quotes back slash L. back slash lima new statement
 44:                 "\j\j"
 45:                 "\k\k"
 46:                 "\l\l"
 47:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash M.', 'back slash mike', 'new statement']
Heard quotes back slash M. back slash mike new statement
 45:                 "\k\k"
 46:                 "\l\l"
 47:                 "\m\m"
 48:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash N.', 'back slash november', 'new statement']
Heard quotes back slash N. back slash november new statement
 46:                 "\l\l"
 47:                 "\m\m"
 48:                 "\n\n"
 49:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash O.', 'back slash oscar', 'new statement']
Heard quotes back slash O. back slash oscar new statement
 47:                 "\m\m"
 48:                 "\n\n"
 49:                 "\o\o"
 50:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash P.', 'back slash papa', 'new statement']
Heard quotes back slash P. back slash papa new statement
 48:                 "\n\n"
 49:                 "\o\o"
 50:                 "\p\p"
 51:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash Q.', 'back slash quebec', 'new statement']
Heard quotes back slash Q. back slash quebec new statement
 49:                 "\o\o"
 50:                 "\p\p"
 51:                 "\q\q"
 52:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash R.', 'back slash romeo', 'new statement']
Heard quotes back slash R. back slash romeo new statement
 50:                 "\p\p"
 51:                 "\q\q"
 52:                 "\r\r"
 53:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash S.', 'back slash sierra', 'new statement']
Heard quotes back slash S. back slash sierra new statement
 51:                 "\q\q"
 52:                 "\r\r"
 53:                 "\s\s"
 54:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash T.', 'back slash tango', 'new statement']
Heard quotes back slash T. back slash tango new statement
 52:                 "\r\r"
 53:                 "\s\s"
 54:                 "\t\t"
 55:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash U.', 'back slash uniform', 'new statement']
Heard quotes back slash U. back slash uniform new statement
 53:                 "\s\s"
 54:                 "\t\t"
 55:                 "\u\u"
 56:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash V.', 'back slash victor', 'new statement']
Heard quotes back slash V. back slash victor new statement
 54:                 "\t\t"
 55:                 "\u\u"
 56:                 "\v\v"
 57:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash W.', 'back slash whiskey', 'new statement']
Heard quotes back slash W. back slash whiskey new statement
 55:                 "\u\u"
 56:                 "\v\v"
 57:                 "\w\w"
 58:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash X.', 'back slash xray', 'new statement']
Heard quotes back slash X. back slash xray new statement
 56:                 "\v\v"
 57:                 "\w\w"
 58:                 "\x\x"
 59:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash Y.', 'back slash yankee', 'new statement']
Heard quotes back slash Y. back slash yankee new statement
 57:                 "\w\w"
 58:                 "\x\x"
 59:                 "\y\y"
 60:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash Z.', 'back slash zulu', 'new statement']
Heard quotes back slash Z. back slash zulu new statement
 58:                 "\x\x"
 59:                 "\y\y"
 60:                 "\z\z"
 61:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap A.', 'back slash cap alpha', 'new statement']
Heard quotes back slash cap A. back slash cap alpha new statement
 59:                 "\y\y"
 60:                 "\z\z"
 61:                 "\A\A"
 62:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap B.', 'back slash cap bravo', 'new statement']
Heard quotes back slash cap B. back slash cap bravo new statement
 60:                 "\z\z"
 61:                 "\A\A"
 62:                 "\B\B"
 63:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap C.', 'back slash cap charlie', 'new statement']
Heard quotes back slash cap C. back slash cap charlie new statement
 61:                 "\A\A"
 62:                 "\B\B"
 63:                 "\C\C"
 64:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap D.', 'back slash cap delta', 'new statement']
Heard quotes back slash cap D. back slash cap delta new statement
 62:                 "\B\B"
 63:                 "\C\C"
 64:                 "\D\D"
 65:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap E.', 'back slash cap echo', 'new statement']
Heard quotes back slash cap E. back slash cap echo new statement
 63:                 "\C\C"
 64:                 "\D\D"
 65:                 "\E\E"
 66:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap F.', 'back slash cap foxtrot', 'new statement']
Heard quotes back slash cap F. back slash cap foxtrot new statement
 64:                 "\D\D"
 65:                 "\E\E"
 66:                 "\F\F"
 67:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap G.', 'back slash cap golf', 'new statement']
Heard quotes back slash cap G. back slash cap golf new statement
 65:                 "\E\E"
 66:                 "\F\F"
 67:                 "\G\G"
 68:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap H.', 'back slash cap hotel', 'new statement']
Heard quotes back slash cap H. back slash cap hotel new statement
 66:                 "\F\F"
 67:                 "\G\G"
 68:                 "\H\H"
 69:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap I.', 'back slash cap india', 'new statement']
Heard quotes back slash cap I. back slash cap india new statement
 67:                 "\G\G"
 68:                 "\H\H"
 69:                 "\I\I"
 70:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap J.', 'back slash cap juliett', 'new statement']
Heard quotes back slash cap J. back slash cap juliett new statement
 68:                 "\H\H"
 69:                 "\I\I"
 70:                 "\J\J"
 71:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap K.', 'back slash cap kilo', 'new statement']
Heard quotes back slash cap K. back slash cap kilo new statement
 69:                 "\I\I"
 70:                 "\J\J"
 71:                 "\K\K"
 72:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap L.', 'back slash cap lima', 'new statement']
Heard quotes back slash cap L. back slash cap lima new statement
 70:                 "\J\J"
 71:                 "\K\K"
 72:                 "\L\L"
 73:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap M.', 'back slash cap mike', 'new statement']
Heard quotes back slash cap M. back slash cap mike new statement
 71:                 "\K\K"
 72:                 "\L\L"
 73:                 "\M\M"
 74:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap N.', 'back slash cap november', 'new statement']
Heard quotes back slash cap N. back slash cap november new statement
 72:                 "\L\L"
 73:                 "\M\M"
 74:                 "\N\N"
 75:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap O.', 'back slash cap oscar', 'new statement']
Heard quotes back slash cap O. back slash cap oscar new statement
 73:                 "\M\M"
 74:                 "\N\N"
 75:                 "\O\O"
 76:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap P.', 'back slash cap papa', 'new statement']
Heard quotes back slash cap P. back slash cap papa new statement
 74:                 "\N\N"
 75:                 "\O\O"
 76:                 "\P\P"
 77:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap Q.', 'back slash cap quebec', 'new statement']
Heard quotes back slash cap Q. back slash cap quebec new statement
 75:                 "\O\O"
 76:                 "\P\P"
 77:                 "\Q\Q"
 78:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap R.', 'back slash cap romeo', 'new statement']
Heard quotes back slash cap R. back slash cap romeo new statement
 76:                 "\P\P"
 77:                 "\Q\Q"
 78:                 "\R\R"
 79:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap S.', 'back slash cap sierra', 'new statement']
Heard quotes back slash cap S. back slash cap sierra new statement
 77:                 "\Q\Q"
 78:                 "\R\R"
 79:                 "\S\S"
 80:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap T.', 'back slash cap tango', 'new statement']
Heard quotes back slash cap T. back slash cap tango new statement
 78:                 "\R\R"
 79:                 "\S\S"
 80:                 "\T\T"
 81:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap U.', 'back slash cap uniform', 'new statement']
Heard quotes back slash cap U. back slash cap uniform new statement
 79:                 "\S\S"
 80:                 "\T\T"
 81:                 "\U\U"
 82:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap V.', 'back slash cap victor', 'new statement']
Heard quotes back slash cap V. back slash cap victor new statement
 80:                 "\T\T"
 81:                 "\U\U"
 82:                 "\V\V"
 83:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap W.', 'back slash cap whiskey', 'new statement']
Heard quotes back slash cap W. back slash cap whiskey new statement
 81:                 "\U\U"
 82:                 "\V\V"
 83:                 "\W\W"
 84:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap X.', 'back slash cap xray', 'new statement']
Heard quotes back slash cap X. back slash cap xray new statement
 82:                 "\V\V"
 83:                 "\W\W"
 84:                 "\X\X"
 85:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap Y.', 'back slash cap yankee', 'new statement']
Heard quotes back slash cap Y. back slash cap yankee new statement
 83:                 "\W\W"
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 <CURSOR>

*** End of source buffer ***
Saying: ['quotes', 'back slash cap Z.', 'back slash cap zulu', 'new statement']
Heard quotes back slash cap Z. back slash cap zulu new statement
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 <CURSOR>

*** End of source buffer ***
Saying: ['index', 'semi', 'variable', 'semi']
Heard index semi variable semi
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['previous semi', 'previous semi']
Heard previous semi previous semi
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; <CURSOR>variable; 

*** End of source buffer ***
Saying: ['after semi']
Heard after semi
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['before previous semi']
Heard before previous semi
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable<CURSOR>; 

*** End of source buffer ***
Saying: ['after semi']
Heard after semi
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['before semi']
Heard before semi
 84:                 "\X\X"
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable; <CURSOR>

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', 'brackets', '0\\zero', ',\\comma', '1\\one', ',\\comma', '3\\three']
Heard variable equals brackets zero comma one comma three
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3<CURSOR>]

*** End of source buffer ***
Saying: ['previous comma']
Heard previous comma
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, <CURSOR>3]

*** End of source buffer ***
Saying: ['after comma']
Heard after comma
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, <CURSOR>3]

*** End of source buffer ***
Saying: ['before previous comma']
Heard before previous comma
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1<CURSOR>, 3]

*** End of source buffer ***
Saying: ['before next comma']
Heard before next comma
 85:                 "\Y\Y"
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1<CURSOR>, 3]

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '.\\dot', 'field', '.\\dot', 'value']
Heard variable dot field dot value
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value<CURSOR>

*** End of source buffer ***
Saying: ['previous dot', 'previous dot']
Heard previous dot previous dot
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.<CURSOR>field.value

*** End of source buffer ***
Saying: ['after dot']
Heard after dot
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.<CURSOR>value

*** End of source buffer ***
Saying: ['before previous dot']
Heard before previous dot
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field<CURSOR>.value

*** End of source buffer ***
Saying: ['before next dot']
Heard before next dot
 86:                 "\Z\Z"
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field<CURSOR>.value

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 <CURSOR>

*** End of source buffer ***
Saying: ['braces', 'variable', ':\\colon', '0\\zero', 'comma', 'value', ':\\colon', '0\\zero']
Heard braces variable colon zero comma value colon zero
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0<CURSOR>}

*** End of source buffer ***
Saying: ['previous colon', 'previous colon']
Heard previous colon previous colon
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: <CURSOR>0, value: 0}

*** End of source buffer ***
Saying: ['after colon']
Heard after colon
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: <CURSOR>0}

*** End of source buffer ***
Saying: ['before previous colon']
Heard before previous colon
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value<CURSOR>: 0}

*** End of source buffer ***
Saying: ['before next colon']
Heard before next colon
 87:                 index; variable;
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value<CURSOR>: 0}

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', '2\\two', '*\\asterisk', '3\\three', '*\\asterisk', '4\\four']
Heard variable equals two asterisk three asterisk four
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4<CURSOR>

*** End of source buffer ***
Saying: ['previous asterisk', 'previous star']
Heard previous asterisk previous star
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*<CURSOR>3*4

*** End of source buffer ***
Saying: ['after star']
Heard after star
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*<CURSOR>4

*** End of source buffer ***
Saying: ['before previous asterisk']
Heard before previous asterisk
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3<CURSOR>*4

*** End of source buffer ***
Saying: ['before next star']
Heard before next star
 88:                 variable = [0, 1, 3]
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3<CURSOR>*4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', '2\\two', '/\\slash', '3\\three', '/\\slash', '4\\four']
Heard variable equals two slash three slash four
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4<CURSOR>

*** End of source buffer ***
Saying: ['previous slash', 'previous slash']
Heard previous slash previous slash
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/<CURSOR>3/4

*** End of source buffer ***
Saying: ['after slash']
Heard after slash
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/<CURSOR>4

*** End of source buffer ***
Saying: ['before previous slash']
Heard before previous slash
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3<CURSOR>/4

*** End of source buffer ***
Saying: ['before next slash']
Heard before next slash
 89:                 variable.field.value
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3<CURSOR>/4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', '=\\equals', '2\\two', '+\\plus', '3\\three', '+\\plus', '4\\four']
Heard variable equals two plus three plus four
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4<CURSOR>

*** End of source buffer ***
Saying: ['previous plus', 'previous plus']
Heard previous plus previous plus
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + <CURSOR>3 + 4

*** End of source buffer ***
Saying: ['after plus']
Heard after plus
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + <CURSOR>4

*** End of source buffer ***
Saying: ['before previous plus']
Heard before previous plus
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3<CURSOR> + 4

*** End of source buffer ***
Saying: ['before next plus']
Heard before next plus
 90:                 {variable: 0, value: 0}
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3<CURSOR> + 4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', '2\\two', '-\\minus', '3\\three', '-\\minus', '4\\four']
Heard variable equals two minus three minus four
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4<CURSOR>

*** End of source buffer ***
Saying: ['previous minus', 'previous minus']
Heard previous minus previous minus
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - <CURSOR>3 - 4

*** End of source buffer ***
Saying: ['after minus']
Heard after minus
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - <CURSOR>4

*** End of source buffer ***
Saying: ['before previous minus']
Heard before previous minus
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3<CURSOR> - 4

*** End of source buffer ***
Saying: ['before next minus']
Heard before next minus
 91:                 variable = 2*3*4
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3<CURSOR> - 4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 <CURSOR>

*** End of source buffer ***
Saying: ['variable', 'equals', '2\\two', '%\\modulo', '3\\three', '%\\modulo', '4\\four']
Heard variable equals two modulo three modulo four
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4<CURSOR>

*** End of source buffer ***
Saying: ['previous percent', 'previous percent']
Heard previous percent previous percent
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % <CURSOR>3 % 4

*** End of source buffer ***
Saying: ['after percent']
Heard after percent
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % <CURSOR>4

*** End of source buffer ***
Saying: ['before previous percent']
Heard before previous percent
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3<CURSOR> % 4

*** End of source buffer ***
Saying: ['before next percent']
Heard before next percent
 92:                 variable = 2/3/4
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3<CURSOR> % 4

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '&\\ampersand', '1\\one', '&\\ampersand', '2\\two']
Heard zero ampersand one ampersand two
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2<CURSOR>

*** End of source buffer ***
Saying: ['previous ampersand', 'previous ampersand']
Heard previous ampersand previous ampersand
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&<CURSOR>1&2

*** End of source buffer ***
Saying: ['after ampersand']
Heard after ampersand
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&<CURSOR>2

*** End of source buffer ***
Saying: ['before previous ampersand']
Heard before previous ampersand
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1<CURSOR>&2

*** End of source buffer ***
Saying: ['before next ampersand']
Heard before next ampersand
 93:                 variable = 2 + 3 + 4
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1<CURSOR>&2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '|\\pipe', '1\\one', '|\\pipe', '2\\two']
Heard zero pipe one pipe two
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2<CURSOR>

*** End of source buffer ***
Saying: ['previous pipe', 'previous pipe']
Heard previous pipe previous pipe
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|<CURSOR>1|2

*** End of source buffer ***
Saying: ['after pipe']
Heard after pipe
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|<CURSOR>2

*** End of source buffer ***
Saying: ['before previous pipe']
Heard before previous pipe
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1<CURSOR>|2

*** End of source buffer ***
Saying: ['before next pipe']
Heard before next pipe
 94:                 variable = 2 - 3 - 4
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1<CURSOR>|2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2
 98:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '...\\ellipsis', '1\\one', '...\\ellipsis', '2\\two']
Heard zero ellipsis one ellipsis two
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2<CURSOR>

*** End of source buffer ***
Saying: ['previous ellipsis', 'previous ellipsis']
Heard previous ellipsis previous ellipsis
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...<CURSOR>1...2

*** End of source buffer ***
Saying: ['after ellipsis']
Heard after ellipsis
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...<CURSOR>2

*** End of source buffer ***
Saying: ['before previous ellipsis']
Heard before previous ellipsis
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1<CURSOR>...2

*** End of source buffer ***
Saying: ['before next ellipsis']
Heard before next ellipsis
 95:                 variable = 2 % 3 % 4
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1<CURSOR>...2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2
 99:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '!\\bang', '1\\one', '!\\bang', '2\\two']
Heard zero bang one bang two
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2<CURSOR>

*** End of source buffer ***
Saying: ['previous bang', 'previous bang']
Heard previous bang previous bang
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!<CURSOR>1!2

*** End of source buffer ***
Saying: ['after bang']
Heard after bang
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!<CURSOR>2

*** End of source buffer ***
Saying: ['before previous bang']
Heard before previous bang
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1<CURSOR>!2

*** End of source buffer ***
Saying: ['before next bang']
Heard before next bang
 96:                 0&1&2
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1<CURSOR>!2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2
100:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '?\\question-mark', '1\\one', '?\\question-mark', '2\\two']
Heard zero question-mark one question-mark two
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2<CURSOR>

*** End of source buffer ***
Saying: ['previous question-mark', 'previous question-mark']
Heard previous question-mark previous question-mark
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2
100:                 0?<CURSOR>1?2

*** End of source buffer ***
Saying: ['after question-mark']
Heard after question-mark
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?<CURSOR>2

*** End of source buffer ***
Saying: ['before previous question-mark']
Heard before previous question-mark
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1<CURSOR>?2

*** End of source buffer ***
Saying: ['before next question-mark']
Heard before next question-mark
 97:                 0|1|2
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1<CURSOR>?2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2
101:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '#\\number-sign', '1\\one', '#\\number-sign', '2\\two']
Heard zero number-sign one number-sign two
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2<CURSOR>

*** End of source buffer ***
Saying: ['previous number-sign', 'previous number-sign']
Heard previous number-sign previous number-sign
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2
101:                 0#<CURSOR>1#2

*** End of source buffer ***
Saying: ['after number-sign']
Heard after number-sign
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#<CURSOR>2

*** End of source buffer ***
Saying: ['before previous number-sign']
Heard before previous number-sign
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2
101:                 0#1<CURSOR>#2

*** End of source buffer ***
Saying: ['before next number-sign']
Heard before next number-sign
 98:                 0...1...2
 99:                 0!1!2
100:                 0?1?2
101:                 0#1<CURSOR>#2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2
102:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '::\\double colon', '1\\one', '::\\double colon', '2\\two']
Heard zero double colon one double colon two
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2<CURSOR>

*** End of source buffer ***
Saying: ['previous double colon', 'previous double colon']
Heard previous double colon previous double colon
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2
102:                 0::<CURSOR>1::2

*** End of source buffer ***
Saying: ['after double colon']
Heard after double colon
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2
102:                 0::1::<CURSOR>2

*** End of source buffer ***
Saying: ['before previous double colon']
Heard before previous double colon
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2
102:                 0::1<CURSOR>::2

*** End of source buffer ***
Saying: ['before next double colon']
Heard before next double colon
 99:                 0!1!2
100:                 0?1?2
101:                 0#1#2
102:                 0::1<CURSOR>::2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2
103:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '~\\tilde', '1\\one', '~\\tilde', '2\\two']
Heard zero tilde one tilde two
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2<CURSOR>

*** End of source buffer ***
Saying: ['previous tilde', 'previous tilde']
Heard previous tilde previous tilde
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2
103:                 0~<CURSOR>1~2

*** End of source buffer ***
Saying: ['after tilde']
Heard after tilde
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2
103:                 0~1~<CURSOR>2

*** End of source buffer ***
Saying: ['before previous tilde']
Heard before previous tilde
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2
103:                 0~1<CURSOR>~2

*** End of source buffer ***
Saying: ['before next tilde']
Heard before next tilde
100:                 0?1?2
101:                 0#1#2
102:                 0::1::2
103:                 0~1<CURSOR>~2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2
104:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '<\\less-than', '1\\one', '<\\less-than', '2\\two']
Heard zero less-than one less-than two
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2<CURSOR>

*** End of source buffer ***
Saying: ['previous less-than', 'previous less-than']
Heard previous less-than previous less-than
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2
104:                 0 < <CURSOR>1 < 2

*** End of source buffer ***
Saying: ['after less-than']
Heard after less-than
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < <CURSOR>2

*** End of source buffer ***
Saying: ['before previous less-than']
Heard before previous less-than
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1<CURSOR> < 2

*** End of source buffer ***
Saying: ['before next less-than']
Heard before next less-than
101:                 0#1#2
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1<CURSOR> < 2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2
105:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '>\\greater-than', '1\\one', '>\\greater-than', '2\\two']
Heard zero greater-than one greater-than two
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2<CURSOR>

*** End of source buffer ***
Saying: ['previous greater-than', 'previous greater-than']
Heard previous greater-than previous greater-than
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > <CURSOR>1 > 2

*** End of source buffer ***
Saying: ['after greater-than']
Heard after greater-than
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > <CURSOR>2

*** End of source buffer ***
Saying: ['before previous greater-than']
Heard before previous greater-than
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1<CURSOR> > 2

*** End of source buffer ***
Saying: ['before next greater-than']
Heard before next greater-than
102:                 0::1::2
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1<CURSOR> > 2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 <CURSOR>

*** End of source buffer ***
Saying: ['0\\zero', '=\\equal-sign', '1\\one', '=\\equal-sign', '2\\two']
Heard zero equal-sign one equal-sign two
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2<CURSOR>

*** End of source buffer ***
Saying: ['previous equal-sign', 'previous equal-sign']
Heard previous equal-sign previous equal-sign
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=<CURSOR>1=2

*** End of source buffer ***
Saying: ['after equal-sign']
Heard after equal-sign
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=<CURSOR>2

*** End of source buffer ***
Saying: ['before previous equal-sign']
Heard before previous equal-sign
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1<CURSOR>=2

*** End of source buffer ***
Saying: ['before next equal-sign']
Heard before next equal-sign
103:                 0~1~2
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1<CURSOR>=2

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 <CURSOR>

*** End of source buffer ***
Saying: ['between parens', '1\\one']
Heard between parens one
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1<CURSOR>)

*** End of source buffer ***
Saying: ['before previous paren']
Heard before previous paren
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                <CURSOR> (1)

*** End of source buffer ***
Saying: ['after paren']
Heard after paren
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (<CURSOR>1)

*** End of source buffer ***
Saying: ['before paren']
Heard before paren
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1<CURSOR>)

*** End of source buffer ***
Saying: ['previous paren']
Heard previous paren
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (<CURSOR>1)

*** End of source buffer ***
Saying: ['out of parens']
Heard out of parens
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)<CURSOR>

*** End of source buffer ***
Saying: ['before previous paren']
Heard before previous paren
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1<CURSOR>)

*** End of source buffer ***
Saying: ['back out of parens']
Heard back out of parens
104:                 0 < 1 < 2
105:                 0 > 1 > 2
106:                 0=1=2
107:                <CURSOR> (1)

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 <CURSOR>

*** End of source buffer ***
Saying: ['between brackets', '1\\one']
Heard between brackets one
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 [1<CURSOR>]

*** End of source buffer ***
Saying: ['before previous bracket']
Heard before previous bracket
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                <CURSOR> [1]

*** End of source buffer ***
Saying: ['after bracket']
Heard after bracket
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 [<CURSOR>1]

*** End of source buffer ***
Saying: ['before bracket']
Heard before bracket
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 [1<CURSOR>]

*** End of source buffer ***
Saying: ['previous bracket']
Heard previous bracket
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 [<CURSOR>1]

*** End of source buffer ***
Saying: ['out of brackets']
Heard out of brackets
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 [1]<CURSOR>

*** End of source buffer ***
Saying: ['before previous bracket']
Heard before previous bracket
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                 [1<CURSOR>]

*** End of source buffer ***
Saying: ['back out of brackets']
Heard back out of brackets
105:                 0 > 1 > 2
106:                 0=1=2
107:                 (1)
108:                <CURSOR> [1]

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 <CURSOR>

*** End of source buffer ***
Saying: ['between braces', '1\\one']
Heard between braces one
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 {1<CURSOR>}

*** End of source buffer ***
Saying: ['before previous brace']
Heard before previous brace
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                <CURSOR> {1}

*** End of source buffer ***
Saying: ['after brace']
Heard after brace
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 {<CURSOR>1}

*** End of source buffer ***
Saying: ['before brace']
Heard before brace
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 {1<CURSOR>}

*** End of source buffer ***
Saying: ['previous brace']
Heard previous brace
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 {<CURSOR>1}

*** End of source buffer ***
Saying: ['out of braces']
Heard out of braces
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 {1}<CURSOR>

*** End of source buffer ***
Saying: ['before previous brace']
Heard before previous brace
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                 {1<CURSOR>}

*** End of source buffer ***
Saying: ['back out of braces']
Heard back out of braces
106:                 0=1=2
107:                 (1)
108:                 [1]
109:                <CURSOR> {1}

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <CURSOR>

*** End of source buffer ***
Saying: ['between angles', '1\\one']
Heard between angles one
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <1<CURSOR>>

*** End of source buffer ***
Saying: ['before previous angle']
Heard before previous angle
107:                 (1)
108:                 [1]
109:                 {1}
110:                <CURSOR> <1>

*** End of source buffer ***
Saying: ['after angle']
Heard after angle
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <<CURSOR>1>

*** End of source buffer ***
Saying: ['before angle']
Heard before angle
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <1<CURSOR>>

*** End of source buffer ***
Saying: ['previous angle']
Heard previous angle
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <<CURSOR>1>

*** End of source buffer ***
Saying: ['out of angles']
Heard out of angles
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <1><CURSOR>

*** End of source buffer ***
Saying: ['before previous angle']
Heard before previous angle
107:                 (1)
108:                 [1]
109:                 {1}
110:                 <1<CURSOR>>

*** End of source buffer ***
Saying: ['back out of angles']
Heard back out of angles
107:                 (1)
108:                 [1]
109:                 {1}
110:                <CURSOR> <1>

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
108:                 [1]
109:                 {1}
110:                 <1>
111:                 <CURSOR>

*** End of source buffer ***
Saying: ['between single-quotes', '1\\one']
Heard between single-quotes one
108:                 [1]
109:                 {1}
110:                 <1>
111:                 '1<CURSOR>'

*** End of source buffer ***
Saying: ['before previous single-quote']
Heard before previous single-quote
108:                 [1]
109:                 {1}
110:                 <1>
111:                <CURSOR> '1'

*** End of source buffer ***
Saying: ['after single-quote']
Heard after single-quote
108:                 [1]
109:                 {1}
110:                 <1>
111:                 '<CURSOR>1'

*** End of source buffer ***
Saying: ['before single-quote']
Heard before single-quote
108:                 [1]
109:                 {1}
110:                 <1>
111:                 '1<CURSOR>'

*** End of source buffer ***
Saying: ['previous single-quote']
Heard previous single-quote
108:                 [1]
109:                 {1}
110:                 <1>
111:                 '<CURSOR>1'

*** End of source buffer ***
Saying: ['out of single-quotes']
Heard out of single-quotes
108:                 [1]
109:                 {1}
110:                 <1>
111:                 '1'<CURSOR>

*** End of source buffer ***
Saying: ['before previous single-quote']
Heard before previous single-quote
108:                 [1]
109:                 {1}
110:                 <1>
111:                 '1<CURSOR>'

*** End of source buffer ***
Saying: ['back out of single-quotes']
Heard back out of single-quotes
108:                 [1]
109:                 {1}
110:                 <1>
111:                <CURSOR> '1'

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
109:                 {1}
110:                 <1>
111:                 '1'
112:                 <CURSOR>

*** End of source buffer ***
Saying: ['between quotes', '1\\one']
Heard between quotes one
109:                 {1}
110:                 <1>
111:                 '1'
112:                 "1<CURSOR>"

*** End of source buffer ***
Saying: ['before previous quote']
Heard before previous quote
109:                 {1}
110:                 <1>
111:                 '1'
112:                <CURSOR> "1"

*** End of source buffer ***
Saying: ['after quote']
Heard after quote
109:                 {1}
110:                 <1>
111:                 '1'
112:                 "<CURSOR>1"

*** End of source buffer ***
Saying: ['before quote']
Heard before quote
109:                 {1}
110:                 <1>
111:                 '1'
112:                 "1<CURSOR>"

*** End of source buffer ***
Saying: ['previous quote']
Heard previous quote
109:                 {1}
110:                 <1>
111:                 '1'
112:                 "<CURSOR>1"

*** End of source buffer ***
Saying: ['out of quotes']
Heard out of quotes
109:                 {1}
110:                 <1>
111:                 '1'
112:                 "1"<CURSOR>

*** End of source buffer ***
Saying: ['before previous quote']
Heard before previous quote
109:                 {1}
110:                 <1>
111:                 '1'
112:                 "1<CURSOR>"

*** End of source buffer ***
Saying: ['back out of quotes']
Heard back out of quotes
109:                 {1}
110:                 <1>
111:                 '1'
112:                <CURSOR> "1"

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
110:                 <1>
111:                 '1'
112:                 "1"
113:                 <CURSOR>

*** End of source buffer ***
Saying: ['between backquotes', '1\\one']
Heard between backquotes one
110:                 <1>
111:                 '1'
112:                 "1"
113:                 `1<CURSOR>`

*** End of source buffer ***
Saying: ['before previous backquote']
Heard before previous backquote
110:                 <1>
111:                 '1'
112:                 "1"
113:                <CURSOR> `1`

*** End of source buffer ***
Saying: ['after backquote']
Heard after backquote
110:                 <1>
111:                 '1'
112:                 "1"
113:                 `<CURSOR>1`

*** End of source buffer ***
Saying: ['before backquote']
Heard before backquote
110:                 <1>
111:                 '1'
112:                 "1"
113:                 `1<CURSOR>`

*** End of source buffer ***
Saying: ['previous backquote']
Heard previous backquote
110:                 <1>
111:                 '1'
112:                 "1"
113:                 `<CURSOR>1`

*** End of source buffer ***
Saying: ['out of backquotes']
Heard out of backquotes
110:                 <1>
111:                 '1'
112:                 "1"
113:                 `1`<CURSOR>

*** End of source buffer ***
Saying: ['before previous backquote']
Heard before previous backquote
110:                 <1>
111:                 '1'
112:                 "1"
113:                 `1<CURSOR>`

*** End of source buffer ***
Saying: ['back out of backquotes']
Heard back out of backquotes
110:                 <1>
111:                 '1'
112:                 "1"
113:                <CURSOR> `1`

*** End of source buffer ***
Saying: ['new statement']
Heard new statement
111:                 '1'
112:                 "1"
113:                 `1`
114:                 <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : py_misc_statements
* Description : testing miscelleneous python statements.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Heard define class some variable class body
*** Start of source buffer ***
  1: class SomeVariable:
  2:     <CURSOR>

*** End of source buffer ***
Heard define method some method add arguments
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, <CURSOR>):
  3:         

*** End of source buffer ***
Heard collect arguments positional arguments comma
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, <CURSOR>):
  3:         

*** End of source buffer ***
Heard collect keyword arguments keyword arguments
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments<CURSOR>):
  3:         

*** End of source buffer ***
Heard class body
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         <CURSOR>

*** End of source buffer ***
Heard some array equals some other array sliced at one colon five new statement
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         <CURSOR>

*** End of source buffer ***
Heard some dictionary item with key zero jump out equals one
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         some_dictionary[0] = 1<CURSOR>

*** End of source buffer ***
Heard comment above
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         # <CURSOR>
  5:         some_dictionary[0] = 1

*** End of source buffer ***
Heard this is a commented out
*** Start of source buffer ***
  1: class SomeVariable:
  2:     def some_method(self, *positional_arguments, **keyword_arguments):
  3:         some_array = some_other_array[1: 5]
  4:         # this_is_a_commented_out<CURSOR>
  5:         some_dictionary[0] = 1

*** End of source buffer ***


*******************************************************************************
* Name        : python
* Description : testing the various CSCs and LSAs for dictating Python from scratch
*******************************************************************************

>>> Dictating Python when all symbols are known <<<

Compiling symbols for file '%VCODE_HOME%\Data\TestData\native_python.py'
>>> Known symbols are: 
AppState: ['app state']
CSC_consumes: ['C. S. C. consumes', 'CSC consumes']
CSCmd: ['C. S. cmd', 'C. S. command', 'CS cmd', 'CS command']
CSCs: ['C. S. C. S.', 'C. S. CS', 'CS C. S.', 'CS CS']
CmdInterp: ['cmd interp', 'cmd interpreter', 'command interp', 'command interpreter']
ContC: ['cont C.', 'content C.', 'context C.']
ContPy: ['cont P. Y.', 'cont pie', 'cont py', 'cont python', 'content P. Y.', 'content pie', 'content py', 'content python', 'context P. Y.', 'context pie', 'context py', 'context python']
EdSim: ['ed sim']
LSA_consumes: ['L. S. A. consumes', 'LSA consumes']
None: ['none']
Object: ['object']
SymDict: ['sym dict', 'sym dictionary', 'symbol dict', 'symbol dictionary']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
__init__: ['init', 'initial', 'initialize']
_untranslated_text_end: ['untranslated text end']
_untranslated_text_start: ['untranslated text start']
aCSC: ['A. C. S. C.', 'A. CSC', 'a C. S. C.', 'a CSC']
a_match: ['A. match', 'a match']
a_spoken_form: ['A. spoken form', 'a spoken form']
a_word: ['A. word', 'a word']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
accept_symbol_match: ['accept symbol match']
access: ['access']
acmd: ['acmd']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
actions_C_Cpp: ['actions C. C. plus plus', 'actions C. cpp']
actions_py: ['actions P. Y.', 'actions pie', 'actions py', 'actions python']
active_language: ['active language']
active_language_LSAs: ['active language L.s as', 'active language lengths as']
addWord: ['add word']
add_voc_entry: ['add voc entry']
all_language_LSAs: ['all language L.s as', 'all language lengths as']
and: ['and']
answer: ['answer']
answer_match: ['answer match']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
attrs: ['attributes']
auto_test: ['auto test']
aword: ['aword']
break: ['break']
ceil: ['ceil', 'ceiling']
choice_index: ['choice index']
choices: ['choices']
choose_best_symbol: ['choose best symbol']
chop_CSC: ['chop C. S. C.', 'chop CSC']
chop_LSA: ['chop L. S. A.', 'chop LSA']
chop_symbol: ['chop symbol']
chop_word: ['chop word']
chopped_CSC: ['chopped C. S. C.', 'chopped CSC']
chopped_LSA: ['chopped L. S. A.', 'chopped LSA']
chopped_symbol: ['chopped symbol']
chopped_word: ['chopped word']
chosen_match: ['chosen match']
class: ['class']
clean_for: ['clean for']
clean_written: ['clean written']
clean_written_form: ['clean written form']
cmd: ['cmd', 'command']
cmd_index: ['cmd index', 'command index']
cmd_without_CSC: ['cmd without C. S. C.', 'cmd without CSC', 'command without C. S. C.', 'command without CSC']
cmd_without_LSA: ['cmd without L. S. A.', 'cmd without LSA', 'command without L. S. A.', 'command without LSA']
cmd_without_symbol: ['cmd without symbol', 'command without symbol']
cmd_without_word: ['cmd without word', 'command without word']
cmds_this_spoken_form: ['commands this spoken form']
command: ['command']
consumed: ['consumed']
cont_gen: ['cont gen', 'cont general', 'cont generic', 'content gen', 'content general', 'content generic', 'context gen', 'context general', 'context generic']
content: ['content']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
csc_applied: ['C. S. C. applied', 'CSC applied']
cur_pos: ['cur pos', 'cur position', 'cur positioning', 'current pos', 'current position', 'current positioning', 'cursor pos', 'cursor position', 'cursor positioning']
curr_buffer: ['curr buffer', 'current buffer']
decl_attrs: ['decl attributes', 'declaration attributes', 'declare attributes']
deep_construct: ['deep construct']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
deleteWord: ['delete word']
dlg_select_symbol_match: ['dialog select symbol match', 'dlg select symbol match']
dummy: ['dummy']
else: ['else']
end: ['end']
environ: ['environ', 'environment']
exp: ['exp', 'exponential']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
first: ['first']
floor: ['floor']
for: ['for']
from: ['from']
global: ['global']
good_answer: ['good answer']
group: ['group']
has_key: ['has key']
head_was_translated: ['head was translated']
if: ['if']
ii: ['I. I.', 'ii']
import: ['import']
in: ['in']
index_csc: ['index C. S. C.', 'index CSC']
insert_indent: ['insert indent']
insert_untranslated_text: ['insert untranslated text']
int: ['int', 'integer']
interpret: ['interpret']
interpret_NL_cmd: ['interpret N. L. cmd', 'interpret N. L. command', 'interpret NL cmd', 'interpret NL command']
is_new: ['is new']
join: ['join']
known_symbols: ['known symbols']
language: ['language']
language_specific_aliases: ['language specific aliases']
last_language: ['last language']
last_loaded_language: ['last loaded language']
leading_spaces: ['leading spaces']
leading_word: ['leading word']
len: ['len', 'length']
load_language_specific_aliases: ['load language specific aliases']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
lower: ['lower']
massage_command: ['massage command']
match: ['match']
match_pseudo_symbol: ['match pseudo symbol']
match_untranslated_text: ['match untranslated text']
max: ['max', 'maximum']
mod_command: ['mod command', 'mode command', 'modified command', 'modify command']
most_consumed: ['most consumed']
move_to: ['move to']
native_symbol: ['native symbol']
natlink: ['natlink']
new_pos: ['new pos', 'new position', 'new positioning']
not: ['not']
num_match: ['num match', 'number match']
old_pos: ['old pos', 'old position', 'old positioning']
on_app: ['on app']
or: ['or']
os: ['O. S.', 'operating system', 'os']
print: ['print']
print_buff_content: ['print buff content', 'print buffer content']
re: ['re-']
readline: ['readline']
reg: ['reg', 'regular', 'regular expression']
regexp: ['regexp', 'regular expression']
regexp_is_dirty: ['regexp is dirty', 'regular expression is dirty']
regexp_this_word: ['regexp this word', 'regular expression this word']
repr: ['rep', 'repr', 'represent', 'representation']
rest: ['rest']
return: ['return']
s: ['S.']
self: ['self']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
split: ['split']
spoken: ['spoken']
spoken_as: ['spoken as']
spoken_form: ['spoken form']
spoken_form_info: ['spoken form info', 'spoken form information']
spoken_form_regexp: ['spoken form regexp', 'spoken form regular expression']
spoken_forms: ['spoken forms']
spoken_written_form: ['spoken written form']
sqrt: ['sqirt', 'sqrt', 'square root']
sr_interface: ['S. R. interface', 'SR interface']
start: ['start']
stdin: ['S. T. D. in', 'standard in', 'standard input', 'stdin']
stdout: ['S. T. D. out', 'standard out', 'stdout']
str: ['S. T. R.', 'str', 'string']
string: ['string']
sub: ['sub', 'sub routine']
symbol_consumes: ['symbol consumes']
symbol_info: ['symbol info', 'symbol information']
symbol_matches: ['symbol matches']
symbols: ['symbols']
symdict_pickle_file: ['symdict pickle file']
sys: ['sys', 'system']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
text: ['text']
text_no_spaces: ['text no spaces', 'text number spaces']
type: ['type']
untranslated_text: ['untranslated text']
upper: ['upper']
upto: ['upto']
vc_globals: ['vc globals']
vocabulary_entry: ['vocabulary entry']
while: ['while']
word_consumes: ['word consumes']
words: ['words']
write: ['write']
written: ['written']
written_as: ['written as']
_cached_symbols_as_one_string[a] is:
    AppState  __abs__  aCSC  a_match  a_spoken_form  a_word  abs  abspath  accept  accept2dyear  accept_symbol_match  access  acmd  acos  acquire  actions_C_Cpp  actions_py  active_language  active_language_LSAs  addWord  add_voc_entry  all_language_LSAs  and  answer  answer_match  asin  atan  atan2  atanh  attrs  auto_test  aword  
_cached_symbols_as_one_string[b] is:
    break  
_cached_symbols_as_one_string[c] is:
    CSC_consumes  CSCmd  CSCs  CmdInterp  ContC  ContPy  ceil  choice_index  choices  choose_best_symbol  chop_CSC  chop_LSA  chop_symbol  chop_word  chopped_CSC  chopped_LSA  chopped_symbol  chopped_word  chosen_match  class  clean_for  clean_written  clean_written_form  cmd  cmd_index  cmd_without_CSC  cmd_without_LSA  cmd_without_symbol  cmd_without_word  cmds_this_spoken_form  command  consumed  cont_gen  content  cos  cosh  csc_applied  cur_pos  curr_buffer  
_cached_symbols_as_one_string[d] is:
    decl_attrs  deep_construct  def  deleteWord  dlg_select_symbol_match  dummy  
_cached_symbols_as_one_string[e] is:
    EdSim  else  end  environ  exp  
_cached_symbols_as_one_string[f] is:
    fabs  first  floor  for  from  
_cached_symbols_as_one_string[g] is:
    global  good_answer  group  
_cached_symbols_as_one_string[h] is:
    has_key  head_was_translated  
_cached_symbols_as_one_string[i] is:
    __init__  if  ii  import  in  index_csc  insert_indent  insert_untranslated_text  int  interpret  interpret_NL_cmd  is_new  
_cached_symbols_as_one_string[j] is:
    join  
_cached_symbols_as_one_string[k] is:
    known_symbols  
_cached_symbols_as_one_string[l] is:
    LSA_consumes  language  language_specific_aliases  last_language  last_loaded_language  leading_spaces  leading_word  len  load_language_specific_aliases  log  log10  lower  
_cached_symbols_as_one_string[m] is:
    massage_command  match  match_pseudo_symbol  match_untranslated_text  max  mod_command  most_consumed  move_to  
_cached_symbols_as_one_string[n] is:
    None  native_symbol  natlink  new_pos  not  num_match  
_cached_symbols_as_one_string[o] is:
    Object  old_pos  on_app  or  os  
_cached_symbols_as_one_string[p] is:
    print  print_buff_content  
_cached_symbols_as_one_string[r] is:
    re  readline  reg  regexp  regexp_is_dirty  regexp_this_word  repr  rest  return  
_cached_symbols_as_one_string[s] is:
    SymDict  s  self  sin  sinh  split  spoken  spoken_as  spoken_form  spoken_form_info  spoken_form_regexp  spoken_forms  spoken_written_form  sqrt  sr_interface  start  stdin  stdout  str  string  sub  symbol_consumes  symbol_info  symbol_matches  symbols  symdict_pickle_file  sys  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  text  text_no_spaces  type  
_cached_symbols_as_one_string[u] is:
    _untranslated_text_end  _untranslated_text_start  untranslated_text  upper  upto  
_cached_symbols_as_one_string[v] is:
    vc_globals  vocabulary_entry  
_cached_symbols_as_one_string[w] is:
    while  word_consumes  words  write  written  written_as  
AppState: ['app state']
CSC_consumes: ['C. S. C. consumes', 'CSC consumes']
CSCmd: ['C. S. cmd', 'C. S. command', 'CS cmd', 'CS command']
CSCs: ['C. S. C. S.', 'C. S. CS', 'CS C. S.', 'CS CS']
CmdInterp: ['cmd interp', 'cmd interpreter', 'command interp', 'command interpreter']
ContC: ['cont C.', 'content C.', 'context C.']
ContPy: ['cont P. Y.', 'cont pie', 'cont py', 'cont python', 'content P. Y.', 'content pie', 'content py', 'content python', 'context P. Y.', 'context pie', 'context py', 'context python']
EdSim: ['ed sim']
LSA_consumes: ['L. S. A. consumes', 'LSA consumes']
None: ['none']
Object: ['object']
SymDict: ['sym dict', 'sym dictionary', 'symbol dict', 'symbol dictionary']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
__init__: ['init', 'initial', 'initialize']
_untranslated_text_end: ['untranslated text end']
_untranslated_text_start: ['untranslated text start']
aCSC: ['A. C. S. C.', 'A. CSC', 'a C. S. C.', 'a CSC']
a_match: ['A. match', 'a match']
a_spoken_form: ['A. spoken form', 'a spoken form']
a_word: ['A. word', 'a word']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
accept_symbol_match: ['accept symbol match']
access: ['access']
acmd: ['acmd']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
actions_C_Cpp: ['actions C. C. plus plus', 'actions C. cpp']
actions_py: ['actions P. Y.', 'actions pie', 'actions py', 'actions python']
active_language: ['active language']
active_language_LSAs: ['active language L.s as', 'active language lengths as']
addWord: ['add word']
add_voc_entry: ['add voc entry']
all_language_LSAs: ['all language L.s as', 'all language lengths as']
and: ['and']
answer: ['answer']
answer_match: ['answer match']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
attrs: ['attributes']
auto_test: ['auto test']
aword: ['aword']
break: ['break']
ceil: ['ceil', 'ceiling']
choice_index: ['choice index']
choices: ['choices']
choose_best_symbol: ['choose best symbol']
chop_CSC: ['chop C. S. C.', 'chop CSC']
chop_LSA: ['chop L. S. A.', 'chop LSA']
chop_symbol: ['chop symbol']
chop_word: ['chop word']
chopped_CSC: ['chopped C. S. C.', 'chopped CSC']
chopped_LSA: ['chopped L. S. A.', 'chopped LSA']
chopped_symbol: ['chopped symbol']
chopped_word: ['chopped word']
chosen_match: ['chosen match']
class: ['class']
clean_for: ['clean for']
clean_written: ['clean written']
clean_written_form: ['clean written form']
cmd: ['cmd', 'command']
cmd_index: ['cmd index', 'command index']
cmd_without_CSC: ['cmd without C. S. C.', 'cmd without CSC', 'command without C. S. C.', 'command without CSC']
cmd_without_LSA: ['cmd without L. S. A.', 'cmd without LSA', 'command without L. S. A.', 'command without LSA']
cmd_without_symbol: ['cmd without symbol', 'command without symbol']
cmd_without_word: ['cmd without word', 'command without word']
cmds_this_spoken_form: ['commands this spoken form']
command: ['command']
consumed: ['consumed']
cont_gen: ['cont gen', 'cont general', 'cont generic', 'content gen', 'content general', 'content generic', 'context gen', 'context general', 'context generic']
content: ['content']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
csc_applied: ['C. S. C. applied', 'CSC applied']
cur_pos: ['cur pos', 'cur position', 'cur positioning', 'current pos', 'current position', 'current positioning', 'cursor pos', 'cursor position', 'cursor positioning']
curr_buffer: ['curr buffer', 'current buffer']
decl_attrs: ['decl attributes', 'declaration attributes', 'declare attributes']
deep_construct: ['deep construct']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
deleteWord: ['delete word']
dlg_select_symbol_match: ['dialog select symbol match', 'dlg select symbol match']
dummy: ['dummy']
else: ['else']
end: ['end']
environ: ['environ', 'environment']
exp: ['exp', 'exponential']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
first: ['first']
floor: ['floor']
for: ['for']
from: ['from']
global: ['global']
good_answer: ['good answer']
group: ['group']
has_key: ['has key']
head_was_translated: ['head was translated']
if: ['if']
ii: ['I. I.', 'ii']
import: ['import']
in: ['in']
index_csc: ['index C. S. C.', 'index CSC']
insert_indent: ['insert indent']
insert_untranslated_text: ['insert untranslated text']
int: ['int', 'integer']
interpret: ['interpret']
interpret_NL_cmd: ['interpret N. L. cmd', 'interpret N. L. command', 'interpret NL cmd', 'interpret NL command']
is_new: ['is new']
join: ['join']
known_symbols: ['known symbols']
language: ['language']
language_specific_aliases: ['language specific aliases']
last_language: ['last language']
last_loaded_language: ['last loaded language']
leading_spaces: ['leading spaces']
leading_word: ['leading word']
len: ['len', 'length']
load_language_specific_aliases: ['load language specific aliases']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
lower: ['lower']
massage_command: ['massage command']
match: ['match']
match_pseudo_symbol: ['match pseudo symbol']
match_untranslated_text: ['match untranslated text']
max: ['max', 'maximum']
mod_command: ['mod command', 'mode command', 'modified command', 'modify command']
most_consumed: ['most consumed']
move_to: ['move to']
native_symbol: ['native symbol']
natlink: ['natlink']
new_pos: ['new pos', 'new position', 'new positioning']
not: ['not']
num_match: ['num match', 'number match']
old_pos: ['old pos', 'old position', 'old positioning']
on_app: ['on app']
or: ['or']
os: ['O. S.', 'operating system', 'os']
print: ['print']
print_buff_content: ['print buff content', 'print buffer content']
re: ['re-']
readline: ['readline']
reg: ['reg', 'regular', 'regular expression']
regexp: ['regexp', 'regular expression']
regexp_is_dirty: ['regexp is dirty', 'regular expression is dirty']
regexp_this_word: ['regexp this word', 'regular expression this word']
repr: ['rep', 'repr', 'represent', 'representation']
rest: ['rest']
return: ['return']
s: ['S.']
self: ['self']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
split: ['split']
spoken: ['spoken']
spoken_as: ['spoken as']
spoken_form: ['spoken form']
spoken_form_info: ['spoken form info', 'spoken form information']
spoken_form_regexp: ['spoken form regexp', 'spoken form regular expression']
spoken_forms: ['spoken forms']
spoken_written_form: ['spoken written form']
sqrt: ['sqirt', 'sqrt', 'square root']
sr_interface: ['S. R. interface', 'SR interface']
start: ['start']
stdin: ['S. T. D. in', 'standard in', 'standard input', 'stdin']
stdout: ['S. T. D. out', 'standard out', 'stdout']
str: ['S. T. R.', 'str', 'string']
string: ['string']
sub: ['sub', 'sub routine']
symbol_consumes: ['symbol consumes']
symbol_info: ['symbol info', 'symbol information']
symbol_matches: ['symbol matches']
symbols: ['symbols']
symdict_pickle_file: ['symdict pickle file']
sys: ['sys', 'system']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
text: ['text']
text_no_spaces: ['text no spaces', 'text number spaces']
type: ['type']
untranslated_text: ['untranslated text']
upper: ['upper']
upto: ['upto']
vc_globals: ['vc globals']
vocabulary_entry: ['vocabulary entry']
while: ['while']
word_consumes: ['word consumes']
words: ['words']
write: ['write']
written: ['written']
written_as: ['written as']
_cached_symbols_as_one_string[a] is:
    AppState  __abs__  aCSC  a_match  a_spoken_form  a_word  abs  abspath  accept  accept2dyear  accept_symbol_match  access  acmd  acos  acquire  actions_C_Cpp  actions_py  active_language  active_language_LSAs  addWord  add_voc_entry  all_language_LSAs  and  answer  answer_match  asin  atan  atan2  atanh  attrs  auto_test  aword  
_cached_symbols_as_one_string[b] is:
    break  
_cached_symbols_as_one_string[c] is:
    CSC_consumes  CSCmd  CSCs  CmdInterp  ContC  ContPy  ceil  choice_index  choices  choose_best_symbol  chop_CSC  chop_LSA  chop_symbol  chop_word  chopped_CSC  chopped_LSA  chopped_symbol  chopped_word  chosen_match  class  clean_for  clean_written  clean_written_form  cmd  cmd_index  cmd_without_CSC  cmd_without_LSA  cmd_without_symbol  cmd_without_word  cmds_this_spoken_form  command  consumed  cont_gen  content  cos  cosh  csc_applied  cur_pos  curr_buffer  
_cached_symbols_as_one_string[d] is:
    decl_attrs  deep_construct  def  deleteWord  dlg_select_symbol_match  dummy  
_cached_symbols_as_one_string[e] is:
    EdSim  else  end  environ  exp  
_cached_symbols_as_one_string[f] is:
    fabs  first  floor  for  from  
_cached_symbols_as_one_string[g] is:
    global  good_answer  group  
_cached_symbols_as_one_string[h] is:
    has_key  head_was_translated  
_cached_symbols_as_one_string[i] is:
    __init__  if  ii  import  in  index_csc  insert_indent  insert_untranslated_text  int  interpret  interpret_NL_cmd  is_new  
_cached_symbols_as_one_string[j] is:
    join  
_cached_symbols_as_one_string[k] is:
    known_symbols  
_cached_symbols_as_one_string[l] is:
    LSA_consumes  language  language_specific_aliases  last_language  last_loaded_language  leading_spaces  leading_word  len  load_language_specific_aliases  log  log10  lower  
_cached_symbols_as_one_string[m] is:
    massage_command  match  match_pseudo_symbol  match_untranslated_text  max  mod_command  most_consumed  move_to  
_cached_symbols_as_one_string[n] is:
    None  native_symbol  natlink  new_pos  not  num_match  
_cached_symbols_as_one_string[o] is:
    Object  old_pos  on_app  or  os  
_cached_symbols_as_one_string[p] is:
    print  print_buff_content  
_cached_symbols_as_one_string[r] is:
    re  readline  reg  regexp  regexp_is_dirty  regexp_this_word  repr  rest  return  
_cached_symbols_as_one_string[s] is:
    SymDict  s  self  sin  sinh  split  spoken  spoken_as  spoken_form  spoken_form_info  spoken_form_regexp  spoken_forms  spoken_written_form  sqrt  sr_interface  start  stdin  stdout  str  string  sub  symbol_consumes  symbol_info  symbol_matches  symbols  symdict_pickle_file  sys  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  text  text_no_spaces  type  
_cached_symbols_as_one_string[u] is:
    _untranslated_text_end  _untranslated_text_start  untranslated_text  upper  upto  
_cached_symbols_as_one_string[v] is:
    vc_globals  vocabulary_entry  
_cached_symbols_as_one_string[w] is:
    while  word_consumes  words  write  written  written_as  
WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'O.', 'S.', ',\\comma', 'R.', 'E.', ',\\comma', 'string', ',\\comma', 'system', 'new', 'statement']
Heard import modules O. S. comma R. E. comma string comma system new statement
*** Start of source buffer ***
  1: import os, re, str, sys
  2: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'auto\\auto', 'test', ',\\comma', 'natural', 'link', ',\\comma', 'V.', 'C.', 'globals', 'new', 'statement']
Heard import modules auto test comma natural link comma V. C. globals new statement
*** Start of source buffer ***
  1: import os, re, str, sys
  2: import auto_test, natlink, vc_globals
  3: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'actions', 'C.', 'C.', 'P.', 'P.', 'import all', 'new', 'statement']
Heard from module actions C. C. P. P. import all new statement
*** Start of source buffer ***
  1: import os, re, str, sys
  2: import auto_test, natlink, vc_globals
  3: from actions_C_Cpp import *
  4: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'application', 'state', 'import', 'application', 'state', 'new', 'statement']
Heard from module application state import application state new statement
  2: import auto_test, natlink, vc_globals
  3: from actions_C_Cpp import *
  4: from AppState import AppState
  5: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'generic', 'import', 'symbols', 'context', 'C.', 'comma', 'context', 'python', 'new', 'statement']
Heard from module context generic import symbols context C. comma context python new statement
  3: from actions_C_Cpp import *
  4: from AppState import AppState
  5: from cont_gen import ContC, ContPy
  6: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'sensitive', 'command', 'import', 'symbols', 'context', 'sensitive', 'command', 'new', 'statement']
Heard from module context sensitive command import symbols context sensitive command new statement
  4: from AppState import AppState
  5: from cont_gen import ContC, ContPy
  6: from context_sensitive_command import context_sensitive_command
  7: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'Ed', 'simulator', 'import\\import symbol', 'Ed', 'simulator', 'new', 'statement']
Heard from module Ed simulator import symbol Ed simulator new statement
  5: from cont_gen import ContC, ContPy
  6: from context_sensitive_command import context_sensitive_command
  7: from EdSim import EdSim
  8: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'object', 'import', 'symbol', 'object', 'new', 'statement']
Heard from module object import symbol object new statement
  6: from context_sensitive_command import context_sensitive_command
  7: from EdSim import EdSim
  8: from Object import Object
  9: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'Ed', 'simulator', 'comma', 'symbol', 'dictionary', 'new', 'statement']
Heard import modules Ed simulator comma symbol dictionary new statement
  7: from EdSim import EdSim
  8: from Object import Object
  9: import EdSim, SymDict
 10: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import module', 'S.', 'R.', 'interface', 'new', 'statement']
Heard import module S. R. interface new statement
  8: from Object import Object
  9: import EdSim, SymDict
 10: import sr_interface
 11: <CURSOR>

*** End of source buffer ***
Saying: ['define', 'class', 'command', 'interpreter', 'sub class\\sub class', 'of', 'object', 'class', 'body']
Heard define class command interpreter sub class of object class body
  9: import EdSim, SymDict
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     <CURSOR>

*** End of source buffer ***
Saying: ['define', 'method', 'initialize', 'add', 'argument', 'on', 'application', 'equals', 'none', 'comma']
Heard define method initialize add argument on application equals none comma
  9: import EdSim, SymDict
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, <CURSOR>):
 13:         

*** End of source buffer ***
Saying: ['symbol', 'dictionary', 'pickle', 'file', 'equals', 'none', 'comma', 'double', 'asterisk', 'attributes', 'method', 'body']
Heard symbol dictionary pickle file equals none comma double asterisk attributes method body
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'declare', 'attributes', 'with', 'arguments', 'brace', 'pair']
Heard self dot declare attributes with arguments brace pair
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({<CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'start', 'jump', 'out', ':\\colon', 'none', 'comma']
Heard single quotes un translated text start jump out colon none comma
 10: import sr_interface
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'end', 'jump', 'out', ':\\colon', 'none', 'new', 'statement']
Heard single quotes un translated text end jump out colon none new statement
 11: class CmdInterp(Object):
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'deep', 'construct', 'with', 'arguments', 'command', 'interpreter', 'comma', 'continue', 'statement']
Heard self dot deep construct with arguments command interpreter comma continue statement
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         self.deep_construct(CmdInterp, \
 15:                             <CURSOR>)

*** End of source buffer ***
Saying: ['brace', 'pair', 'single', 'quotes', 'on', 'application', 'jump', 'out', ':\\colon', 'on', 'application', 'comma']
Heard brace pair single quotes on application jump out colon on application comma
 12:     def __init__(self, on_app = None, symdict_pickle_file = None, **attrs):
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         self.deep_construct(CmdInterp, \
 15:                             {'on_app': on_app, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'known', 'symbols', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'dot', 'symbol', 'dictionary', 'without', 'arguments', 'comma', 'continue', 'statement']
Heard single quotes known symbols jump out colon symbol dictionary dot symbol dictionary without arguments comma continue statement
 13:         self.decl_attrs({'_untranslated_text_start': None, '_untranslated_text_end': None})
 14:         self.deep_construct(CmdInterp, \
 15:                             {'on_app': on_app, 'known_symbols': SymDict.SymDict(), \
 16:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'language', 'specific', 'aliases', 'jump', 'out', ':\\colon', 'empty', 'dictionary', 'comma', 'continue', 'statement']
Heard single quotes language specific aliases jump out colon empty dictionary comma continue statement
 14:         self.deep_construct(CmdInterp, \
 15:                             {'on_app': on_app, 'known_symbols': SymDict.SymDict(), \
 16:                              'language_specific_aliases': {}, \
 17:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'last', 'loaded', 'language', 'jump', 'out', ':\\colon', 'none', 'comma', 'continue', 'statement']
Heard single quotes last loaded language jump out colon none comma continue statement
 15:                             {'on_app': on_app, 'known_symbols': SymDict.SymDict(), \
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', 'comma', 'continue', 'statement']
Heard single quotes symbol dictionary pickle file jump out colon symbol dictionary pickle file jump out comma continue statement
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              'symdict_pickle_file': symdict_pickle_file}, \
 19:                             <CURSOR>)

*** End of source buffer ***
Saying: ['attributes', 'new', 'statement', 'new', 'statement']
Heard attributes new statement new statement
 18:                              'symdict_pickle_file': symdict_pickle_file}, \
 19:                             attrs)
 20: 
 21:         <CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'define', 'method', 'spoken', 'form', 'regular', 'expression', 'add', 'argument', 'spoken', 'form']
Heard back indent define method spoken form regular expression add argument spoken form
 18:                              'symdict_pickle_file': symdict_pickle_file}, \
 19:                             attrs)
 20: 
 21:     def spoken_form_regexp(self, spoken_form<CURSOR>):
 22:         

*** End of source buffer ***
Saying: ['method', 'body']
Heard method body
 19:                             attrs)
 20: 
 21:     def spoken_form_regexp(self, spoken_form):
 22:         <CURSOR>

*** End of source buffer ***
Saying: ['words', 'equals', 'R.', 'E.', 'dot', 'split', 'with', 'arguments']
Heard words equals R. E. dot split with arguments
 19:                             attrs)
 20: 
 21:     def spoken_form_regexp(self, spoken_form):
 22:         words = re.split(<CURSOR>)

*** End of source buffer ***
Saying: ['single', 'quotes', 'back slash S.', 'plus', 'sign', 'jump', 'out', 'comma', 'spoken', 'form', 'new', 'statement']
Heard single quotes back slash S. plus sign jump out comma spoken form new statement
 20: 
 21:     def spoken_form_regexp(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'empty', 'single', 'quotes', 'new', 'statement']
Heard regular expression equals empty single quotes new statement
 21:     def spoken_form_regexp(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         regexp = ''
 24:         <CURSOR>

*** End of source buffer ***
Saying: ['for', 'loop', 'a', 'word', 'in', 'list', 'words', 'loop', 'body']
Heard for loop a word in list words loop body
 22:         words = re.split('\s+', spoken_form)
 23:         regexp = ''
 24:         for a_word in words:
 25:             <CURSOR>

*** End of source buffer ***
Saying: ['first', 'equals', 'a', 'word', 'at', 'index', '0\\zero', 'new', 'statement']
Heard first equals a word at index zero new statement
 23:         regexp = ''
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             <CURSOR>

*** End of source buffer ***
Saying: ['rest', 'equals', 'a', 'word', 'at', 'index', '1\\one', ':\\colon', 'new', 'statement']
Heard rest equals a word at index one colon new statement
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'this', 'word', 'equals', 'single', 'quotes']
Heard regular expression this word equals single quotes
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '<CURSOR>'

*** End of source buffer ***
Saying: ['open', 'bracket', 'jump', 'out', 'plus', 'string', 'dot', 'lower', 'with', 'arguments', 'first']
Heard open bracket jump out plus string dot lower with arguments first
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '[' + str.lower(first<CURSOR>)

*** End of source buffer ***
Saying: ['jump', 'out', 'plus', 'string', 'dot', 'upper', 'with', 'arguments', 'first', 'new', 'statement']
Heard jump out plus string dot upper with arguments first new statement
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '[' + str.lower(first) + str.upper(first)
 28:             <CURSOR>

*** End of source buffer ***
Saying: ['if', 'statement', 'not', 'regular', 'expression', 'equal', 'to', 'empty', 'single', 'quotes', 'if', 'body']
Heard if statement not regular expression equal to empty single quotes if body
 26:             rest = a_word[1: ]
 27:             regexp_this_word = '[' + str.lower(first) + str.upper(first)
 28:             if not regexp == '':
 29:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'single', 'quotes', 'back slash S.', 'asterisk', 'new', 'statement']
Heard regular expression equals regular expression plus single quotes back slash S. asterisk new statement
 27:             regexp_this_word = '[' + str.lower(first) + str.upper(first)
 28:             if not regexp == '':
 29:                 regexp = regexp + '\s*'
 30:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'regular', 'expression', 'this', 'word', 'new', 'statement']
Heard regular expression equals regular expression plus regular expression this word new statement
 28:             if not regexp == '':
 29:                 regexp = regexp + '\s*'
 30:                 regexp = regexp + regexp_this_word
 31:                 <CURSOR>

*** End of source buffer ***
Saying: ['return', 'regular', 'expression']
Heard return regular expression
 28:             if not regexp == '':
 29:                 regexp = regexp + '\s*'
 30:                 regexp = regexp + regexp_this_word
 31:                 return regexp<CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'new statement']
Heard back indent new statement
 29:                 regexp = regexp + '\s*'
 30:                 regexp = regexp + regexp_this_word
 31:             return regexp
 32:         <CURSOR>

*** End of source buffer ***
Saying: ['if', 'not', 'this', 'word', 'then', 'this', 'word', 'equals', 'single', 'quotes', 'hello']
Heard if not this word then this word equals single quotes hello
 30:                 regexp = regexp + regexp_this_word
 31:             return regexp
 32:         if not this_word:
 33:             this_word = 'hello<CURSOR>'

*** End of source buffer ***
Saying: ['else', 'if', 'this', 'word', 'is', 'equal', 'to', 'hi', 'then']
Heard else if this word is equal to hi then
 32:         if not this_word:
 33:             this_word = 'hello'
 34:         elif this_word == hi:
 35:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'greetings', 'else']
Heard this word equals greetings else
 34:         elif this_word == hi:
 35:             this_word = greetings
 36:         else:
 37:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'single', 'quotes', 'done', 'new', 'statement']
Heard this word equals single quotes done new statement
 35:             this_word = greetings
 36:         else:
 37:             this_word = 'done'
 38:             <CURSOR>

*** End of source buffer ***
Saying: ['try', 'some', 'function', 'with', 'arguments']
Heard try some function with arguments
 36:         else:
 37:             this_word = 'done'
 38:             try:
 39:                 some_function(<CURSOR>)

*** End of source buffer ***
Saying: ['except', 'do', 'the', 'following', 'print', 'single', 'quotes', 'error']
Heard except do the following print single quotes error
 38:             try:
 39:                 some_function()
 40:             except :
 41:                 print 'error<CURSOR>'

*** End of source buffer ***
Saying: ['finally', 'do', 'print', 'single', 'quotes', 'all', 'right']
Heard finally do print single quotes all right
 40:             except :
 41:                 print 'error'
 42:             finally:
 43:                 print 'all_right<CURSOR>'

*** End of source buffer ***

>>> Dictating Python when only standard symbols are known <<<

THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
floor: ['floor']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
type: ['type']
_cached_symbols_as_one_string[a] is:
    __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    fabs  floor  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  type  
WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'O.', 'S.', ',\\comma', 'R.', 'E.', ',\\comma', 'string', ',\\comma', 'system', 'new', 'statement']
Heard import modules O. S. comma R. E. comma string comma system new statement
*** Start of source buffer ***
  1: import os, re, str, system
  2: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'auto\\auto', 'test', ',\\comma', 'natural', 'link', ',\\comma', 'V.', 'C.', 'globals', 'new', 'statement']
Heard import modules auto test comma natural link comma V. C. globals new statement
*** Start of source buffer ***
  1: import os, re, str, system
  2: import auto_test, natural_link, vc_globals
  3: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'actions', 'C.', 'C.', 'P.', 'P.', 'import all', 'new', 'statement']
Heard from module actions C. C. P. P. import all new statement
*** Start of source buffer ***
  1: import os, re, str, system
  2: import auto_test, natural_link, vc_globals
  3: from actions_ccpp import *
  4: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'application', 'state', 'import', 'application', 'state', 'new', 'statement']
Heard from module application state import application state new statement
  2: import auto_test, natural_link, vc_globals
  3: from actions_ccpp import *
  4: from application_state import application_state
  5: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'generic', 'import', 'symbols', 'context', 'C.', 'comma', 'context', 'python', 'new', 'statement']
Heard from module context generic import symbols context C. comma context python new statement
  3: from actions_ccpp import *
  4: from application_state import application_state
  5: from context_generic import context_c, context_python
  6: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'context', 'sensitive', 'command', 'import', 'symbols', 'context', 'sensitive', 'command', 'new', 'statement']
Heard from module context sensitive command import symbols context sensitive command new statement
  4: from application_state import application_state
  5: from context_generic import context_c, context_python
  6: from context_sensitive_command import context_sensitive_command
  7: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'Ed', 'simulator', 'import\\import symbol', 'Ed', 'simulator', 'new', 'statement']
Heard from module Ed simulator import symbol Ed simulator new statement
  5: from context_generic import context_c, context_python
  6: from context_sensitive_command import context_sensitive_command
  7: from ed_simulator import ed_simulator
  8: <CURSOR>

*** End of source buffer ***
Saying: ['from', 'module', 'object', 'import', 'symbol', 'object', 'new', 'statement']
Heard from module object import symbol object new statement
  6: from context_sensitive_command import context_sensitive_command
  7: from ed_simulator import ed_simulator
  8: from object import object
  9: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import modules', 'Ed', 'simulator', 'comma', 'symbol', 'dictionary', 'new', 'statement']
Heard import modules Ed simulator comma symbol dictionary new statement
  7: from ed_simulator import ed_simulator
  8: from object import object
  9: import ed_simulator, symbol_dictionary
 10: <CURSOR>

*** End of source buffer ***
Saying: ['import\\import module', 'S.', 'R.', 'interface', 'new', 'statement']
Heard import module S. R. interface new statement
  8: from object import object
  9: import ed_simulator, symbol_dictionary
 10: import sr_interface
 11: <CURSOR>

*** End of source buffer ***
Saying: ['define', 'class', 'command', 'interpreter', 'sub class\\sub class', 'of', 'object', 'class', 'body']
Heard define class command interpreter sub class of object class body
  9: import ed_simulator, symbol_dictionary
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     <CURSOR>

*** End of source buffer ***
Saying: ['define', 'method', 'initialize', 'add', 'argument', 'on', 'application', 'equals', 'none', 'comma']
Heard define method initialize add argument on application equals none comma
  9: import ed_simulator, symbol_dictionary
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, <CURSOR>):
 13:         

*** End of source buffer ***
Saying: ['symbol', 'dictionary', 'pickle', 'file', 'equals', 'none', 'comma', 'double', 'asterisk', 'attributes', 'method', 'body']
Heard symbol dictionary pickle file equals none comma double asterisk attributes method body
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'declare', 'attributes', 'with', 'arguments', 'brace', 'pair']
Heard self dot declare attributes with arguments brace pair
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({<CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'start', 'jump', 'out', ':\\colon', 'none', 'comma']
Heard single quotes un translated text start jump out colon none comma
 10: import sr_interface
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'un', 'translated', 'text', 'end', 'jump', 'out', ':\\colon', 'none', 'new', 'statement']
Heard single quotes un translated text end jump out colon none new statement
 11: class CommandInterpreter(object):
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         <CURSOR>

*** End of source buffer ***
Saying: ['self', 'dot', 'deep', 'construct', 'with', 'arguments', 'command', 'interpreter', 'comma', 'continue', 'statement']
Heard self dot deep construct with arguments command interpreter comma continue statement
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         self.deep_construct(CommandInterpreter, \
 15:                             <CURSOR>)

*** End of source buffer ***
Saying: ['brace', 'pair', 'single', 'quotes', 'on', 'application', 'jump', 'out', ':\\colon', 'on', 'application', 'comma']
Heard brace pair single quotes on application jump out colon on application comma
 12:     def initialize(self, on_application = None, symbol_dictionary_pickle_file = None, **attributes):
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         self.deep_construct(CommandInterpreter, \
 15:                             {'on_application': on_application, <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'known', 'symbols', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'dot', 'symbol', 'dictionary', 'without', 'arguments', 'comma', 'continue', 'statement']
Heard single quotes known symbols jump out colon symbol dictionary dot symbol dictionary without arguments comma continue statement
 13:         self.declare_attributes({'un_translated_text_start': None, 'un_translated_text_end': None})
 14:         self.deep_construct(CommandInterpreter, \
 15:                             {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'language', 'specific', 'aliases', 'jump', 'out', ':\\colon', 'empty', 'dictionary', 'comma', 'continue', 'statement']
Heard single quotes language specific aliases jump out colon empty dictionary comma continue statement
 14:         self.deep_construct(CommandInterpreter, \
 15:                             {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:                              'language_specific_aliases': {}, \
 17:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'last', 'loaded', 'language', 'jump', 'out', ':\\colon', 'none', 'comma', 'continue', 'statement']
Heard single quotes last loaded language jump out colon none comma continue statement
 15:                             {'on_application': on_application, 'known_symbols': symbol_dictionary.symbol_dictionary(), \
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              <CURSOR>})

*** End of source buffer ***
Saying: ['single', 'quotes', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', ':\\colon', 'symbol', 'dictionary', 'pickle', 'file', 'jump', 'out', 'comma', 'continue', 'statement']
Heard single quotes symbol dictionary pickle file jump out colon symbol dictionary pickle file jump out comma continue statement
 16:                              'language_specific_aliases': {}, \
 17:                              'last_loaded_language': None, \
 18:                              'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:                             <CURSOR>)

*** End of source buffer ***
Saying: ['attributes', 'new', 'statement', 'new', 'statement']
Heard attributes new statement new statement
 18:                              'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:                             attributes)
 20: 
 21:         <CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'define', 'method', 'spoken', 'form', 'regular', 'expression', 'add', 'argument', 'spoken', 'form']
Heard back indent define method spoken form regular expression add argument spoken form
 18:                              'symbol_dictionary_pickle_file': symbol_dictionary_pickle_file}, \
 19:                             attributes)
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form<CURSOR>):
 22:         

*** End of source buffer ***
Saying: ['method', 'body']
Heard method body
 19:                             attributes)
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         <CURSOR>

*** End of source buffer ***
Saying: ['words', 'equals', 'R.', 'E.', 'dot', 'split', 'with', 'arguments']
Heard words equals R. E. dot split with arguments
 19:                             attributes)
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         words = re.split(<CURSOR>)

*** End of source buffer ***
Saying: ['single', 'quotes', 'back slash S.', 'plus', 'sign', 'jump', 'out', 'comma', 'spoken', 'form', 'new', 'statement']
Heard single quotes back slash S. plus sign jump out comma spoken form new statement
 20: 
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'empty', 'single', 'quotes', 'new', 'statement']
Heard regular expression equals empty single quotes new statement
 21:     def spoken_form_regular_expression(self, spoken_form):
 22:         words = re.split('\s+', spoken_form)
 23:         regular_expression = ''
 24:         <CURSOR>

*** End of source buffer ***
Saying: ['for', 'loop', 'a', 'word', 'in', 'list', 'words', 'loop', 'body']
Heard for loop a word in list words loop body
 22:         words = re.split('\s+', spoken_form)
 23:         regular_expression = ''
 24:         for a_word in words:
 25:             <CURSOR>

*** End of source buffer ***
Saying: ['first', 'equals', 'a', 'word', 'at', 'index', '0\\zero', 'new', 'statement']
Heard first equals a word at index zero new statement
 23:         regular_expression = ''
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             <CURSOR>

*** End of source buffer ***
Saying: ['rest', 'equals', 'a', 'word', 'at', 'index', '1\\one', ':\\colon', 'new', 'statement']
Heard rest equals a word at index one colon new statement
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'this', 'word', 'equals', 'single', 'quotes']
Heard regular expression this word equals single quotes
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '<CURSOR>'

*** End of source buffer ***
Saying: ['open', 'bracket', 'jump', 'out', 'plus', 'string', 'dot', 'lower', 'with', 'arguments', 'first']
Heard open bracket jump out plus string dot lower with arguments first
 24:         for a_word in words:
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '[' + str.lower(first<CURSOR>)

*** End of source buffer ***
Saying: ['jump', 'out', 'plus', 'string', 'dot', 'upper', 'with', 'arguments', 'first', 'new', 'statement']
Heard jump out plus string dot upper with arguments first new statement
 25:             first = a_word[0]
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '[' + str.lower(first) + str.upper(first)
 28:             <CURSOR>

*** End of source buffer ***
Saying: ['if', 'statement', 'not', 'regular', 'expression', 'equal', 'to', 'empty', 'single', 'quotes', 'if', 'body']
Heard if statement not regular expression equal to empty single quotes if body
 26:             rest = a_word[1: ]
 27:             regular_expression_this_word = '[' + str.lower(first) + str.upper(first)
 28:             if not regular_expression == '':
 29:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'single', 'quotes', 'back slash S.', 'asterisk', 'new', 'statement']
Heard regular expression equals regular expression plus single quotes back slash S. asterisk new statement
 27:             regular_expression_this_word = '[' + str.lower(first) + str.upper(first)
 28:             if not regular_expression == '':
 29:                 regular_expression = regular_expression + '\s*'
 30:                 <CURSOR>

*** End of source buffer ***
Saying: ['regular', 'expression', 'equals', 'regular', 'expression', 'plus', 'regular', 'expression', 'this', 'word', 'new', 'statement']
Heard regular expression equals regular expression plus regular expression this word new statement
 28:             if not regular_expression == '':
 29:                 regular_expression = regular_expression + '\s*'
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:                 <CURSOR>

*** End of source buffer ***
Saying: ['return', 'regular', 'expression']
Heard return regular expression
 28:             if not regular_expression == '':
 29:                 regular_expression = regular_expression + '\s*'
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:                 return regular_expression<CURSOR>

*** End of source buffer ***
Saying: ['back indent', 'new statement']
Heard back indent new statement
 29:                 regular_expression = regular_expression + '\s*'
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:             return regular_expression
 32:         <CURSOR>

*** End of source buffer ***
Saying: ['if', 'not', 'this', 'word', 'then', 'this', 'word', 'equals', 'single', 'quotes', 'hello']
Heard if not this word then this word equals single quotes hello
 30:                 regular_expression = regular_expression + regular_expression_this_word
 31:             return regular_expression
 32:         if not this_word:
 33:             this_word = 'hello<CURSOR>'

*** End of source buffer ***
Saying: ['else', 'if', 'this', 'word', 'is', 'equal', 'to', 'hi', 'then']
Heard else if this word is equal to hi then
 32:         if not this_word:
 33:             this_word = 'hello'
 34:         elif this_word == hi:
 35:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'greetings', 'else']
Heard this word equals greetings else
 34:         elif this_word == hi:
 35:             this_word = greetings
 36:         else:
 37:             <CURSOR>

*** End of source buffer ***
Saying: ['this', 'word', 'equals', 'single', 'quotes', 'done', 'new', 'statement']
Heard this word equals single quotes done new statement
 35:             this_word = greetings
 36:         else:
 37:             this_word = 'done'
 38:             <CURSOR>

*** End of source buffer ***
Saying: ['try', 'some', 'function', 'with', 'arguments']
Heard try some function with arguments
 36:         else:
 37:             this_word = 'done'
 38:             try:
 39:                 some_function(<CURSOR>)

*** End of source buffer ***
Saying: ['except', 'do', 'the', 'following', 'print', 'single', 'quotes', 'error']
Heard except do the following print single quotes error
 38:             try:
 39:                 some_function()
 40:             except :
 41:                 print 'error<CURSOR>'

*** End of source buffer ***
Saying: ['finally', 'do', 'print', 'single', 'quotes', 'all', 'right']
Heard finally do print single quotes all right
 40:             except :
 41:                 print 'error'
 42:             finally:
 43:                 print 'all_right<CURSOR>'

*** End of source buffer ***


*******************************************************************************
* Name        : python_compilation
* Description : testing parsing of python symbols.
*******************************************************************************

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\used_to_test_python_parsing.py ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'


Parsed symbols are: 
ISASYMBOL: ['isasymbol']
ISASYMBOL2: ['isasymbol 2']
IS_A_SYMBOL: ['is A. symbol', 'is a symbol']
IS_A_SYMBOL2: ['is A. symbol 2', 'is a symbol 2']
ISasymbol: ['I. sasymbol']
IsASymbol: ['is A. symbol', 'is a symbol']
IsASymbol2: ['is A. symbol 2', 'is a symbol 2']
Is_A_Symbol: ['is A. symbol', 'is a symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
_isASymbol: ['is A. symbol', 'is a symbol']
_isASymbol2: ['is A. symbol 2', 'is a symbol 2']
_is_a_symbol: ['is A. symbol', 'is a symbol']
_is_a_symbol2: ['is A. symbol 2', 'is a symbol 2']
isASYMBOL: ['is asymbol']
isASymbol: ['is A. symbol', 'is a symbol']
isASymbol2: ['is A. symbol 2', 'is a symbol 2']
is_a_symbol: ['is A. symbol', 'is a symbol']
is_a_symbol2: ['is A. symbol 2', 'is a symbol 2']
isasymbol: ['isasymbol']
isasymbol2: ['isasymbol 2']
not_a_symbol: ['not A. symbol', 'not a symbol']
_cached_symbols_as_one_string[i] is:
    ISASYMBOL  ISASYMBOL2  IS_A_SYMBOL  IS_A_SYMBOL2  ISasymbol  IsASymbol  IsASymbol2  Is_A_Symbol  _isASymbol  _isASymbol2  _is_a_symbol  _is_a_symbol2  initialize  isASYMBOL  isASymbol  isASymbol2  is_a_symbol  is_a_symbol2  isasymbol  isasymbol2  
_cached_symbols_as_one_string[n] is:
    natural_link  not_a_symbol  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_word  type  
Unresolved abbreviations are:
'asymbol': appears in ['isASYMBOL']
'isasymbol': appears in ['ISASYMBOL', 'ISASYMBOL2', 'isasymbol', 'isasymbol2']
'sasymbol': appears in ['ISasymbol']

*** End of compilation test ***



*******************************************************************************
* Name        : python_editing
* Description : testing the various CSCs and LSAs for editing Python
*******************************************************************************

Compiling symbols for file '%VCODE_HOME%\Data\TestData\edit_this_buff.py'
>>> Known symbols are: 
AClass: ['A. class', 'a class']
ASuper: ['A. super', 'a super']
SomeOtherClass: ['some other class']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
a_method: ['A. method', 'a method']
a_method_with_no_arguments: ['A. method with no arguments', 'A. method with number arguments', 'a method with no arguments', 'a method with number arguments']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
class: ['class']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
def: ['deaf', 'def', 'default', 'define', 'defined', 'definition']
do_some_more: ['do some more']
do_some_stuff: ['do some stuff']
exp: ['exp', 'exponential']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
floor: ['floor']
if: ['if']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
pass: ['pass']
repr: ['rep', 'repr', 'represent', 'representation']
self: ['self']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
some_argument: ['some argument']
some_array: ['some array']
some_other_method: ['some other method']
some_variable: ['some variable']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
try: ['try']
type: ['type']
yet_another_method: ['yet another method']
_cached_symbols_as_one_string[a] is:
    AClass  ASuper  __abs__  a_method  a_method_with_no_arguments  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  class  cos  cosh  
_cached_symbols_as_one_string[d] is:
    def  do_some_more  do_some_stuff  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    fabs  floor  
_cached_symbols_as_one_string[i] is:
    if  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[p] is:
    pass  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    SomeOtherClass  self  sin  sinh  some_argument  some_array  some_other_method  some_variable  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  try  type  
_cached_symbols_as_one_string[y] is:
    yet_another_method  

*********************
*** Executing edit test: insert an import statement in middle of a file ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: <CURSOR>
  3: 
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
Heard import some module
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: import some_module<CURSOR>
  3: 
  4: class AClass(ASuper):
  5:     """This is a dummy class"""

*********************
*** DONE with edit test: insert an import statement in middle of a file ***
*********************


*********************
*** Executing edit test: create new class ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
 17:         pass
 18:            
 19: 
 20: <CURSOR>
 21: 
 22: class SomeOtherClass():
 23: 
Heard class dummy class body
 18:            
 19: 
 20: class Dummy:
 21:     <CURSOR>
 22: 
 23: class SomeOtherClass():
 24: 
Heard define method new method method body pass
 20: class Dummy:
 21:     def new_method(self):
 22:         pass
 23:     <CURSOR>
 24: 
 25: class SomeOtherClass():
 26: 

*********************
*** DONE with edit test: create new class ***
*********************


*********************
*** Executing edit test: change subclass of existing class ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: <CURSOR>class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):
Heard select a super
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(<SEL_START>ASuper<SEL_END>):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):
Heard new super class
*** Start of source buffer ***
  1: # This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(new_super_class<CURSOR>):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):

*********************
*** DONE with edit test: change subclass of existing class ***
*********************


*********************
*** Executing edit test: add_method_to_existing_class_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
 16:     def a_method_with_no_arguments():
 17:         pass
 18:            
 19: <CURSOR>
 20: 
 21: 
 22: class SomeOtherClass():
Heard add method some method method body pass
 18:            
 19: def some_method(self):
 20:     pass
 21: <CURSOR>
 22: 
 23: 
 24: class SomeOtherClass():

*********************
*** DONE with edit test: add_method_to_existing_class_test ***
*********************


*********************
*** Executing edit test: add_argument_to_existing_method_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7: <CURSOR>    def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
Heard add argument extra argument
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument, extra_argument<CURSOR>):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)

*********************
*** DONE with edit test: add_argument_to_existing_method_test ***
*********************


*********************
*** Executing edit test: change_existing_argument_of_a_method_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7: <CURSOR>    def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
Heard select some argument
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, <SEL_START>some_argument<SEL_END>):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
Heard new argument
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, new_argument<CURSOR>):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)

*********************
*** DONE with edit test: change_existing_argument_of_a_method_test ***
*********************


*********************
*** Executing edit test: insert_line_of_code_in_method_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  5:     """This is a dummy class"""
  6:     
  7:     def a_method(self, some_argument):
  8: <CURSOR>        some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
 11:             do_some_more()
Heard new statement
  6:     
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         <CURSOR>
 10:         if some_variable:
 11:             do_some_stuff(some_array)
 12:             do_some_more()
Heard some array equals none
  6:     
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         some_array = None<CURSOR>
 10:         if some_variable:
 11:             do_some_stuff(some_array)
 12:             do_some_more()

*********************
*** DONE with edit test: insert_line_of_code_in_method_test ***
*********************


*********************
*** Executing edit test: change_arguments_in_method_call_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10: <CURSOR>            do_some_stuff(some_array)
 11:             do_some_more()
 12:            
 13:         try:
Heard select some array
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(<SEL_START>some_array<SEL_END>)
 11:             do_some_more()
 12:            
 13:         try:
Heard none
  7:     def a_method(self, some_argument):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(None<CURSOR>)
 11:             do_some_more()
 12:            
 13:         try:
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(None)
 11: <CURSOR>            do_some_more()
 12:            
 13:         try:
 14:             do_some_stuff()
Heard after paren none
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(None)
 11:             do_some_more(None<CURSOR>)
 12:            
 13:         try:
 14:             do_some_stuff()

*********************
*** DONE with edit test: change_arguments_in_method_call_test ***
*********************


*********************
*** Executing edit test: nested_if_then_else_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
 11: <CURSOR>            do_some_more()
 12:            
 13:         try:
 14:             do_some_stuff()
Heard new statement if some flag then
 10:             do_some_stuff(some_array)
 11:             do_some_more()
 12:             if some_flag:
 13:                 <CURSOR>
 14:            
 15:         try:
 16:             do_some_stuff()
Heard do some more stuff with arguments some argument
 10:             do_some_stuff(some_array)
 11:             do_some_more()
 12:             if some_flag:
 13:                 do_some_stuff(some_argument<CURSOR>)
 14:            
 15:         try:
 16:             do_some_stuff()
Heard else do some stuff again with arguments some other argument
 12:             if some_flag:
 13:                 do_some_stuff(some_argument)
 14:             else:
 15:                 do_some_stuff_again(some_other_argument<CURSOR>)
 16:            
 17:         try:
 18:             do_some_stuff()
Heard bug below dot following one will not be inserted at the right level
 12:             if some_flag:
 13:                 do_some_stuff(some_argument)
 14:             else:
 15:                 do_some_stuff_again(some_other_argumentbug_below.following1willnot be_inserted_at_the_right_level<CURSOR>)
 16:            
 17:         try:
 18:             do_some_stuff()
Heard else do some stuff without arguments
 14:             else:
 15:                 do_some_stuff_again(some_other_argumentbug_below.following1willnot be_inserted_at_the_right_level)
 16:             else:
 17:                 do_some_stuff()<CURSOR>
 18:            
 19:         try:
 20:             do_some_stuff()

*********************
*** DONE with edit test: nested_if_then_else_test ***
*********************


*********************
*** Executing edit test: add_else_clause_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
  8:         some_variable = some_array[0]
  9:         if some_variable:
 10:             do_some_stuff(some_array)
 11: <CURSOR>            do_some_more()
 12:            
 13:         try:
 14:             do_some_stuff()
Heard else clause
 10:             do_some_stuff(some_array)
 11:             do_some_more()
 12:         else:
 13:             <CURSOR>
 14:            
 15:         try:
 16:             do_some_stuff()

*********************
*** DONE with edit test: add_else_clause_test ***
*********************


*********************
*** Executing edit test: add_except_clause_test ***
*********************

*** Start of source buffer ***
  1: <CURSOR># This is a small buffer for testing editing of Python code
  2: 
  3: 
  4: class AClass(ASuper):
 23: 
 24:     def some_other_method(self):
 25:         try:
 26: <CURSOR>            do_some_stuff()
 27: 	       
 28:     def yet_another_method(self):
 29:         pass

*** End of source buffer ***
Heard catch exceptions
 24:     def some_other_method(self):
 25:         try:
 26:             do_some_stuff()
 27:         except <CURSOR>:
 28:             
 29: 	       
 30:     def yet_another_method(self):

*********************
*** DONE with edit test: add_except_clause_test ***
*********************



*******************************************************************************
* Name        : recent_symbols_retrieval
* Description : Test retrieval of recently dictated symbols.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Before dictation
Recent interpreted symbols were: 


>>> Testing console command: say(['class', 'some', 'class', 'inherits', 'from', 'some', 'other', 'class'], user_input='0
0
')
Heard class some class inherits from some other class
*** Start of source buffer ***
  1: class SomeClass(SomeOtherClass<CURSOR>):
  2:     

*** End of source buffer ***
After dictation
Recent interpreted symbols were: 
   written as: 'SomeClass', spoken as: '['some', 'class']'
   written as: 'SomeOtherClass', spoken as: '['some', 'other', 'class']'


*******************************************************************************
* Name        : redundant_translation
* Description : testing redundant translation of LSAs and symbols at SR and Mediator level
*******************************************************************************



>>> Testing console command: open_file('blah.c')

WARNING: source file 'blah.c' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: compile_symbols([r'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\small_buff.c'])

Compiling symbols for file '%VCODE_HOME%\Data\TestData\small_buff.c'
>>> Known symbols are: 
API_function: ['A. P. I. function', 'API function']
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
__abs__: ['abs', 'underscore abs', 'underscore absolute', 'underscore absolute value']
abs: ['abs', 'absolute', 'absolute value']
abspath: ['abs path', 'absolute path', 'abspath']
accept: ['accept']
accept2dyear: ['accept 2 dyear', 'accept two D. year']
access: ['access']
acos: ['A. cos', 'acos', 'arc cos', 'arc cosine']
acquire: ['acquire']
asin: ['A. sine', 'arc sine', 'asin']
atan: ['A. tan', 'arc tan', 'arc tangent', 'atan']
atan2: ['A. tan 2', 'arc tan 2', 'arc tangent 2', 'atan 2']
atanh: ['A. tan H.', 'arc tan H.', 'arc tangent H.', 'atanh', 'hyperbolic arc tangent']
ceil: ['ceil', 'ceiling']
cos: ['cos', 'cosine']
cosh: ['cos H.', 'cosh', 'cosine H.', 'hyperbolic cosine']
exp: ['exp', 'exponential']
f_name: ['F. name']
f_name2: ['F. name 2']
fabs: ['F.  absolute', 'F. abs', 'F. absolute value', 'fabs', 'float abs', 'float absolute', 'float absolute value']
float: ['float']
floor: ['floor']
horiz_pos: ['horiz pos', 'horiz position', 'horiz positioning', 'horizontal pos', 'horizontal position', 'horizontal positioning', 'horizontally pos', 'horizontally position', 'horizontally positioning']
len: ['len', 'length']
log: ['log', 'logarithm']
log10: ['log 10', 'log base 10', 'logarithm base 10']
move: ['move']
move_horiz: ['move horiz', 'move horizontal', 'move horizontally']
move_vert: ['move vert', 'move vertical', 'move vertically']
repr: ['rep', 'repr', 'represent', 'representation']
sin: ['sin', 'sine']
sinh: ['hyperbolic sine', 'sinch', 'sine H.', 'sinh']
sqrt: ['sqirt', 'sqrt', 'square root']
str: ['S. T. R.', 'str', 'string']
tan: ['tan', 'tangent']
tanh: ['hyperbolic tangent', 'tan H.', 'tanh']
this_sym_has_an_other_abbrev: ['this sym has an other abbrev', 'this symbol has an other abbrev']
this_sym_is_unres: ['this sym is unres', 'this symbol is unres']
this_sym_is_unres_too: ['this sym is unres too', 'this symbol is unres too']
type: ['type']
void: ['void']
x: ['X.']
y: ['Y.']
_cached_symbols_as_one_string[a] is:
    API_function  __abs__  abs  abspath  accept  accept2dyear  access  acos  acquire  asin  atan  atan2  atanh  
_cached_symbols_as_one_string[c] is:
    ceil  cos  cosh  
_cached_symbols_as_one_string[e] is:
    exp  
_cached_symbols_as_one_string[f] is:
    f_name  f_name2  fabs  float  floor  
_cached_symbols_as_one_string[h] is:
    horiz_pos  
_cached_symbols_as_one_string[l] is:
    len  log  log10  
_cached_symbols_as_one_string[m] is:
    move  move_horiz  move_vert  
_cached_symbols_as_one_string[r] is:
    repr  
_cached_symbols_as_one_string[s] is:
    sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  this_sym_has_an_other_abbrev  this_sym_is_unres  this_sym_is_unres_too  type  
_cached_symbols_as_one_string[v] is:
    void  
_cached_symbols_as_one_string[x] is:
    x  
_cached_symbols_as_one_string[y] is:
    y  


>>> Testing console command: say(['index', '!=\\not equal to', '0\\zero'], user_input='0
0
')
Heard index not equal to zero
*** Start of source buffer ***
  1: index != 0<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'not', 'equal', 'to', '0\\zero'], user_input='0
0
')
Heard index not equal to zero
*** Start of source buffer ***
  1: index != 0index != 0<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['move_horiz\\move horizontally'], user_input='0
0
')
Heard move horizontally
*** Start of source buffer ***
  1: index != 0index != 0move_horiz<CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['move', 'horizontally'], user_input='0
0
')
Heard move horizontally
*** Start of source buffer ***
  1: index != 0index != 0move_horizmove_horiz<CURSOR>

*** End of source buffer ***


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : reformat_from_recent_dlg
* Description : Testing dialog for reformatting a selected symbol.
*******************************************************************************



*******************************************************************************
* Name        : reformat_recent_dlg
* Description : Testing dialog for selecting a symbol to reformat.
*******************************************************************************



*******************************************************************************
* Name        : repeat_last
* Description : testing repetition of last command
*******************************************************************************



>>> Testing console command: open_file(r'C:\Documents and Settings\desileta\My Documents\workspace\VCode\Data\TestData\large_buff.py')

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['again'])

Heard again
 12:     objects, such as:
 13: 
 14:     - safe attribute setting
 15:     - <CURSOR>deep constructor
 16:     - pretty printing???
 17:     
 18: 


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['again 3 times'])

Heard again 3 times
 35: 
 36:     Profile tests on NT indicate that:
 37: 
 38:     - <CURSOR>the speed of constructors for Object and non-Object instances are the same
 39:     - the speed of attribute *gets* is the same for Object and non-Object instances
 40:     - when *$PY_DEBUG_OBJECT=0*, the performance of attribute *sets* is the same for Object and non-Object instances
 41:     - when *$PY_DEBUG_OBJECT=1*, attribute *sets* are slower by a factor of about 15 for Object instances than for non-Object instances


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>
  2: # This symbol is here because it is homophonic with auto_test. Just checking
  3: # to make sure that symbol match works with homophonic symbols.
  4: autoTst = 0


>>> Testing console command: say(['after hyphen'])

Heard after hyphen
 11:     This class implements various useful behaviors for generic
 12:     objects, such as:
 13: 
 14:     - <CURSOR>safe attribute setting
 15:     - deep constructor
 16:     - pretty printing???
 17:     


>>> Testing console command: say(['3 times'])

Heard 3 times
 13: 
 14:     - safe attribute setting
 15:     - deep constructor
 16:     - <CURSOR>pretty printing???
 17:     
 18: 
 19:     **SAFE ATTRIBUTE SETTING***


*******************************************************************************
* Name        : rsm_algorithm
* Description : Testing RecogStartMgr algorithm.
*******************************************************************************

new instance in window 14
new instance of emacs 1
with window 14
SelectWinGramDummy for buffer None, window 14
init
SymbolReformattingWinGramDummy for window = window 14
init

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

new window 20
new buffer fish.C for instance 1
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer None, window 20
init
SymbolReformattingWinGramDummy for window = window 20
init
DictWinGramDummy for buffer = 'fish.C', window 20
init
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
init
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
init
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
SymbolReformattingWinGramDummy for window = window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
activating:  20  

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)


Setting text mode on
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
SymbolReformattingWinGramDummy for window = window 20
deactivating
DictWinGramDummy for buffer = 'fish.C', window 20
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
deactivating

Setting text mode off
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
SymbolReformattingWinGramDummy for window = window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
activating:  20  
starting recognition in  (50, 'D:\\Projects', 'browseui')

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)

new instance in telnet window 5
new instance of emacs 5
with window 5

instance emacs(1)
(unknown module)
windows:  []


state {
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
known windows [14, 20]
} state

now specifying window
SelectWinGramDummy for buffer None, window 5
init
SymbolReformattingWinGramDummy for window = window 5
init
success

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (8, 'ttssh - acappella', 'telnet')

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'bug.c', window 5
init
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
init
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
init
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
activating:  5  

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

suspending  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

new instance of emacs 6

instance emacs(2)
(unknown module)
windows:  []


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

now specifying window
SelectWinGramDummy for buffer None, window 5
init
SymbolReformattingWinGramDummy for window = window 5
init
success

instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'dog.q', window 5
init
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
init
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
init
SelectWinGramDummy for buffer 'dog.q', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'dog.q', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'dog.q', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
activating:  5  
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

suspending  emacs(2)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
deactivating
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

resuming  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
activating:  5  
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)

new Vim instance in exceed window 15
new instance of Vim 10
with window 15
SelectWinGramDummy for buffer None, window 15
init
SymbolReformattingWinGramDummy for window = window 15
init
new buffer dog.pl for instance 10
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)


state {
application:  Vim
instance:  Vim(0)
window 15
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 5
instance:  emacs(2)
window 5
known windows [5, 14, 15, 20]
} state

starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
DictWinGramDummy for buffer = 'dog.pl', window 15
init
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
init
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
init
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
activating:  15  

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

suspending  Vim(0)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

new emacs instance in exceed window 15
new instance of emacs 7
with window 15

instance emacs(3)
(unknown module)
windows:  []

starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
(unknown module)
windows:  []

now specifying window
SelectWinGramDummy for buffer None, window 15
init
SymbolReformattingWinGramDummy for window = window 15
init
success

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

starting recognition in  (15, 'xterm - acappella', 'exceed')
DictWinGramDummy for buffer = 'nothing.py', window 15
init
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
init
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
init
SelectWinGramDummy for buffer 'nothing.py', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'nothing.py', window 15
setting context: before = [], after = []
DictWinGramDummy for buffer = 'nothing.py', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
activating:  15  
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

suspending  emacs(3)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
deactivating
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

resuming  Vim(0)
starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
activating:  15  
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

new emacs instance in exceed window 25
new instance of emacs 9
with window 25
SelectWinGramDummy for buffer None, window 25
init
SymbolReformattingWinGramDummy for window = window 25
init

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

starting recognition in  (25, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 25
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 25
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 25
init
SelectWinGramDummy for buffer '.cshrc', window 25
activating:  25  
SymbolReformattingWinGramDummy for window = window 25
activating:  25  
DictWinGramDummy for buffer = '.cshrc', window 25
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 25
activating:  25  
DictThroughCmdGramDummy for buffer = '.cshrc', window 25
activating:  25  

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

app reports new window (is current)
current is (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 26
init
SymbolReformattingWinGramDummy for window = window 26
init

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

starting recognition in  (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 26
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 26
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 26
init
SelectWinGramDummy for buffer '.cshrc', window 26
activating:  26  
SymbolReformattingWinGramDummy for window = window 26
activating:  26  
DictWinGramDummy for buffer = '.cshrc', window 26
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 26
activating:  26  
DictThroughCmdGramDummy for buffer = '.cshrc', window 26
activating:  26  

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

app reports new window (is not current)
current is (15, 'xterm - acappella', 'exceed')

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)


instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 27
init
SymbolReformattingWinGramDummy for window = window 27
init
DictWinGramDummy for buffer = '.cshrc', window 27
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
init
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
SymbolReformattingWinGramDummy for window = window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)

new universal instance of WaxEdit 12
now it is on WaxEdit
starting recognition in  (99, 'WaxEdit - (Floor 0) - large_buff.py', 'python')
SelectWinGramDummy for buffer None, global
init
SymbolReformattingWinGramDummy for window = global
init
DictWinGramDummy for buffer = 'large_buff.py', global
init
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
init
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
init
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 


instance WaxEdit(0)
(unknown module)
windows:  []

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

SelectWinGramDummy for buffer '.cshrc', window 27
deactivating
SymbolReformattingWinGramDummy for window = window 27
deactivating
DictWinGramDummy for buffer = '.cshrc', window 27
deactivating
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
deactivating

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)


instance WaxEdit(0)
(unknown module)
windows:  []

SelectWinGramDummy for buffer 'large_buff.py', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'large_buff.py', global
deactivating
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
deactivating
SymbolReformattingWinGramDummy for window = global
del
SelectWinGramDummy for buffer 'large_buff.py', global
del
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
del
DictWinGramDummy for buffer = 'large_buff.py', global
del
and now the WaxEdit is gone
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
SymbolReformattingWinGramDummy for window = window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)



*******************************************************************************
* Name        : rsm_algorithm_trust
* Description : Testing RecogStartMgr algorithm.
*******************************************************************************

new instance in window 14
new instance of emacs 1
with window 14
SelectWinGramDummy for buffer None, window 14
init
SymbolReformattingWinGramDummy for window = window 14
init

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

new window 20
new buffer fish.C for instance 1
*** Start of source buffer ***
  1: /* This is a small test buffer for C */
  2: 
  3: void move(float x, y)
  4: <CURSOR>{
  5:   move_horiz(x);
  6:   move_vert(y)
  7:   horiz_pos = 0;

instance emacs(0)
running in module emacs
windows:  [14]
window #14:
all instances for window:
emacs(0)

starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer None, window 20
init
SymbolReformattingWinGramDummy for window = window 20
init
DictWinGramDummy for buffer = 'fish.C', window 20
init
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
init
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
init
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
SymbolReformattingWinGramDummy for window = window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
activating:  20  

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)


Setting text mode on
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
SymbolReformattingWinGramDummy for window = window 20
deactivating
DictWinGramDummy for buffer = 'fish.C', window 20
deactivating
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
deactivating

Setting text mode off
starting recognition in  (20, 'emacs - (Yak 0) - fish.C', 'emacs')
SelectWinGramDummy for buffer 'fish.C', window 20
activating:  20  
SymbolReformattingWinGramDummy for window = window 20
activating:  20  
DictWinGramDummy for buffer = 'fish.C', window 20
setting context: before = [ x, y)
], after = [{]
DictWinGramDummy for buffer = 'fish.C', window 20
activating:  20  
DictThroughCmdGramDummy for buffer = 'fish.C', window 20
activating:  20  
starting recognition in  (50, 'D:\\Projects', 'browseui')

instance emacs(0)
running in module emacs
windows:  [14, 20]
window #14:
all instances for window:
emacs(0)
window #20:
all instances for window:
emacs(0)

new instance in telnet window 5
new instance of emacs 5
with window 5
SelectWinGramDummy for buffer None, window 5
init
SymbolReformattingWinGramDummy for window = window 5
init

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)


state {
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 5
known windows [5, 14, 20]
} state

now specifying window
failed

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (8, 'ttssh - acappella', 'telnet')

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'bug.c', window 5
init
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
init
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
init
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
activating:  5  

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

suspending  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

new instance of emacs 6

instance emacs(2)
(unknown module)
windows:  []


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)

now specifying window
SelectWinGramDummy for buffer None, window 5
init
SymbolReformattingWinGramDummy for window = window 5
init
success

instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

starting recognition in  (5, 'ttssh - acappella', 'telnet')
DictWinGramDummy for buffer = 'dog.q', window 5
init
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
init
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
init
SelectWinGramDummy for buffer 'dog.q', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'dog.q', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'dog.q', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
activating:  5  
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

suspending  emacs(2)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
deactivating
SelectWinGramDummy for buffer 'bug.c', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'bug.c', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(2)
emacs(1)

resuming  emacs(1)
starting recognition in  (5, 'ttssh - acappella', 'telnet')
SelectWinGramDummy for buffer 'bug.c', window 5
activating:  5  
SymbolReformattingWinGramDummy for window = window 5
activating:  5  
DictWinGramDummy for buffer = 'bug.c', window 5
setting context: before = [], after = []
DictWinGramDummy for buffer = 'bug.c', window 5
activating:  5  
DictThroughCmdGramDummy for buffer = 'bug.c', window 5
activating:  5  
SelectWinGramDummy for buffer 'dog.q', window 5
deactivating
SymbolReformattingWinGramDummy for window = window 5
deactivating
DictWinGramDummy for buffer = 'dog.q', window 5
deactivating
DictThroughCmdGramDummy for buffer = 'dog.q', window 5
deactivating

instance emacs(1)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)


instance emacs(2)
running in module telnet
windows:  [5]
window #5:
shared
all instances for window:
emacs(1)
emacs(2)

new Vim instance in exceed window 15
new instance of Vim 10
with window 15
SelectWinGramDummy for buffer None, window 15
init
SymbolReformattingWinGramDummy for window = window 15
init
new buffer dog.pl for instance 10
 10:     $dirSep = "\";
 11:     $curDirCom = 'cd';
 12: } else {
 13:     $dirSep = <CURSOR>'/';
 14:     $curDirCom = 'pwd';
 15: };
 16: 

*** End of source buffer ***

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)


state {
application:  Vim
instance:  Vim(0)
window 15
application:  emacs
instance:  emacs(0)
window 14
window 20
instance:  emacs(1)
window 5
instance:  emacs(2)
window 5
known windows [5, 14, 15, 20]
} state

starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
DictWinGramDummy for buffer = 'dog.pl', window 15
init
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
init
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
init
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
activating:  15  

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

suspending  Vim(0)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)

new emacs instance in exceed window 15
new instance of emacs 7
with window 15
SelectWinGramDummy for buffer None, window 15
init
SymbolReformattingWinGramDummy for window = window 15
init

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

starting recognition in  (15, 'xterm - acappella', 'exceed')
DictWinGramDummy for buffer = 'nothing.py', window 15
init
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
init
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
init
SelectWinGramDummy for buffer 'nothing.py', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'nothing.py', window 15
setting context: before = [], after = []
DictWinGramDummy for buffer = 'nothing.py', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
activating:  15  
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

now specifying window
failed

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'nothing.py', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'nothing.py', window 15
setting context: before = [], after = []
DictWinGramDummy for buffer = 'nothing.py', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
activating:  15  
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

suspending  emacs(3)
starting recognition in  (15, 'xterm - acappella', 'exceed')
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
deactivating
SelectWinGramDummy for buffer 'dog.pl', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'dog.pl', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
deactivating

instance emacs(3)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
emacs(3)
Vim(0)

resuming  Vim(0)
starting recognition in  (15, 'Vim - (Oldie 0) - dog.pl', 'exceed')
SelectWinGramDummy for buffer 'dog.pl', window 15
activating:  15  
SymbolReformattingWinGramDummy for window = window 15
activating:  15  
DictWinGramDummy for buffer = 'dog.pl', window 15
setting context: before = [
    $dirSep = ], after = ['/';]
DictWinGramDummy for buffer = 'dog.pl', window 15
activating:  15  
DictThroughCmdGramDummy for buffer = 'dog.pl', window 15
activating:  15  
SelectWinGramDummy for buffer 'nothing.py', window 15
deactivating
SymbolReformattingWinGramDummy for window = window 15
deactivating
DictWinGramDummy for buffer = 'nothing.py', window 15
deactivating
DictThroughCmdGramDummy for buffer = 'nothing.py', window 15
deactivating

instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

new emacs instance in exceed window 25
new instance of emacs 9
with window 25
SelectWinGramDummy for buffer None, window 25
init
SymbolReformattingWinGramDummy for window = window 25
init

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

starting recognition in  (25, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 25
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 25
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 25
init
SelectWinGramDummy for buffer '.cshrc', window 25
activating:  25  
SymbolReformattingWinGramDummy for window = window 25
activating:  25  
DictWinGramDummy for buffer = '.cshrc', window 25
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 25
activating:  25  
DictThroughCmdGramDummy for buffer = '.cshrc', window 25
activating:  25  

instance emacs(4)
running in module exceed
windows:  [25]
window #25:
all instances for window:
emacs(4)

app reports new window (is current)
current is (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 26
init
SymbolReformattingWinGramDummy for window = window 26
init

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

starting recognition in  (26, 'emacs - (Yak 4) - .cshrc', 'exceed')
DictWinGramDummy for buffer = '.cshrc', window 26
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 26
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 26
init
SelectWinGramDummy for buffer '.cshrc', window 26
activating:  26  
SymbolReformattingWinGramDummy for window = window 26
activating:  26  
DictWinGramDummy for buffer = '.cshrc', window 26
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 26
activating:  26  
DictThroughCmdGramDummy for buffer = '.cshrc', window 26
activating:  26  

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)

app reports new window (is not current)
current is (15, 'xterm - acappella', 'exceed')

instance emacs(4)
running in module exceed
windows:  [25, 26]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)


instance Vim(0)
running in module exceed
windows:  [15]
window #15:
shared
all instances for window:
Vim(0)
emacs(3)

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer None, window 27
init
SymbolReformattingWinGramDummy for window = window 27
init
DictWinGramDummy for buffer = '.cshrc', window 27
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
init
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
init
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
SymbolReformattingWinGramDummy for window = window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)

new universal instance of WaxEdit 12
now it is on WaxEdit
starting recognition in  (99, 'WaxEdit - (Floor 0) - large_buff.py', 'python')
SelectWinGramDummy for buffer None, global
init
SymbolReformattingWinGramDummy for window = global
init
DictWinGramDummy for buffer = 'large_buff.py', global
init
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
init
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
init
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 


instance WaxEdit(0)
(unknown module)
windows:  []

but now it is
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer 'large_buff.py', global
activating:  global  exclusive 

SymbolReformattingWinGramDummy for window = global
activating:  global  exclusive 

DictWinGramDummy for buffer = 'large_buff.py', global
setting context: before = [], after = []
DictWinGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

DictThroughCmdGramDummy for buffer = 'large_buff.py', global
activating:  global  exclusive 

SelectWinGramDummy for buffer '.cshrc', window 27
deactivating
SymbolReformattingWinGramDummy for window = window 27
deactivating
DictWinGramDummy for buffer = '.cshrc', window 27
deactivating
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
deactivating

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)


instance WaxEdit(0)
(unknown module)
windows:  []

SelectWinGramDummy for buffer 'large_buff.py', global
deactivating
SymbolReformattingWinGramDummy for window = global
deactivating
DictWinGramDummy for buffer = 'large_buff.py', global
deactivating
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
deactivating
SymbolReformattingWinGramDummy for window = global
del
SelectWinGramDummy for buffer 'large_buff.py', global
del
DictThroughCmdGramDummy for buffer = 'large_buff.py', global
del
DictWinGramDummy for buffer = 'large_buff.py', global
del
and now the WaxEdit is gone
current is (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
starting recognition in  (27, 'emacs - (Yak 4) - .cshrc', 'exceed')
SelectWinGramDummy for buffer '.cshrc', window 27
activating:  27  
SymbolReformattingWinGramDummy for window = window 27
activating:  27  
DictWinGramDummy for buffer = '.cshrc', window 27
setting context: before = [], after = []
DictWinGramDummy for buffer = '.cshrc', window 27
activating:  27  
DictThroughCmdGramDummy for buffer = '.cshrc', window 27
activating:  27  

instance emacs(4)
running in module exceed
windows:  [25, 26, 27]
window #25:
all instances for window:
emacs(4)
window #26:
all instances for window:
emacs(4)
window #27:
all instances for window:
emacs(4)



*******************************************************************************
* Name        : select_pseudocode
* Description : testing select pseudocode commands
*******************************************************************************



>>> Testing console command: open_file('blah.py')

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
  2: index = 1
  3: index = 0
  4: index = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
  3: index = 0
  4: index = 1
  5: index = 0
  6: <CURSOR>

*** End of source buffer ***

Testing 'go' commands...



>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go after next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go after next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go after previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go after previous index equals zero
*** Start of source buffer ***
  1: index = 0<CURSOR>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go before', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go before index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go before next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go before next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>index = 0
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['go before previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go before previous index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['after next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard after next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['after previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard after previous index equals zero
*** Start of source buffer ***
  1: index = 0<CURSOR>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['before', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard before index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['before next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard before next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>index = 0
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['before previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard before previous index equals zero
*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0

Testing selection commands...



>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1

Testing repeated selection commands in both directions...



>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(6)

  3: index = 0
  4: index = 1
  5: index = 0
  6: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
  2: index = 1
  3: index = 0
  4: index = 1
  5: <SEL_START>index = 0<SEL_END>
  6: 

*** End of source buffer ***


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***

Testing repeatability of SelectPseudoCode commands...



>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['next', 'one'], user_input='None')
Heard next one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['previous', 'one'], user_input='None')
Heard previous one
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['go after next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard go after next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['next', 'one'], user_input='None')
Heard next one
  2: index = 1
  3: index = 0
  4: index = 1
  5: index = 0<CURSOR>
  6: 

*** End of source buffer ***


>>> Testing console command: say(['previous', 'one'], user_input='None')
Heard previous one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0<CURSOR>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['go before', 'index', '=\\equals', '1\\one'], user_input='None')
Heard go before index equals one
*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['next', 'one'], user_input='None')
Heard next one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: <CURSOR>index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['previous', 'one'], user_input='None')
Heard previous one
*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['go after', 'index', '=\\equals', '1\\one'], user_input='None')
Heard go after index equals one
*** Start of source buffer ***
  1: index = 0
  2: index = 1<CURSOR>
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['next', 'one'], user_input='None')
Heard next one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: index = 1<CURSOR>
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['previous', 'one'], user_input='None')
Heard previous one
*** Start of source buffer ***
  1: index = 0
  2: index = 1<CURSOR>
  3: index = 0
  4: index = 1
  5: index = 0

   Testing reapeating without specifying direction...



>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['go after', 'index', '=\\equals', '1\\one'], user_input='None')
Heard go after index equals one
*** Start of source buffer ***
  1: index = 0
  2: index = 1<CURSOR>
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['again'], user_input='None')
Heard again
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: index = 1<CURSOR>
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: goto_line(5)

  2: index = 1
  3: index = 0
  4: index = 1
  5: <CURSOR>index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['go after', 'index', '=\\equals', '1\\one'], user_input='None')
Heard go after index equals one
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: index = 1<CURSOR>
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: say(['again'], user_input='None')
Heard again
*** Start of source buffer ***
  1: index = 0
  2: index = 1<CURSOR>
  3: index = 0
  4: index = 1
  5: index = 0

Testing select X through Z...



>>> Testing console command: goto_line(1)

*** Start of source buffer ***
  1: <CURSOR>index = 0
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: say(['select', 'index', 'through', '1\\one'], user_input='None')
Heard select index through one
*** Start of source buffer ***
  1: <SEL_START>index = 0
  2: index = 1<SEL_END>
  3: index = 0
  4: index = 1
  5: index = 0


>>> Testing console command: say(['select', 'index', 'through', '0\\zero'], user_input='None')
Heard select index through zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: index = 0
  6: 

*** End of source buffer ***


>>> Testing console command: quit(save_speech_files=0, disconnect=0)



*******************************************************************************
* Name        : set_text
* Description : Testing set_text.
*******************************************************************************

*** Start of source buffer ***
  1: <CURSOR># This is a small test buffer for Python
  2: 
  3: 
  4: 
*** Start of source buffer ***
  1: <CURSOR>nothing left

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>almost nothing left

*** End of source buffer ***
*** Start of source buffer ***
  1: <CURSOR>almost nobody left

*** End of source buffer ***


*******************************************************************************
* Name        : std_func_calls
* Description : Testing CSCs for calling standard functions.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value', 'with', 'arguments', 'one']
Heard absolute value with arguments one
*** Start of source buffer ***
  1: abs(1<CURSOR>)

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: abs(1)
  2: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value', 'of', 'one']
Heard absolute value of one
*** Start of source buffer ***
  1: abs(1)
  2: abs(1<CURSOR>)

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value', 'without', 'arguments']
Heard absolute value without arguments
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: abs()<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: abs()
  4: <CURSOR>

*** End of source buffer ***
Saying: ['some', 'function', 'with', 'argument', 'some', 'argument']
Heard some function with argument some argument
*** Start of source buffer ***
  1: abs(1)
  2: abs(1)
  3: abs()
  4: some_function(some_argument<CURSOR>)

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  2: abs(1)
  3: abs()
  4: some_function(some_argument)
  5: <CURSOR>

*** End of source buffer ***
Saying: ['absolute', 'value']
Heard absolute value
  2: abs(1)
  3: abs()
  4: some_function(some_argument)
  5: abs<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  3: abs()
  4: some_function(some_argument)
  5: abs
  6: <CURSOR>

*** End of source buffer ***
Saying: ['some', 'function', 'of', 'some', 'argument']
Heard some function of some argument
  3: abs()
  4: some_function(some_argument)
  5: abs
  6: some_function_of_some_argument<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : symbol_formatting
* Description : Testing styling and manual formatting of new symbols.
*******************************************************************************

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Testing styles



>>> Testing console command: say(['ordinary', 'formatting', 'equals', 'one'], user_input='None')
Heard ordinary formatting equals one
*** Start of source buffer ***
  1: ordinary_formatting = 1<CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['lower', 'Hungarian', 'ugly', 'Java', 'convention'], user_input='None')
Heard lower Hungarian ugly Java convention
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention<CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['animal', 'equals', 'Hungarian', 'friendly', 'dolphin', 'empty', 'function'], user_input='None')
Heard animal equals Hungarian friendly dolphin empty function
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()<CURSOR>

*** End of source buffer ***
Heard new statement
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['\\All-Caps', 'style', 'W.', 'M.', 'user'], user_input='None')
Heard All-Caps style W. M. user
*** Start of source buffer ***
  1: ordinary_formatting = 1
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER<CURSOR>

*** End of source buffer ***
Heard new statement
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: <CURSOR>

*** End of source buffer ***
Testing styling across utterances


>>> Testing console command: say(['Hungarian'], user_input='None')
Heard Hungarian
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['delayed', 'name'], user_input='None')
Heard delayed name
  2: uglyJavaConvention
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: DelayedName<CURSOR>

*** End of source buffer ***
Heard new statement
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: DelayedName
  6: <CURSOR>

*** End of source buffer ***
Testing manual formatting



>>> Testing console command: say(['no', 'space', 'style', 'W.', 'X.', 'cap', 'python'], user_input='None')
Heard no space style W. X. cap python
  3: animal = FriendlyDolphin()
  4: WM_USER
  5: DelayedName
  6: wxPython<CURSOR>

*** End of source buffer ***
Heard new statement
  4: WM_USER
  5: DelayedName
  6: wxPython
  7: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['send', 'to', '\\Caps-On', 'the', 'boss'], user_input='None')
Heard send to Caps-On the boss
  4: WM_USER
  5: DelayedName
  6: wxPython
  7: send_to_The_Boss<CURSOR>

*** End of source buffer ***
Heard new statement
  5: DelayedName
  6: wxPython
  7: send_to_The_Boss
  8: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['caps', 'on', 'matters', '\\No-Caps', 'of', 'state'], user_input='None')
Heard caps on matters No-Caps of state
  5: DelayedName
  6: wxPython
  7: send_to_The_Boss
  8: Matters_of_State<CURSOR>

*** End of source buffer ***
Heard new statement
  6: wxPython
  7: send_to_The_Boss
  8: Matters_of_State
  9: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['inter', 'caps', 'fish', '_\\underscore', 'food'], user_input='None')
Heard inter caps fish underscore food
  6: wxPython
  7: send_to_The_Boss
  8: Matters_of_State
  9: Fish_Food<CURSOR>

*** End of source buffer ***
Heard new statement
  7: send_to_The_Boss
  8: Matters_of_State
  9: Fish_Food
 10: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['Hungarian', 'notation', '\\No-Caps', 'dog', 'food'], user_input='None')
Heard Hungarian notation No-Caps dog food
  7: send_to_The_Boss
  8: Matters_of_State
  9: Fish_Food
 10: dogFood<CURSOR>

*** End of source buffer ***
Heard new statement
  8: Matters_of_State
  9: Fish_Food
 10: dogFood
 11: <CURSOR>

*** End of source buffer ***
Making sure manual underscores suppress automatic ones


>>> Testing console command: say(['_\\underscore', 'private', '_\\underscore', 'variable', '_\\underscore'], user_input='None')
Heard underscore private underscore variable underscore
  8: Matters_of_State
  9: Fish_Food
 10: dogFood
 11: _private_variable_<CURSOR>

*** End of source buffer ***
Heard new statement
  9: Fish_Food
 10: dogFood
 11: _private_variable_
 12: <CURSOR>

*** End of source buffer ***
Making sure consecutive letters are treated as part of the same word


>>> Testing console command: say(['windows', 'X.', 'P.'], user_input='None')
Heard windows X. P.
  9: Fish_Food
 10: dogFood
 11: _private_variable_
 12: windows_xp<CURSOR>

*** End of source buffer ***
Heard new statement
 10: dogFood
 11: _private_variable_
 12: windows_xp
 13: <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : symbol_matching
* Description : Test special cases for the symbol matching algorithm.
*******************************************************************************

WARNING: source file 'blah1.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Saying: ['editor', 'simulator']
Heard editor simulator
*** Start of source buffer ***
  1: EdSim<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: EdSim
  2: <CURSOR>

*** End of source buffer ***
Saying: ['purple', 'bunny']
Heard purple bunny
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: <CURSOR>

*** End of source buffer ***
Saying: ['application', 'state']
Heard application state
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: <CURSOR>

*** End of source buffer ***
Saying: ['file', 'path']
Heard file path
*** Start of source buffer ***
  1: EdSim
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: filepath<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: filepath
  5: <CURSOR>

*** End of source buffer ***
Saying: ['directory', 'path']
Heard directory path
  2: symbolWithUnmatchableExplicitSpokenForm
  3: application_state
  4: filepath
  5: directory_path<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  3: application_state
  4: filepath
  5: directory_path
  6: <CURSOR>

*** End of source buffer ***
Saying: ['Toronto', 'transit', 'corporation']
Heard Toronto transit corporation
  3: application_state
  4: filepath
  5: directory_path
  6: toronto_transit_corporation<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  4: filepath
  5: directory_path
  6: toronto_transit_corporation
  7: <CURSOR>

*** End of source buffer ***
Saying: ['random', 'number']
Heard random number
  4: filepath
  5: directory_path
  6: toronto_transit_corporation
  7: rannum<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  5: directory_path
  6: toronto_transit_corporation
  7: rannum
  8: <CURSOR>

*** End of source buffer ***
Saying: ['green', 'rabbit']
Heard green rabbit
  5: directory_path
  6: toronto_transit_corporation
  7: rannum
  8: GrnRab<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  6: toronto_transit_corporation
  7: rannum
  8: GrnRab
  9: <CURSOR>

*** End of source buffer ***
Saying: ['integer', 'format']
Heard integer format
  6: toronto_transit_corporation
  7: rannum
  8: GrnRab
  9: intfmt<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  7: rannum
  8: GrnRab
  9: intfmt
 10: <CURSOR>

*** End of source buffer ***
Saying: ['rabbit']
Heard rabbit
  7: rannum
  8: GrnRab
  9: intfmt
 10: rabbit<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  8: GrnRab
  9: intfmt
 10: rabbit
 11: <CURSOR>

*** End of source buffer ***
Saying: ['data', 'processing']
Heard data processing
  8: GrnRab
  9: intfmt
 10: rabbit
 11: data_processing<CURSOR>

*** End of source buffer ***
Saying: ['new', 'statement']
Heard new statement
  9: intfmt
 10: rabbit
 11: data_processing
 12: <CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : unusual_symbols
* Description : compilation and dictation of unusual symbols
*******************************************************************************

*** Compiling symbols from file: %VCODE_HOME%\Data\TestData\unusual_symbols.py ***
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_py_std_sym.py'
Compiling symbols for file '%VCODE_HOME%\Data\TestData\test_C_Cpp_std_sym.cpp'


Parsed symbols are: 
THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym: ['this symbol was parsed from test C. C. plus plus standard sym', 'this symbol was parsed from test C. C. plus plus standard symbol', 'this symbol was parsed from test C. C. plus plus std sym', 'this symbol was parsed from test C. C. plus plus std symbol', 'this symbol was parsed from test C. cpp standard sym', 'this symbol was parsed from test C. cpp standard symbol', 'this symbol was parsed from test C. cpp std sym', 'this symbol was parsed from test C. cpp std symbol']
THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym: ['this symbol was parsed from test P. Y. standard sym', 'this symbol was parsed from test P. Y. standard symbol', 'this symbol was parsed from test P. Y. std sym', 'this symbol was parsed from test P. Y. std symbol', 'this symbol was parsed from test pie standard sym', 'this symbol was parsed from test pie standard symbol', 'this symbol was parsed from test pie std sym', 'this symbol was parsed from test pie std symbol', 'this symbol was parsed from test py standard sym', 'this symbol was parsed from test py standard symbol', 'this symbol was parsed from test py std sym', 'this symbol was parsed from test py std symbol', 'this symbol was parsed from test python standard sym', 'this symbol was parsed from test python standard symbol', 'this symbol was parsed from test python std sym', 'this symbol was parsed from test python std symbol']
openlog: ['openlog']
s: ['S.']
se: ['S. E.', 'se']
_cached_symbols_as_one_string[o] is:
    openlog  
_cached_symbols_as_one_string[s] is:
    s  se  sin  sinh  sqrt  str  
_cached_symbols_as_one_string[t] is:
    THIS_SYMBOL_WAS_PARSED_FROM_test_C_Cpp_std_sym  THIS_SYMBOL_WAS_PARSED_FROM_test_py_std_sym  tan  tanh  type  
Unresolved abbreviations are:
'openlog': appears in ['openlog']
's': appears in ['s']
'se': appears in ['se']

*** End of compilation test ***

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***
Next utterance should not match short symbol 'se'
Got command: say(['software', 'engineering', 'comma'],1
,0,0,)
Heard software engineering comma
*** Start of source buffer ***
  1: software_engineering, <CURSOR>

*** End of source buffer ***
Next utterance should match non-separable symbol 'openlog'
Got command: say(['open', 'log'],1
,0,0,)
Heard open log
*** Start of source buffer ***
  1: software_engineering, openlog<CURSOR>

*** End of source buffer ***


*******************************************************************************
* Name        : v7_select
* Description : testing oddities in select pseudocode with Natspeak 7
*******************************************************************************



>>> Testing console command: open_file('blah.py')

WARNING: source file 'blah.py' doesn't exist.
*** Start of source buffer ***
  1: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', 'equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', '=\\equals', '0\\zero', 'new statement'], user_input='1\n')
Heard index equals zero new statement
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: index = 0
  4: <CURSOR>

*** End of source buffer ***


>>> Testing console command: say(['index', '=\\equals', '1\\one', 'new statement'], user_input='1\n')
Heard index equals one new statement
  2: index = 1
  3: index = 0
  4: index = 1
  5: <CURSOR>

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select next', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select next index equals zero
*** Start of source buffer ***
  1: index = 0
  2: index = 1
  3: <SEL_START>index = 0<SEL_END>
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: goto_line(2)

*** Start of source buffer ***
  1: index = 0
  2: <CURSOR>index = 1
  3: index = 0
  4: index = 1
  5: 

*** End of source buffer ***


>>> Testing console command: say(['select previous', 'index', '=\\equals', '0\\zero'], user_input='None')
Heard select previous index equals zero
*** Start of source buffer ***
  1: <SEL_START>index = 0<SEL_END>
  2: index = 1
  3: index = 0
  4: index = 1


*******************************************************************************
* Name        : wxWindowsWithHelpers
* Description : Testing subclasses of wxWindows widgets.
*******************************************************************************




-----------------------------------------------
Test suite completed in:  817.846000195 secs
-----------------------------------------------
